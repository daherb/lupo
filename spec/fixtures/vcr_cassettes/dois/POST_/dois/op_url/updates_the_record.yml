---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.2903
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.6.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sat, 28 Mar 2020 05:04:37 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d701507cc8f429d18fb673b413675b1a91585371877; expires=Mon, 27-Apr-20
        05:04:37 GMT; path=/; domain=.doi.org; HttpOnly; SameSite=Lax; Secure
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 57aecfb85a44c4c7-DUS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9I0sDYyUdiGiQI0jQP0AJyK3ligUAm22UTTAAAAA=
    http_version: null
  recorded_at: Sat, 28 Mar 2020 05:04:37 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.2903/j.efsa.2018.5239/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.6.1; mailto:info@datacite.org)
      Accept:
      - text/xml
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.2903/j.efsa.2018.5239>; rel="canonical", <https://api.wiley.com/onlinelibrary/tdm/v1/articles/10.2903/j.efsa.2018.5239>;
        version="vor"; type="application/pdf"; rel="item", <http://onlinelibrary.wiley.com/wol1/doi/10.2903/j.efsa.2018.5239/fullpdf>;
        version="vor"; rel="item"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '136976'
      Server:
      - http-kit
      Date:
      - Sat, 28 Mar 2020 05:04:38 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 28 Mar 2020 05:04:38 GMT
recorded_with: VCR 5.1.0
