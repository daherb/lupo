---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.2903
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.6; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sat, 06 Jul 2019 15:23:59 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '48'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d42653f281c81d57195a7231611fbf4d31562426639; expires=Sun, 05-Jul-20
        15:23:59 GMT; path=/; domain=.doi.org; HttpOnly
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 4f22954078dec290-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.2903",
            "RA": "OP"
          }
        ]
    http_version: 
  recorded_at: Sat, 06 Jul 2019 15:23:59 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.2903/j.efsa.2018.5239/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.2.6; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.2903/j.efsa.2018.5239>; rel="canonical", <https://api.wiley.com/onlinelibrary/tdm/v1/articles/10.2903/j.efsa.2018.5239>;
        version="vor"; type="application/pdf"; rel="item", <http://onlinelibrary.wiley.com/wol1/doi/10.2903/j.efsa.2018.5239/fullpdf>;
        version="vor"; rel="item"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '136730'
      Server:
      - http-kit
      Date:
      - Sat, 06 Jul 2019 15:24:00 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPGNyb3NzcmVmX3Jlc3VsdCB4bWxucz0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcvcXJzY2hlbWEvMy4wIiB2ZXJzaW9uPSIzLjAiIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcvcXJzY2hlbWEvMy4wIGh0dHA6Ly93d3cuY3Jvc3NyZWYub3JnL3NjaGVtYXMvY3Jvc3NyZWZfcXVlcnlfb3V0cHV0My4wLnhzZCI+DQogIDxxdWVyeV9yZXN1bHQ+DQogICAgPGhlYWQ+DQogICAgICA8ZG9pX2JhdGNoX2lkPm5vbmU8L2RvaV9iYXRjaF9pZD4NCiAgICA8L2hlYWQ+DQogICAgPGJvZHk+DQogICAgICA8cXVlcnkgc3RhdHVzPSJyZXNvbHZlZCI+DQogICAgICAgIDxkb2kgdHlwZT0iam91cm5hbF9hcnRpY2xlIj4xMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzk8L2RvaT4NCiAgICAgICAgPGNybS1pdGVtIG5hbWU9InB1Ymxpc2hlci1uYW1lIiB0eXBlPSJzdHJpbmciPldpbGV5PC9jcm0taXRlbT4NCiAgICAgICAgPGNybS1pdGVtIG5hbWU9InByZWZpeC1uYW1lIiB0eXBlPSJzdHJpbmciPlB1YmxpY2F0aW9ucyBPZmZpY2Ugb2YgdGhlIEV1cm9wZWFuIFVuaW9uPC9jcm0taXRlbT4NCiAgICAgICAgPGNybS1pdGVtIG5hbWU9Im1lbWJlci1pZCIgdHlwZT0ibnVtYmVyIj4zMTE8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0iY2l0YXRpb24taWQiIHR5cGU9Im51bWJlciI+OTc5MDA1Nzg8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0iam91cm5hbC1pZCIgdHlwZT0ibnVtYmVyIj4yOTg4NTE8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0iZGVwb3NpdC10aW1lc3RhbXAiIHR5cGU9Im51bWJlciI+MjAxODEyMTcxMDIxMTkwMDA8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0ib3duZXItcHJlZml4IiB0eXBlPSJzdHJpbmciPjEwLjI5MDM8L2NybS1pdGVtPg0KICAgICAgICA8Y3JtLWl0ZW0gbmFtZT0ibGFzdC11cGRhdGUiIHR5cGU9ImRhdGUiPjIwMTgtMTItMTdUMDk6MzA6MDlaPC9jcm0taXRlbT4NCiAgICAgICAgPGNybS1pdGVtIG5hbWU9ImNyZWF0ZWQiIHR5cGU9ImRhdGUiPjIwMTgtMDQtMThUMDc6NDc6MTZaPC9jcm0taXRlbT4NCiAgICAgICAgPGNybS1pdGVtIG5hbWU9ImNpdGVkYnktY291bnQiIHR5cGU9Im51bWJlciI+MTwvY3JtLWl0ZW0+DQogICAgICAgIDxkb2lfcmVjb3JkPg0KICAgICAgICAgIDxjcm9zc3JlZiB4bWxucz0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcveHNjaGVtYS8xLjEiIHhzaTpzY2hlbWFMb2NhdGlvbj0iaHR0cDovL3d3dy5jcm9zc3JlZi5vcmcveHNjaGVtYS8xLjEgaHR0cDovL2RvaS5jcm9zc3JlZi5vcmcvc2NoZW1hcy91bml4cmVmMS4xLnhzZCI+DQogICAgICAgICAgICA8am91cm5hbD4NCiAgICAgICAgICAgICAgPGpvdXJuYWxfbWV0YWRhdGE+DQogICAgICAgICAgICAgICAgPGZ1bGxfdGl0bGU+RUZTQSBKb3VybmFsPC9mdWxsX3RpdGxlPg0KICAgICAgICAgICAgICAgIDxhYmJyZXZfdGl0bGU+RUZTMjwvYWJicmV2X3RpdGxlPg0KICAgICAgICAgICAgICAgIDxhYmJyZXZfdGl0bGU+RUZTQSBKb3VybmFsPC9hYmJyZXZfdGl0bGU+DQogICAgICAgICAgICAgICAgPGlzc24gbWVkaWFfdHlwZT0icHJpbnQiPjE4MzE0NzMyPC9pc3NuPg0KICAgICAgICAgICAgICAgIDxpc3NuIG1lZGlhX3R5cGU9ImVsZWN0cm9uaWMiPjE4MzE0NzMyPC9pc3NuPg0KICAgICAgICAgICAgICA8L2pvdXJuYWxfbWV0YWRhdGE+DQogICAgICAgICAgICAgIDxqb3VybmFsX2lzc3VlPg0KICAgICAgICAgICAgICAgIDxwdWJsaWNhdGlvbl9kYXRlPg0KICAgICAgICAgICAgICAgICAgPG1vbnRoPjA0PC9tb250aD4NCiAgICAgICAgICAgICAgICAgIDx5ZWFyPjIwMTg8L3llYXI+DQogICAgICAgICAgICAgICAgPC9wdWJsaWNhdGlvbl9kYXRlPg0KICAgICAgICAgICAgICAgIDxqb3VybmFsX3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTY8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICA8L2pvdXJuYWxfdm9sdW1lPg0KICAgICAgICAgICAgICAgIDxpc3N1ZT40PC9pc3N1ZT4NCiAgICAgICAgICAgICAgPC9qb3VybmFsX2lzc3VlPg0KICAgICAgICAgICAgICA8am91cm5hbF9hcnRpY2xlIGxhbmd1YWdlPSJlbiI+DQogICAgICAgICAgICAgICAgPHRpdGxlcz4NCiAgICAgICAgICAgICAgICAgIDx0aXRsZT5TY2llbnRpZmljIG9waW5pb24gb24gdGhlIHNhZmV0eSBvZiBncmVlbiB0ZWEgY2F0ZWNoaW5zPC90aXRsZT4NCiAgICAgICAgICAgICAgICA8L3RpdGxlcz4NCiAgICAgICAgICAgICAgICA8Y29udHJpYnV0b3JzPg0KICAgICAgICAgICAgICAgICAgPG9yZ2FuaXphdGlvbiBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJmaXJzdCI+RUZTQSBQYW5lbMKgb24gRm9vZCBBZGRpdGl2ZXMgYW5kIE51dHJpZW50IFNvdXJjZXMgYWRkZWQgdG8gRm9vZCAoQU5TKTwvb3JnYW5pemF0aW9uPg0KICAgICAgICAgICAgICAgICAgPHBlcnNvbl9uYW1lIGNvbnRyaWJ1dG9yX3JvbGU9ImF1dGhvciIgc2VxdWVuY2U9ImFkZGl0aW9uYWwiPg0KICAgICAgICAgICAgICAgICAgICA8Z2l2ZW5fbmFtZT5NYWdlZDwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+WW91bmVzPC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+UGV0ZXI8L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPkFnZ2V0dDwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPkZlcm5hbmRvPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5BZ3VpbGFyPC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+UmljY2FyZG88L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPkNyZWJlbGxpPC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+QmlyZ2l0PC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5EdXNlbXVuZDwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPk1ldGthPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5GaWxpcGnEjTwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPk1hcmlhIEpvc2U8L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPkZydXRvczwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPlBpZXJyZTwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+R2FsdGllcjwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPkRhdmlkPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5Hb3R0PC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+VXJzdWxhPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5HdW5kZXJ04oCQUmVteTwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPkNsYXVkZTwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+TGFtYnLDqTwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPkplYW7igJBDaGFybGVzPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5MZWJsYW5jPC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+SW5nZXIgVGhlcmVzZTwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+TGlsbGVnYWFyZDwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPlBldGVyPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5Nb2xkZXVzPC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+QWxpY2phPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5Nb3J0ZW5zZW48L3N1cm5hbWU+DQogICAgICAgICAgICAgICAgICA8L3BlcnNvbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgPHBlcnNvbl9uYW1lIGNvbnRyaWJ1dG9yX3JvbGU9ImF1dGhvciIgc2VxdWVuY2U9ImFkZGl0aW9uYWwiPg0KICAgICAgICAgICAgICAgICAgICA8Z2l2ZW5fbmFtZT5BZ25ldGE8L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPk9za2Fyc3Nvbjwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPkl2YW48L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPlN0YW5rb3ZpYzwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPkluZTwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+V2FhbGtlbnPigJBCZXJlbmRzZW48L3N1cm5hbWU+DQogICAgICAgICAgICAgICAgICA8L3BlcnNvbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgPHBlcnNvbl9uYW1lIGNvbnRyaWJ1dG9yX3JvbGU9ImF1dGhvciIgc2VxdWVuY2U9ImFkZGl0aW9uYWwiPg0KICAgICAgICAgICAgICAgICAgICA8Z2l2ZW5fbmFtZT5SdWRvbGYgQW50b25pdXM8L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPldvdXRlcnNlbjwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPlJhdWwgSjwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+QW5kcmFkZTwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPkNyaXN0aW5hPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5Gb3J0ZXM8L3N1cm5hbWU+DQogICAgICAgICAgICAgICAgICA8L3BlcnNvbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgPHBlcnNvbl9uYW1lIGNvbnRyaWJ1dG9yX3JvbGU9ImF1dGhvciIgc2VxdWVuY2U9ImFkZGl0aW9uYWwiPg0KICAgICAgICAgICAgICAgICAgICA8Z2l2ZW5fbmFtZT5QYXNxdWFsZTwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+TW9zZXNzbzwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPlBhdHJpemlhPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5SZXN0YW5pPC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+RGF2aWRlPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5BcmNlbGxhPC9zdXJuYW1lPg0KICAgICAgICAgICAgICAgICAgPC9wZXJzb25fbmFtZT4NCiAgICAgICAgICAgICAgICAgIDxwZXJzb25fbmFtZSBjb250cmlidXRvcl9yb2xlPSJhdXRob3IiIHNlcXVlbmNlPSJhZGRpdGlvbmFsIj4NCiAgICAgICAgICAgICAgICAgICAgPGdpdmVuX25hbWU+RmFiaW9sYTwvZ2l2ZW5fbmFtZT4NCiAgICAgICAgICAgICAgICAgICAgPHN1cm5hbWU+UGl6em88L3N1cm5hbWU+DQogICAgICAgICAgICAgICAgICA8L3BlcnNvbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgPHBlcnNvbl9uYW1lIGNvbnRyaWJ1dG9yX3JvbGU9ImF1dGhvciIgc2VxdWVuY2U9ImFkZGl0aW9uYWwiPg0KICAgICAgICAgICAgICAgICAgICA8Z2l2ZW5fbmFtZT5DYW1pbGxhPC9naXZlbl9uYW1lPg0KICAgICAgICAgICAgICAgICAgICA8c3VybmFtZT5TbWVyYWxkaTwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgICA8cGVyc29uX25hbWUgY29udHJpYnV0b3Jfcm9sZT0iYXV0aG9yIiBzZXF1ZW5jZT0iYWRkaXRpb25hbCI+DQogICAgICAgICAgICAgICAgICAgIDxnaXZlbl9uYW1lPk1hdHRoZXc8L2dpdmVuX25hbWU+DQogICAgICAgICAgICAgICAgICAgIDxzdXJuYW1lPldyaWdodDwvc3VybmFtZT4NCiAgICAgICAgICAgICAgICAgIDwvcGVyc29uX25hbWU+DQogICAgICAgICAgICAgICAgPC9jb250cmlidXRvcnM+DQogICAgICAgICAgICAgICAgPHB1YmxpY2F0aW9uX2RhdGU+DQogICAgICAgICAgICAgICAgICA8bW9udGg+MDQ8L21vbnRoPg0KICAgICAgICAgICAgICAgICAgPHllYXI+MjAxODwveWVhcj4NCiAgICAgICAgICAgICAgICA8L3B1YmxpY2F0aW9uX2RhdGU+DQogICAgICAgICAgICAgICAgPGRvaV9kYXRhPg0KICAgICAgICAgICAgICAgICAgPGRvaT4xMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzk8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDxyZXNvdXJjZT5odHRwOi8vZG9pLndpbGV5LmNvbS8xMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzk8L3Jlc291cmNlPg0KICAgICAgICAgICAgICAgICAgPGNvbGxlY3Rpb24gcHJvcGVydHk9ImNyYXdsZXItYmFzZWQiPg0KICAgICAgICAgICAgICAgICAgICA8aXRlbSBjcmF3bGVyPSJpUGFyYWRpZ21zIj4NCiAgICAgICAgICAgICAgICAgICAgICA8cmVzb3VyY2U+aHR0cDovL29ubGluZWxpYnJhcnkud2lsZXkuY29tL3dvbDEvZG9pLzEwLjI5MDMvai5lZnNhLjIwMTguNTIzOS9mdWxscGRmPC9yZXNvdXJjZT4NCiAgICAgICAgICAgICAgICAgICAgPC9pdGVtPg0KICAgICAgICAgICAgICAgICAgPC9jb2xsZWN0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNvbGxlY3Rpb24gcHJvcGVydHk9InRleHQtbWluaW5nIj4NCiAgICAgICAgICAgICAgICAgICAgPGl0ZW0+DQogICAgICAgICAgICAgICAgICAgICAgPHJlc291cmNlIGNvbnRlbnRfdmVyc2lvbj0idm9yIiBtaW1lX3R5cGU9ImFwcGxpY2F0aW9uL3BkZiI+aHR0cHM6Ly9hcGkud2lsZXkuY29tL29ubGluZWxpYnJhcnkvdGRtL3YxL2FydGljbGVzLzEwLjI5MDMvai5lZnNhLjIwMTguNTIzOTwvcmVzb3VyY2U+DQogICAgICAgICAgICAgICAgICAgIDwvaXRlbT4NCiAgICAgICAgICAgICAgICAgIDwvY29sbGVjdGlvbj4NCiAgICAgICAgICAgICAgICA8L2RvaV9kYXRhPg0KICAgICAgICAgICAgICAgIDxjaXRhdGlvbl9saXN0Pg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPkFidSBFbCBXYWZhIFksIEJlbmF2ZW50ZSBBRiwgVGFsYXZlcmEgQUYsIFDDqXJleiBNUiBhbmQgUmFtb3PigJBDbGVtZW50ZSBKSSwgMjAwNS4gQWN1dGUgaGVwYXRpdGlzIGluZHVjZWQgYnkgQ2FtZWxsaWEgc2luZW5zaXMgKGdyZWVuIHRlYSkuIEFuYWxlcyBkZSBtZWRpY2luYSBpbnRlcm5hLCAyMiwgMjk4LjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Q2xpbmljYWwgUGhhcm1hY29sb2d5IGFuZCBUaGVyYXBldXRpY3M8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+ODk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+ODA2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5DYXNlIGRlZmluaXRpb24gYW5kIHBoZW5vdHlwZSBzdGFuZGFyZGl6YXRpb24gaW4gZHJ1Z+KAkGluZHVjZWQgbGl2ZXIgaW5qdXJ5PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkFpdGhhbDwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDM4L2NscHQuMjAxMS41ODwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBIZXBhdG9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjY3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjMzOTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q29mZmVlIGFuZCBoZXJiYWwgdGVhIGNvbnN1bXB0aW9uIGlzIGFzc29jaWF0ZWQgd2l0aCBsb3dlciBsaXZlciBzdGlmZm5lc3MgaW4gdGhlIGdlbmVyYWwgcG9wdWxhdGlvbjogdGhlIFJvdHRlcmRhbSBzdHVkeTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5BbGZlcmluazwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2ouamhlcC4yMDE3LjAzLjAxMzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBIeWRyb2NvbGxvaWRzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjYxPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI0MTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Tm9uY292YWxlbnQgaW50ZXJhY3Rpb25zIG9mIGJvdmluZSDOseKAkGxhY3RhbGJ1bWluIHdpdGggZ3JlZW4gdGVhIHBvbHlwaGVub2wsIGVwaWdhbG9jYXRlY2hpbuKAkDPigJBnYWxsYXRlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkFs4oCQSGFuaXNoPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE2PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mb29kaHlkLjIwMTYuMDUuMDEyPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjUiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5HYXN0cm9lbnRlcm9sb2fDrWEgeSBoZXBhdG9sb2fDrWE8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mzg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NDQ8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkhlcGF0aXRpcyBhZ3VkYSBwb3IgZXh0cmFjdG8gZGUgdMOpIHZlcmRlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkFsbW9yw7NzPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5nYXN0cm9oZXAuMjAxNC4wNy4wMDQ8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNiI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+QW1hcmlsZXMgUCwgQW5ndWxvIE4sIEFndWRlbG/igJBBZ3VkZWxvIEogYW5kIEdhdmlyaWEgRywgMjAwOS4gSGVwYXRpdGlzIGFzb2NpYWRhIGEgaW5mdXNpb25lcyBhY3Vvc2FzIGRlIHTDqSB2ZXJkZTogYSBwcm9ww7NzaXRvIGRlIHVuIGNhc28uPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5HYXN0cm9lbnRlcm9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjEyOTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT41MTI8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkRydWfigJBpbmR1Y2VkIGxpdmVyIGluanVyeTogYW4gYW5hbHlzaXMgb2YgNDYxIGluY2lkZW5jZXMgc3VibWl0dGVkIHRvIHRoZSBTcGFuaXNoIHJlZ2lzdHJ5IG92ZXIgYSAxMOKAkHllYXIgcGVyaW9kPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkFuZHJhZGU8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmdhc3Ryby4yMDA1LjA1LjAwNjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4Ij4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5BTlNFUyAoRnJlbmNoIEFnZW5jeSBmb3IgRm9vZCwgRW52aXJvbm1lbnRhbCBhbmQgT2NjdXBhdGlvbmFsIEhlYWx0aCAmYW1wOyBTYWZldHkpLCAyMDEyYS4gQXZpcyBkZSBsJ0FnZW5jZSBuYXRpb25hbGUgZGUgc8OpY3VyaXTDqSBzYW5pdGFpcmUgZGUgbCdhbGltZW50YXRpb24sIGRlIGwnZW52aXJvbm5lbWVudCBldCBkdSB0cmF2YWlsIHJlbGF0aWYgYXUgcmlzcXVlIGQnaMOpcGF0b3RveGljaXTDqSBsacOpIMOgIGxhIGNvbnNvbW1hdGlvbiBkZSBkZW5yw6llcyBhbGltZW50YWlyZXMgY29udGVuYW50IG5vdGFtbWVudCBkdSB0aMOpIHZlcnQuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjkiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPkFOU0VTIChGcmVuY2ggQWdlbmN5IGZvciBGb29kLCBFbnZpcm9ubWVudGFsIGFuZCBPY2N1cGF0aW9uYWwgSGVhbHRoICZhbXA7IFNhZmV0eSksIDIwMTJiLiBBdmlzIGRlIGwnQWdlbmNlIG5hdGlvbmFsZSBkZSBzw6ljdXJpdMOpIHNhbml0YWlyZSBkZSBsJ2FsaW1lbnRhdGlvbiwgZGUgbCdlbnZpcm9ubmVtZW50IGV0IGR1IHRyYXZhaWwgcmVsYXRpZiDDoCBsYSBzw6ljdXJpdMOpIGQnZW1wbG9pIGRlIGxhIHBvdWRyZSBkZSB0aMOpIHZlcnQgZGFucyBsZXMgY29tcGxlbWVudHMgYWxpbWVudGFpcmVzLjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMCI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+QU5TRVMgKEZyZW5jaCBBZ2VuY3kgZm9yIEZvb2QsIEVudmlyb25tZW50YWwgYW5kIE9jY3VwYXRpb25hbCBIZWFsdGggJmFtcDsgU2FmZXR5KSwgMjAxMmMuIEF2aXMgZGUgbCdBZ2VuY2UgbmF0aW9uYWxlIGRlIHPDqWN1cml0w6kgc2FuaXRhaXJlIGRlIGwnYWxpbWVudGF0aW9uLCBkZSBsJ2Vudmlyb25uZW1lbnQgZXQgZHUgdHJhdmFpbCByZWxhdGlmIMOgIGxhIHPDqWN1cml0w6kgZCdlbXBsb2kgZGVzIHByw6lwYXJhdGlvbnMgZGUgdGjDqSB2ZXJ0LjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMSI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+QXJyZXRlIFJveWFsZSAsIDE5OTcuIEFycmV0ZSBSb3lhbGUgZHUgMjkgQW91dCAxOTk3IHJlbGF0aWYgw6AgbGEgZmFicmljYXRpb24gZXQgYXUgY29tbWVyY2UgZGUgZGVucsOpZXMgYWxpbWVudGFpcmVzIGNvbXBvc8OpZXMgb3UgY29udGVuYW50IGRlcyBwbGFudGVzIG91IHByw6lwYXJhdGlvbnMgZGUgcGxhbnRlcyAoTUIgMjEuWEkuMTk5NykgZXQgbW9kaWZpY2F0aW9ucyBBdmFpbGFibGUgb25saW5lOiBodHRwOi8vd3d3LmhlYWx0aC5iZWxnaXVtLmJlL2ZyL3ZlcnNpb24tY29uc29saWRlZS1hcnJldGUtcm95YWwtZHUtMjktYW91dC0xOTk3PC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEyIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RHJ1ZyBTYWZldHk8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MzU8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+OTQ0PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BY3V0ZSBoZXBhdGl0aXMgY2F1c2VkIGJ5IGdyZWVuIHRlYSBpbmZ1c2lvbjogYSBjYXNlIHJlcG9ydDwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5BcnplbnRvbjwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMjwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBBZ3JpY3VsdHVyYWwgYW5kIEZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQ5PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjUzNDA8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkZhY3RvcnMgYWZmZWN0aW5nIHRoZSBjYWZmZWluZSBhbmQgcG9seXBoZW5vbCBjb250ZW50cyBvZiBibGFjayBhbmQgZ3JlZW4gdGVhIGluZnVzaW9uczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Bc3RpbGw8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAyMS9qZjAxMDc1OSs8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTQiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5UaGUgSm91cm5hbCBvZiBOdXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTM4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE1MzVTPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5CaW9hdmFpbGFiaWxpdHkgb2YgcG9seXBoZW5vbiBFIGZsYXZhbuKAkDPigJBvbHMgaW4gaHVtYW5zIHdpdGggYW4gaWxlb3N0b215PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkF1Z2VyPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA4PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwOTMvam4vMTM4LjguMTUzNVM8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTUiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIHRoZSBBbWVyaWNhbiBDb2xsZWdlIG9mIE51dHJpdGlvbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yOTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R3JlZW4gdGVhIHN1cHBsZW1lbnRhdGlvbiBhZmZlY3RzIGJvZHkgd2VpZ2h0LCBsaXBpZHMsIGFuZCBsaXBpZCBwZXJveGlkYXRpb24gaW4gb2Jlc2Ugc3ViamVjdHMgd2l0aCBtZXRhYm9saWMgc3luZHJvbWU8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+QmFzdTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDgwLzA3MzE1NzI0LjIwMTAuMTA3MTk4MTQ8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5OdXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjA2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5HcmVlbiB0ZWEgbWluaW1hbGx5IGFmZmVjdHMgYmlvbWFya2VycyBvZiBpbmZsYW1tYXRpb24gaW4gb2Jlc2Ugc3ViamVjdHMgd2l0aCBtZXRhYm9saWMgc3luZHJvbWU8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+QmFzdTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2oubnV0LjIwMTAuMDEuMDE1PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBIZXBhdG9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQ3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI5NTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+U2VyaW91cyBhZHZlcnNlIGxpdmVyIHJlYWN0aW9ucyBhc3NvY2lhdGVkIHdpdGggaGVyYmFsIHdlaWdodOKAkGxvc3Mgc3VwcGxlbWVudHM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Qmpvcm5zc29uPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5qaGVwLjIwMDcuMDUuMDEwPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE4Ij4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5CbGFzY2hlayBXLCBFYmVsIFMsIEhhY2tlbnRoYWwgRSwgSG9semdyYWJlIFUsIEtlbGxlciBLLCBSZWljaGxpbmcgSiBhbmQgU2NodWx6IFYsIDIwMDYuIEhhZ2VyUk9NIDIwMDYuIEhhZ2VycyBIYW5kYnVjaCBkZXIgRHJvZ2VuIHVuZCBBcnpuZWlzdG9mZmUuIENE4oCQUmVhbGlzaWVydW5nOiBJbmZvcm1hdGlrIElJLCBVbml2ZXJzaXTDpHQgV8O8cnpidXJnLCBbUHJvZ3JhbW12ZXJzaW9uIDYuMV0uPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIwIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBBZGRpdGl2ZXMgYW5kIENvbnRhbWluYW50czogUGFydCBBPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjMxPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE4ODY8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkRldGVybWluYXRpb24gb2YgcHlycm9saXppZGluZSBhbGthbG9pZHMgaW4gdGVhLCBoZXJiYWwgZHJ1Z3MgYW5kIGhvbmV5PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkJvZGk8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTQ8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTA4MC8xOTQ0MDA0OS4yMDE0Ljk2NDMzNzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgTmFub3NjaWVuY2UgYW5kIE5hbm90ZWNobm9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjEzPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjYzMjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RXBpZ2FsbG9jYXRlY2hpbuKAkDPigJBHYWxsYXRlIChFR0NHKSBpbmhpYml0cyBjZWxsIHByb2xpZmVyYXRpb24gYW5kIG1pZ3JhdG9yeSBiZWhhdmlvdXIgb2YgdHJpcGxlIG5lZ2F0aXZlIGJyZWFzdCBjYW5jZXIgY2VsbHM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+QnJhaWN1PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjExNjYvam5uLjIwMTMuNjg4MjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgYW5kIENoZW1pY2FsIFRveGljb2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTA3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQ3MjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TGl2ZXIgdG94aWNpdHkgcmVsYXRlZCB0byBoZXJicyBhbmQgZGlldGFyeSBzdXBwbGVtZW50czogb25saW5lIHRhYmxlIG9mIGNhc2UgcmVwb3J0cy4gUGFydCAyIG9mIDUgc2VyaWVzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkJyb3duPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mY3QuMjAxNi4wNy4wMDE8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjMiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5FbnZpcm9ubWVudGFsIE1vbml0b3JpbmcgYW5kIEFzc2Vzc21lbnQ8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTg4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE4MzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TW9uaXRvcmluZyBvZiBlc3NlbnRpYWwgYW5kIGhlYXZ5IG1ldGFscyBpbiBncmVlbiB0ZWEgZnJvbSBkaWZmZXJlbnQgZ2VvZ3JhcGhpY2FsIG9yaWdpbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+QnJ6ZXppY2hh4oCQQ2lyb2NrYTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNjwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDA3L3MxMDY2MS0wMTYtNTE1Ny15PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjI0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40NDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMTA4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FZmZlY3Qgb2YgZ3JlZW4gdGVhIGV4dHJhY3RzIG9uIGxpdmVyIGZ1bmN0aW9ucyBpbiBXaXN0YXIgcmF0czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5CdW48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZjdC4yMDA2LjAxLjAwNjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyNSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkFtZXJpY2FuIEpvdXJuYWwgb2YgRXBpZGVtaW9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE4MTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zOTc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlVyaW5hcnkgYmlvbWFya2VycyBvZiBjYXRlY2hpbnMgYW5kIHJpc2sgb2YgaGVwYXRvY2VsbHVsYXIgY2FyY2lub21hIGluIHRoZSBTaGFuZ2hhaSBDb2hvcnQgU3R1ZHk8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+QnV0bGVyPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwOTMvYWplL2t3dTMwNDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyNiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkludGVybmF0aW9uYWwgSm91cm5hbCBvZiBGb29kIFNjaWVuY2VzIGFuZCBOdXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NjM8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NTEzPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5VcGRhdGVkIGJpb2F2YWlsYWJpbGl0eSBhbmQgNDggaCBleGNyZXRpb24gcHJvZmlsZSBvZiBmbGF2YW7igJAz4oCQb2xzIGZyb20gZ3JlZW4gdGVhIGluIGh1bWFuczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5DYWxhbmk8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMzEwOS8wOTYzNzQ4Ni4yMDExLjY0MDMxMTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyNyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgQWdyaWN1bHR1cmFsIGFuZCBGb29kIENoZW1pc3RyeTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT42NDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMDU0PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5EdWFsIHJvbGUgKGFudGnigJBhbmQgcHJv4oCQb3hpZGFudCkgb2YgZ2FsbGljIGFjaWQgaW4gbWVkaWF0aW5nIG15b2ZpYnJpbGxhciBwcm90ZWluIGdlbGF0aW9uIGFuZCBnZWwgaW7CoHZpdHJvIGRpZ2VzdGlvbjwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5DYW88L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAyMS9hY3MuamFmYy42YjAwMzE0PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjI4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBQaGFybWFjeSBhbmQgUGhhcm1hY29sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjU5PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjM5NTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+SW50ZXN0aW5hbCBlZmZsdXggdHJhbnNwb3J0IGtpbmV0aWNzIG9mIGdyZWVuIHRlYSBjYXRlY2hpbnMgaW4gQ2Fjb+KAkDIgbW9ub2xheWVyIG1vZGVsPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkNoYW48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDc8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTIxMS9qcHAuNTkuMy4wMDA5PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjI5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+VG94aWNvbG9naWMgUGF0aG9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjM4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjEwNzA8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkZvdXJ0ZWVu4oCQd2VlayB0b3hpY2l0eSBzdHVkeSBvZiBncmVlbiB0ZWEgZXh0cmFjdCBpbiByYXRzIGFuZCBtaWNlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkNoYW48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTA8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTE3Ny8wMTkyNjIzMzEwMzgyNDM3PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjMwIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RW52aXJvbm1lbnRhbCBhbmQgTW9sZWN1bGFyIE11dGFnZW5lc2lzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQxPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQzPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5HZW5vdG94aWNpdHkgYW5kIHRveGljaXR5IG9mIHRoZSBwb3RlbnRpYWwgY2FuY2Vy4oCQcHJldmVudGl2ZSBhZ2VudCBwb2x5cGhlbm9uIEU8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Q2hhbmc8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDM8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwMi9lbS4xMDEyOTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYzMSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgQWdyaWN1bHR1cmFsIGFuZCBGb29kIENoZW1pc3RyeTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40OTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT40Nzc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkRlZ3JhZGF0aW9uIG9mIGdyZWVuIHRlYSBjYXRlY2hpbnMgaW4gdGVhIGRyaW5rczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5DaGVuPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDAxPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMjEvamYwMDA4NzdoPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjMyIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40Njwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT45Nzg8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPjI44oCQRGF5IG9yYWwgKGdhdmFnZSkgdG94aWNpdHkgc3R1ZGllcyBvZiBncmVlbiB0ZWEgY2F0ZWNoaW5zIHByZXBhcmVkIGZvciBiZXZlcmFnZXMgaW4gcmF0czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5DaGVuZ2VsaXM8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDg8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZjdC4yMDA3LjEwLjAyNzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYzMyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkNsaW5pY2FsIENhbmNlciBSZXNlYXJjaDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT45PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjMzMTI8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlBoYXJtYWNva2luZXRpY3MgYW5kIHNhZmV0eSBvZiBncmVlbiB0ZWEgcG9seXBoZW5vbHMgYWZ0ZXIgbXVsdGlwbGXigJBkb3NlIGFkbWluaXN0cmF0aW9uIG9mIGVwaWdhbGxvY2F0ZWNoaW4gZ2FsbGF0ZSBhbmQgcG9seXBoZW5vbiBFIGluIGhlYWx0aHkgaW5kaXZpZHVhbHM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Q2hvdzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwMzwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjM0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT43Njwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xOTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+U2Vuc2l0aXZpdHkgdG8gaGVwYXRvdG94aWNpdHkgZHVlIHRvIGVwaWdhbGxvY2F0ZWNoaW4gZ2FsbGF0ZSBpcyBhZmZlY3RlZCBieSBnZW5ldGljIGJhY2tncm91bmQgaW4gZGl2ZXJzaXR5IG91dGJyZWQgbWljZTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5DaHVyY2g8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZjdC4yMDE0LjExLjAwODwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYzNSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgQWdyaWN1bHR1cmFsIGFuZCBGb29kIENoZW1pc3RyeTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT42Mjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT42Nzc3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5Nb2xlY3VsYXIgaW50ZXJhY3Rpb25zIGJldHdlZW4gY2FmZmVpbmUgYW5kIGNhdGVjaGlucyBpbiBncmVlbiB0ZWE8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Q29sb248L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTQ8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAyMS9qZjUwMTEyODc8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMzYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5GcmVlIFJhZGljYWwgUmVzZWFyY2g8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mzg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTAyNTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R2x1Y3Vyb25pZGF0aW9uIG9mIHRoZSBncmVlbiB0ZWEgY2F0ZWNoaW5zLCjigJAp4oCQZXBpZ2FsbG9jYXRlY2hpbuKAkDPigJBnYWxsYXRlIGFuZCAo4oCQKeKAkGVwaWNhdGVjaGlu4oCQM+KAkGdhbGxhdGUsIGJ5IHJhdCBoZXBhdGljIGFuZCBpbnRlc3RpbmFsIG1pY3Jvc29tZXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Q3Jlc3B5PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwODAvMTA3MTU3NjA0MTAwMDE3Mjg0MjQ8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMzciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5DYW5jZXIgUHJldmVudGlvbiBSZXNlYXJjaDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT41PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjExNDQ8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlBoYXNlIElCIHJhbmRvbWl6ZWQsIGRvdWJsZeKAkGJsaW5kZWQsIHBsYWNlYm/igJBjb250cm9sbGVkLCBkb3NlIGVzY2FsYXRpb24gc3R1ZHkgb2YgcG9seXBoZW5vbiBFIGluIHdvbWVuIHdpdGggaG9ybW9uZSByZWNlcHRvcuKAkG5lZ2F0aXZlIGJyZWFzdCBjYW5jZXI8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Q3JldzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMjwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMTU4LzE5NDAtNjIwNy5DQVBSLTEyLTAxMTc8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMzgiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5MaXZlciBJbnRlcm5hdGlvbmFsPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjM2PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE1ODwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TWVjaGFuaXNtcyBvZiBhZGFwdGF0aW9uIGFuZCBwcm9ncmVzc2lvbiBpbiBpZGlvc3luY3JhdGljIGRydWcgaW5kdWNlZCBsaXZlciBpbmp1cnksIGNsaW5pY2FsIGltcGxpY2F0aW9uczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5EYXJhPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE2PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjExMTEvbGl2LjEyOTg4PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjM5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+TW9sZWN1bGFyIE51dHJpdGlvbiBhbmQgRm9vZCBSZXNlYXJjaDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT41ODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yNzg8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVwaWdhbGxvY2F0ZWNoaW7igJAz4oCQZ2FsbGF0ZSwgYSBEWVJLMUEgaW5oaWJpdG9yLCByZXNjdWVzIGNvZ25pdGl2ZSBkZWZpY2l0cyBpbiBEb3duIHN5bmRyb21lIG1vdXNlIG1vZGVscyBhbmQgaW4gaHVtYW5zPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkRlIGxhIFRvcnJlPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMDIvbW5mci4yMDEzMDAzMjU8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNDAiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5QaGFybWFjb2xvZ2ljYWwgUmVzZWFyY2g8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTA0PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjcwPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FcGlnYWxsb2NhdGVjaGluIGdhbGxhdGUgYW5kIG1pdG9jaG9uZHJpYeKAlGEgc3Rvcnkgb2YgbGlmZSBhbmQgZGVhdGg8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+RGUgT2xpdmVpcmE8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLnBocnMuMjAxNS4xMi4wMjc8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNDEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5HYXN0cm9lbnRlcm9sb2dpYSB5IGhlcGF0b2xvZ2lhPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjMxPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQwMjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+SGVwYXRpdGlzIHTDs3hpY2EgcG9yIENhbWVsbGlhIHNpbmVuc2lzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkRlIFBhdWxhPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA4PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjExNTcvMTMxMjM2MTM8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNDIiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Ub3hpY29sb2d5IExldHRlcnM8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mjc5PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQyPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5CaW9sb2dpY2FsIHJlbGV2YW5jZSBvZiBlZmZlY3RzIGZvbGxvd2luZyBjaHJvbmljIGFkbWluaXN0cmF0aW9uIG9mIG9jdGFtZXRoeWxjeWNsb3RldHJhc2lsb3hhbmUgKEQ0KSBpbiBGaXNjaGVyIDM0NCByYXRzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkRla2FudDwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2oudG94bGV0LjIwMTcuMDEuMDEwPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjQzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+TnV0cml0aW9uPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjI2PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjExMTA8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkJpb2F2YWlsYWJpbGl0eSBhbmQgY2F0YWJvbGlzbSBvZiBncmVlbiB0ZWEgZmxhdmFu4oCQM+KAkG9scyBpbiBodW1hbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+RGVsIFJpbzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2oubnV0LjIwMDkuMDkuMDIxPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjQ0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+TnV0cml0aW9uPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjI2PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjUyODwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+QmlvYXZhaWxhYmlsaXR5IG9mIGNhdGVjaGlucyBmcm9tIHJlYWR54oCQdG/igJBkcmluayB0ZWE8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+RGVsIFJpbzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2oubnV0LjIwMDkuMDYuMDEzPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjQ1Ij4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Eb25nb3dza2k8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZV90aXRsZT5MZXhpa29uIGRlciBMZWJlbnNtaXR0ZWwgdW5kIGRlciwgTGViZW5zbWl0dGVsY2hlbWllPC92b2x1bWVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNDYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Gb29kIGFuZCBDaGVtaWNhbCBUb3hpY29sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjgzPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5UaGUgc2FmZXR5IG9mIGdyZWVuIHRlYSBleHRyYWN0IHN1cHBsZW1lbnRhdGlvbiBpbiBwb3N0bWVub3BhdXNhbCB3b21lbiBhdCByaXNrIGZvciBicmVhc3QgY2FuY2VyOiByZXN1bHRzIG9mIHRoZSBNaW5uZXNvdGEgR3JlZW4gVGVhIFRyaWFsPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkRvc3RhbDwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2ouZmN0LjIwMTUuMDUuMDE5PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjQ3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBDaGVtaXN0cnk8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTI4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkFzc2Vzc21lbnQgb2YgcGxhc21hIGNvbmNlbnRyYXRpb25zIG9mICjiiJIp4oCQZXBpZ2FsbG9jYXRlY2hpbiBnYWxsYXRlIGluIG1pY2UgZm9sbG93aW5nIGFkbWluaXN0cmF0aW9uIG9mIGEgZG9zZSByZWZsZWN0aW5nIGNvbnN1bXB0aW9uIG9mIGEgc3RhbmRhcmQgZ3JlZW4gdGVhIGJldmVyYWdlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkR1YmU8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZvb2RjaGVtLjIwMTEuMDIuMDM4PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjQ4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RUZTQSBKb3VybmFsPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGlzc3VlPjk8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yODA8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVGU0EgU2NpZW50aWZpYyBDb29wZXJhdGlvbiAoRVNDTykgUmVwb3J0IOKAmEFkdmljZSBvbiB0aGUgRUZTQSBndWlkYW5jZSBkb2N1bWVudCBmb3IgdGhlIHNhZmV0eSBhc3Nlc3NtZW50IG9mIGJvdGFuaWNhbHMgYW5kIGJvdGFuaWNhbCBwcmVwYXJhdGlvbnMgaW50ZW5kZWQgZm9yIHVzZSBhcyBmb29kIHN1cHBsZW1lbnRzLCBiYXNlZCBvbiByZWFsIGNhc2Ugc3R1ZGllc+KAmSBFU0NPIFdPUktJTkcgR1JPVVAgT04gQk9UQU5JQ0FMUyBBTkQgQk9UQU5JQ0FMIFBSRVBBUkFUSU9OUzwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5FRlNBPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA5PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNDkiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5FRlNBIEpvdXJuYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTA8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGlzc3VlPjU8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yNjYzPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5Db21wZW5kaXVtIG9mIEJvdGFuaWNhbHMgcmVwb3J0ZWQgdG8gY29udGFpbiBuYXR1cmFsbHkgb2NjdXJyaW5nIHN1YnN0YW5jZXMgb2YgcG9zc2libGUgY29uY2VybiBmb3IgaHVtYW4gaGVhbHRoIHdoZW4gdXNlZCBpbiBmb29kIGFuZCBmb29kIHN1cHBsZW1lbnRzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkVGU0E8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY1MCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkVGU0EgSm91cm5hbDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT45PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxpc3N1ZT4zPC9pc3N1ZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjA5NzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+VXNlIG9mIHRoZSBFRlNBIENvbXByZWhlbnNpdmUgRXVyb3BlYW4gRm9vZCBDb25zdW1wdGlvbiBEYXRhYmFzZSBpbiBFeHBvc3VyZSBBc3Nlc3NtZW50PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkVGU0E8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMjkwMy9qLmVmc2EuMjAxMS4yMDk3PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjUxIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RUZTQSBKb3VybmFsPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGlzc3VlPjM8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xOTcwPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FdmFsdWF0aW9uIG9mIHRoZSBGb29kRXgsIHRoZSBmb29kIGNsYXNzaWZpY2F0aW9uIHN5c3RlbSBhcHBsaWVkIHRvIHRoZSBkZXZlbG9wbWVudCBvZiB0aGUgRUZTQSBDb21wcmVoZW5zaXZlIEV1cm9wZWFuIEZvb2QgQ29uc3VtcHRpb24gRGF0YWJhc2U8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+RUZTQTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4yOTAzL2ouZWZzYS4yMDExLjE5NzA8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNTIiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5FRlNBIEpvdXJuYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTQ8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGlzc3VlPjg8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT40NTcyPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5EaWV0YXJ5IGV4cG9zdXJlIGFzc2Vzc21lbnQgdG8gcHlycm9saXppZGluZSBhbGthbG9pZHMgaW4gdGhlIEV1cm9wZWFuIHBvcHVsYXRpb248L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+RUZTQTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNjwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjUzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RUZTQSBKb3VybmFsPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjEwPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxpc3N1ZT41PC9pc3N1ZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjY2MzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q29tcGVuZGl1bSBvZiBCb3RhbmljYWxzIHJlcG9ydGVkIHRvIGNvbnRhaW4gbmF0dXJhbGx5IG9jY3VycmluZyBzdWJzdGFuY2VzIG9mIHBvc3NpYmxlIGNvbmNlcm4gZm9yIGh1bWFuIGhlYWx0aCB3aGVuIHVzZWQgaW4gZm9vZCBhbmQgZm9vZCBzdXBwbGVtZW50czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5FRlNBPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNTQiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5FRlNBIEpvdXJuYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+ODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8aXNzdWU+MjwvaXNzdWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE0NjM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlNjaWVudGlmaWMgT3BpbmlvbiBvbiB0aGUgc3Vic3RhbnRpYXRpb24gb2YgaGVhbHRoIGNsYWltcyByZWxhdGVkIHRvIENhbWVsbGlhIHNpbmVuc2lzIChMLikgS3VudHplICh0ZWEpLCBpbmNsdWRpbmcgY2F0ZWNoaW5zIGluIGdyZWVuIHRlYSBhbmQgdGFubmlucyBpbiBibGFjayB0ZWEsIGFuZCBwcm90ZWN0aW9uIG9mIEROQSwgcHJvdGVpbnMgYW5kIGxpcGlkcyBmcm9tIG94aWRhdGl2ZSBkYW1hZ2UgKElEIDExMDMsIDEyNzYsIDEzMTEsIDE3MDgsIDI2NjQpLCByZWR1Y3Rpb24gb2YgYWNpZCBwcm9kdWN0aW9uIGluIGRlbnRhbCBwbGFxdWUgKElEIDExMDUsIDExMTEpLCBtYWludGVuYW5jZSBvZiBib25lIChJRCAxMTA5KSwgZGVjcmVhc2luZyBwb3RlbnRpYWxseSBwYXRob2dlbmljIGludGVzdGluYWwgbWljcm9vcmdhbmlzbXMgKElEIDExMTYpLCBtYWludGVuYW5jZSBvZiB2aXNpb24gKElEIDEyODApLCBtYWludGVuYW5jZSBvZiBub3JtYWwgYmxvb2QgcHJlc3N1cmUgKElEIDE1NDYpIGFuZCBtYWludGVuYW5jZSBvZiBub3JtYWwgYmxvb2QgY2hvbGVzdGVyb2wgY29uY2VudHJhdGlvbnMgKElEIDExMTMsIDExMTQpIHB1cnN1YW50IHRvIEFydGljbGUgMTMoMSkgb2YgUmVndWxhdGlvbiAoRUMpIE5vIDE5MjQvMjAwNjwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5FRlNBPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEwPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNTUiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5FRlNBIEpvdXJuYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+ODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8aXNzdWU+MTA8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNzkxPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5TY2llbnRpZmljIE9waW5pb24gb24gdGhlIHN1YnN0YW50aWF0aW9uIG9mIGhlYWx0aCBjbGFpbXMgcmVsYXRlZCB0byBDYW1lbGxpYSBzaW5lbnNpcyAoTC4pIEt1bnR6ZSAodGVhKSwgaW5jbHVkaW5nIGNhdGVjaGlucyBmcm9tIGdyZWVuIHRlYSwgYW5kIGNvbnRyaWJ1dGlvbiB0byB0aGUgbWFpbnRlbmFuY2Ugb3IgYWNoaWV2ZW1lbnQgb2YgYSBub3JtYWwgYm9keSB3ZWlnaHQgKElEIDExMDcsIDExMTIsIDE1NDQsIDI3MTYpLCBpbmNyZWFzZWQgYmV0YeKAkG94aWRhdGlvbiBvZiBmYXR0eSBhY2lkcyBsZWFkaW5nIHRvIGEgcmVkdWN0aW9uIGluIGJvZHkgZmF0IG1hc3MgKElEIDExMjMsIDExMjQsIDM2OTgpLCBhbmQgbWFpbnRlbmFuY2Ugb2Ygbm9ybWFsIGJsb29kIGdsdWNvc2UgY29uY2VudHJhdGlvbnMgKElEIDExMTUsIDE1NDUpIHB1cnN1YW50IHRvIEFydGljbGUgMTMoMSkgb2YgUmVndWxhdGlvbiAoRUMpIE5vIDE5MjQvMjAwNjwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5FRlNBPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEwPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNTYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5FRlNBIEpvdXJuYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+OTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8aXNzdWU+NDwvaXNzdWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjIwNTU8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlNjaWVudGlmaWMgT3BpbmlvbiBvbiB0aGUgc3Vic3RhbnRpYXRpb24gb2YgaGVhbHRoIGNsYWltcyByZWxhdGVkIHRvIENhbWVsbGlhIHNpbmVuc2lzIChMLikgS3VudHplICh0ZWEpLCBpbmNsdWRpbmcgY2F0ZWNoaW5zIGluIGdyZWVuIHRlYSwgYW5kIGltcHJvdmVtZW50IG9mIGVuZG90aGVsaXVt4oCQZGVwZW5kZW50IHZhc29kaWxhdGlvbiAoSUQgMTEwNiwgMTMxMCksIG1haW50ZW5hbmNlIG9mIG5vcm1hbCBibG9vZCBwcmVzc3VyZSAoSUQgMTMxMCwgMjY1NyksIG1haW50ZW5hbmNlIG9mIG5vcm1hbCBibG9vZCBnbHVjb3NlIGNvbmNlbnRyYXRpb25zIChJRCAxMTA4KSwgbWFpbnRlbmFuY2Ugb2Ygbm9ybWFsIGJsb29kIExETCBjaG9sZXN0ZXJvbCBjb25jZW50cmF0aW9ucyAoSUQgMjY0MCksIHByb3RlY3Rpb24gb2YgdGhlIHNraW4gZnJvbSBVVuKAkGluZHVjZWQgKGluY2x1ZGluZyBwaG90b+KAkG94aWRhdGl2ZSkgZGFtYWdlIChJRCAxMTEwLCAxMTE5KSwgcHJvdGVjdGlvbiBvZiBETkEgZnJvbSBveGlkYXRpdmUgZGFtYWdlIChJRCAxMTIwLCAxMTIxKSwgcHJvdGVjdGlvbiBvZiBsaXBpZHMgZnJvbSBveGlkYXRpdmUgZGFtYWdlIChJRCAxMjc1KSwgY29udHJpYnV0aW9uIHRvIG5vcm1hbCBjb2duaXRpdmUgZnVuY3Rpb24gKElEIDExMTcsIDI4MTIpLCDigJxjYXJkaW92YXNjdWxhciBzeXN0ZW3igJ0gKElEIDI4MTQpLCDigJxpbnZpZ29yYXRpb24gb2YgdGhlIGJvZHnigJ0gKElEIDEyNzQsIDMyODApLCBkZWNyZWFzaW5nIHBvdGVudGlhbGx5IHBhdGhvZ2VuaWMgZ2FzdHJv4oCQaW50ZXN0aW5hbCBtaWNyb29yZ2FuaXNtcyAoSUQgMTExOCksIOKAnGltbXVuZSBoZWFsdGjigJ0gKElEIDEyNzMpIGFuZCDigJxtb3V0aOKAnSAoSUQgMjgxMykgcHVyc3VhbnQgdG8gQXJ0aWNsZSAxMygxKSBvZiBSZWd1bGF0aW9uIChFQykgTm8gMTkyNC8yMDA2PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkVGU0E8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY1NyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkVGU0EgSm91cm5hbDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT43PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxpc3N1ZT43PC9pc3N1ZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTA1MTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R3VpZGFuY2Ugb2YgdGhlIFNjaWVudGlmaWMgQ29tbWl0dGVlIG9uIHRyYW5zcGFyZW5jeSBpbiB0aGUgc2NpZW50aWZpYyBhc3BlY3RzIG9mIHJpc2sgYXNzZXNzbWVudHMgY2FycmllZCBvdXQgYnkgRUZTQS4gUGFydCAyOiBnZW5lcmFsIHByaW5jaXBsZXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+RUZTQSBTY2llbnRpZmljIENvbW1pdHRlZTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwOTwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjU4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RUZTQSBKb3VybmFsPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGlzc3VlPjk8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMjQ5PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5HdWlkYW5jZSBvbiBzYWZldHkgYXNzZXNzbWVudCBvZiBib3RhbmljYWxzIGFuZCBib3RhbmljYWwgcHJlcGFyYXRpb25zIGludGVuZGVkIGZvciB1c2UgYXMgaW5ncmVkaWVudHMgaW4gZm9vZCBzdXBwbGVtZW50cywgb24gcmVxdWVzdCBvZiBFRlNBPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkVGU0EgU2NpZW50aWZpYyBDb21taXR0ZWU8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDk8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY1OSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkV1cm9wZWFuIEpvdXJuYWwgb2YgTnV0cml0aW9uPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjUyPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI4MTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+U2ltdWx0YW5lb3VzIGluZ2VzdGlvbiBvZiBkaWV0YXJ5IHByb3RlaW5zIHJlZHVjZXMgdGhlIGJpb2F2YWlsYWJpbGl0eSBvZiBnYWxsb3lsYXRlZCBjYXRlY2hpbnMgZnJvbSBncmVlbiB0ZWEgaW4gaHVtYW5zPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkVnZXJ0PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMDcvczAwMzk0LTAxMi0wMzMwLTg8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNjAiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5GcmVlIFJhZGljYWwgQmlvbG9neSBhbmQgTWVkaWNpbmU8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MzM8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTY5MzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+VXB0YWtlIGFuZCBtZXRhYm9saXNtIG9mIGVwaWNhdGVjaGluIGFuZCBpdHMgYWNjZXNzIHRvIHRoZSBicmFpbiBhZnRlciBvcmFsIGluZ2VzdGlvbjwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5FbCBNb2hzZW48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9TMDg5MS01ODQ5KDAyKTAxMTM3LTE8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNjEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Gb29kIENoZW1pc3RyeTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMzQ8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjI2ODwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+QW5hbHlzaXMgb2Ygc29tZSBzZWxlY3RlZCBjYXRlY2hpbnMgYW5kIGNhZmZlaW5lIGluIGdyZWVuIHRlYSBieSBoaWdoIHBlcmZvcm1hbmNlIGxpcXVpZCBjaHJvbWF0b2dyYXBoeTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5FbOKAkFNoYWhhd2k8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZvb2RjaGVtLjIwMTIuMDMuMDM5PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjYyIj4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5FTUEgKEV1cm9wZWFuIE1lZGljaW5lcyBBZ2VuY3kpLCAyMDEzYS4gQ29tbWl0dGVlIG9uIEhlcmJhbCBNZWRpY2luYWwgUHJvZHVjdHMuIEFzc2Vzc21lbnQgcmVwb3J0IG9uIENhbWVsbGlhIHNpbmVuc2lzIChMLikgS3VudHplLCBub24gZmVybWVudGF0dW0gZm9saXVtLiBBdmFpbGFibGUgb25saW5lOiBodHRwOi8vd3d3LmVtYS5ldXJvcGEuZXUvZG9jcy9lbl9HQi9kb2N1bWVudF9saWJyYXJ5L0hlcmJhbF8tX0hNUENfYXNzZXNzbWVudF9yZXBvcnQvMjAxMy8wNC9XQzUwMDE0MjI0OC5wZGY8L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNjMiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPkVNQSAoRXVyb3BlYW4gTWVkaWNpbmVzIEFnZW5jeSksIDIwMTNiLiBDb21taXR0ZWUgb24gSGVyYmFsIE1lZGljaW5hbCBQcm9kdWN0cy4gQ29tbXVuaXR5IGhlcmJhbCBtb25vZ3JhcGggb24gQ2FtZWxsaWEgc2luZW5zaXMgKEwuKSBLdW50emUsIG5vbiBmZXJtZW50YXR1bSBmb2xpdW0uIEF2YWlsYWJsZSBvbmxpbmU6IGh0dHA6Ly93d3cuZW1hLmV1cm9wYS5ldS9kb2NzL2VuX0dCL2RvY3VtZW50X2xpYnJhcnkvSGVyYmFsXy1fQ29tbXVuaXR5X2hlcmJhbF9tb25vZ3JhcGgvMjAxMy8wNC9XQzUwMDE0MjI1MC5wZGY8L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNjQiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIFRveGljb2xvZ2ljIFBhdGhvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yNzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNjM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkdyZWVuIHRlYSBleHRyYWN04oCQaW5kdWNlZCBhY3V0ZSBoZXBhdG90b3hpY2l0eSBpbiByYXRzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkVtb3RvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEyOTMvdG94LjIwMTQtMDAwNzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY2NSI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+RXJoYXJkdCBXLCAyMDA4LiDigJxEZXIgZ3Jvw59lIFphbmRlci4gRW56eWtsb3DDpGRpZSBkZXIgUGZsYW56ZW5uYW1lbi4gQmFuZCAyLiBBcnRlbiB1bmQgU29ydGVuLuKAnSBTdHV0dGdhcnQuIFZlcmxhZyBFdWdlbiBVbG1lciBLRywgR2VybWFueS48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNjYiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPkVTQ08gKEVGU0EgU2NpZW50aWZpYyBDb29wZXJhdGlvbiksIDIwMDkuIFRoZSBFRlNBIFNjaWVudGlmaWMgQ29vcGVyYXRpb24gV29ya2luZyBHcm91cCBvbiBCb3RhbmljYWxzIGFuZCBCb3RhbmljYWwgUHJlcGFyYXRpb25zLiBBdmFpbGFibGUgb25saW5lOiBodHRwczovL3d3dy5lZnNhLmV1cm9wYS5ldS9lbi9zdXBwb3J0aW5nL3B1Yi9ybi0yODA8L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNjciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Gb29kIENoZW1pc3RyeTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xOTY8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzQ3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5EaWZmZXJlbnRpYWwgYmVoYXZpb3JzIG9mIHRlYSBjYXRlY2hpbnMgdW5kZXIgdGhlcm1hbCBwcm9jZXNzaW5nOiBmb3JtYXRpb24gb2Ygbm9u4oCQZW56eW1hdGljIG9saWdvbWVyczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5GYW48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZvb2RjaGVtLjIwMTUuMDkuMDU2PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjY4Ij4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5HdWlkYW5jZSBmb3IgSW5kdXN0cnkgRHJ1Z+KAkEluZHVjZWQgTGl2ZXIgSW5qdXJ5OiBQcmVtYXJrZXRpbmcgQ2xpbmljYWwgRXZhbHVhdGlvbi4gVS5TLiBEZXBhcnRtZW50IG9mIEhlYWx0aCBhbmQgSHVtYW4gU2VydmljZXMgRm9vZCBhbmQgRHJ1ZyBBZG1pbmlzdHJhdGlvbiBDZW50ZXIgZm9yIERydWcgRXZhbHVhdGlvbiBhbmQgUmVzZWFyY2ggKENERVIpIENlbnRlciBmb3IgQmlvbG9naWNzIEV2YWx1YXRpb24gYW5kIFJlc2VhcmNoIChDQkVSKS4gSnVseSAyMDA5LiBEcnVnIFNhZmV0eS4gQXZhaWxhYmxlIG9ubGluZTogaHR0cHM6Ly93d3cuZmRhLmdvdi9kb3dubG9hZHMvR3VpZGFuY2VzL1VDTTE3NDA5MC5wZGY8L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNjkiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5GcmVlIFJhZGljYWwgQmlvbG9neSBhbmQgTWVkaWNpbmU8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NDM8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NDc0PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BIGNhc2Ugb2YgaGVwYXRvdG94aWNpdHkgY2F1c2VkIGJ5IGdyZWVuIHRlYTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5GZWRlcmljbzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwNzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2ouZnJlZXJhZGJpb21lZC4yMDA3LjA1LjAxMDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY3MCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkN1cnJlbnQgRHJ1ZyBNZXRhYm9saXNtPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NzU1PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5NZXRhYm9saXNtIG9mIGdyZWVuIHRlYSBjYXRlY2hpbnM6IGFuIG92ZXJ2aWV3PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkZlbmc8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMjE3NC8xMzg5MjAwMDY3Nzg1MjA1NTI8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNzEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5UaGUgQW1lcmljYW4gSm91cm5hbCBvZiBHYXN0cm9lbnRlcm9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjEwNTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNTYxPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5IZXBhdG90b3hpY2l0eSBkdWUgdG8gaHlkcm94eWN1dDogYSBjYXNlIHNlcmllczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Gb25nPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEwPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMzgvYWpnLjIwMTAuNTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY3MiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkdhc3Ryb2VudGVyb2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTQ2PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjkxNDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+UGF0aG9nZW5lc2lzIG9mIGlkaW9zeW5jcmF0aWMgZHJ1Z+KAkGluZHVjZWQgbGl2ZXIgaW5qdXJ5IGFuZCBjbGluaWNhbCBwZXJzcGVjdGl2ZXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Rm9udGFuYTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDUzL2ouZ2FzdHJvLjIwMTMuMTIuMDMyPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjczIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+VGhlIEpvdXJuYWwgb2YgTnV0cml0aW9uPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjEzOTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT41ODwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RGFpbHkgY29uc3VtcHRpb24gb2YgYW4gYXF1ZW91cyBncmVlbiB0ZWEgZXh0cmFjdCBzdXBwbGVtZW50IGRvZXMgbm90IGltcGFpciBsaXZlciBmdW5jdGlvbiBvciBhbHRlciBjYXJkaW92YXNjdWxhciBkaXNlYXNlIHJpc2sgYmlvbWFya2VycyBpbiBoZWFsdGh5IG1lbjwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5GcmFuazwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwODwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4zOTQ1L2puLjEwOC4wOTY0MTI8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNzQiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTExMS9qLjE3NTAtMzg0MS4yMDA4LjAxMDMzLng8L2RvaT4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5GcmllZG1hbiBNLCBMZXZpbiBDRSwgTGVlIFNVIGFuZCBLb3p1a3VlIE4sIDIwMDkuIFN0YWJpbGl0eSBvZiBncmVlbiB0ZWEgY2F0ZWNoaW5zIGluIGNvbW1lcmNpYWwgdGVhIGxlYXZlcyBkdXJpbmcgc3RvcmFnZSBmb3IgNiBtb250aHMuIEpvdXJuYWwgb2YgRm9vZCBTY2llbmNlLCA3NCwgSDQ34oCQNTEuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjc1Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBGdW5jdGlvbmFsIEZvb2RzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NDg8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdHMgb2YgZ3JlZW4gdGVhIGNhdGVjaGlucyBvbiBub25hbGNvaG9saWMgc3RlYXRvaGVwYXRpdGlzIChOQVNIKSBwYXRpZW50czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5GdWt1emF3YTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2ouamZmLjIwMTQuMDQuMDEwPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjc2Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+QnJpdGlzaCBKb3VybmFsIG9mIE51dHJpdGlvbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMDk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjE5OTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q29tcGFyaXNvbiBvZiBjYXRlY2hpbiBwcm9maWxlcyBpbiBodW1hbiBwbGFzbWEgYW5kIHVyaW5lIGFmdGVyIHNpbmdsZSBkb3NpbmcgYW5kIHJlZ3VsYXIgaW50YWtlIG9mIGdyZWVuIHRlYSAoQ2FtZWxsaWEgc2luZW5zaXMpPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkZ1bmc8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTM8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNy9TMDAwNzExNDUxMjAwNDM3MDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY3NyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZyZWUgUmFkaWNhbCBCaW9sb2d5IGFuZCBNZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40MDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT41NzA8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkNlbGx1bGFyIGFuZCBpbsKgdml2byBoZXBhdG90b3hpY2l0eSBjYXVzZWQgYnkgZ3JlZW4gdGVhIHBoZW5vbGljIGFjaWRzIGFuZCBjYXRlY2hpbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+R2FsYXRpPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA2PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mcmVlcmFkYmlvbWVkLjIwMDUuMDkuMDE0PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjc4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+UGh5dG9tZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yMDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMTg2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5JcyBncmVlbiB0ZWEgYSBwb3RlbnRpYWwgdHJpZ2dlciBmb3IgYXV0b2ltbXVuZSBoZXBhdGl0aXM/PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkdhbGxvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5waHltZWQuMjAxMy4wNy4wMDQ8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmNzkiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5HeW5lY29sb2dpYyBPbmNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMzI8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+Mzc3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5SZXN1bHRzIG9mIGEgcGhhc2UgSUkgcmFuZG9taXplZCwgZG91Ymxl4oCQYmxpbmQsIHBsYWNlYm/igJBjb250cm9sbGVkIHRyaWFsIG9mIFBvbHlwaGVub24gRSBpbiB3b21lbiB3aXRoIHBlcnNpc3RlbnQgaGlnaOKAkHJpc2sgSFBWIGluZmVjdGlvbiBhbmQgbG934oCQZ3JhZGUgY2VydmljYWwgaW50cmFlcGl0aGVsaWFsIG5lb3BsYXNpYTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5HYXJjaWE8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTQ8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLnlneW5vLjIwMTMuMTIuMDM0PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjgwIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+UmV2aXN0YSBFc3Bhbm9sYSBkZSBFbmZlcm1lZGFkZXMgRGlnZXN0aXZhczwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMDA8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+Njg4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5MaXZlciBpbmp1cnkgaW5kdWNlZCBieeKAnSBuYXR1cmFsIHJlbWVkaWVz4oCdOiBhbiBhbmFseXNpcyBvZiBjYXNlcyBzdWJtaXR0ZWQgdG8gdGhlIFNwYW5pc2ggTGl2ZXIgVG94aWNpdHkgUmVnaXN0cnk8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+R2FyY8OtYeKAkENvcnTDqXM8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDg8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4MSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkNhbmFkaWFuIE1lZGljYWwgQXNzb2NpYXRpb24gSm91cm5hbDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xNzI8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzY3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5MaXZlciBlbnp5bWUgYWx0ZXJhdGlvbjogYSBndWlkZSBmb3IgY2xpbmljaWFuczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5HaWFubmluaTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwNTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xNTAzL2NtYWouMTA0MDc1MjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4MiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkV1cm9wZWFuIEpvdXJuYWwgb2YgR2FzdHJvZW50ZXJvbG9neSBhbmQgSGVwYXRvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xNzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMTM1PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5GdWxtaW5hbnQgaGVwYXRpdGlzIGR1cmluZyBzZWxm4oCQbWVkaWNhdGlvbiB3aXRoIGh5ZHJvYWxjb2hvbGljIGV4dHJhY3Qgb2YgZ3JlZW4gdGVhPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkdsb3JvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwOTcvMDAwNDI3MzctMjAwNTEwMDAwLTAwMDIxPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjgzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+UHJldmVudGl2ZSBNZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yMTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMzQ8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkdyZWVuIHRlYSBjb21wb3NpdGlvbiwgY29uc3VtcHRpb24sIGFuZCBwb2x5cGhlbm9sIGNoZW1pc3RyeTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5HcmFoYW08L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjE5OTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi8wMDkxLTc0MzUoOTIpOTAwNDEtRjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4NCI+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQwODwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5HcnVlbndhbGQ8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZV90aXRsZT5QRFIgZm9yIEhlcmJhbCBNZWRpY2luZXM8L3ZvbHVtZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDQ8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4NSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPlRoZSBKb3VybmFsIG9mIE51dHJpdGlvbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMzM8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzMwM1M8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdCBvZiBpbmNyZWFzZWQgdGVhIGNvbnN1bXB0aW9uIG9uIG94aWRhdGl2ZSBETkEgZGFtYWdlIGFtb25nIHNtb2tlcnM6IGEgcmFuZG9taXplZCBjb250cm9sbGVkIHN0dWR5PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkhha2ltPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDAzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwOTMvam4vMTMzLjEwLjMzMDNTPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjg2Ij4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5IYW5lbHQ8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZV90aXRsZT5NYW5zZmVsZCdzIGVuY3ljbG9wZWRpYSBvZiBhZ3JpY3VsdHVyYWwgYW5kIGhvcnRpY3VsdHVyYWwgY3JvcHMgKGV4Y2VwdCBvcm5hbWVudGFscyk8L3ZvbHVtZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwNy85NzgtMy01NDAtMzA0NDItNTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4NyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE0Mzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yNzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+SW50ZXJhY3Rpb25zIGJldHdlZW4gdGVhIGNhdGVjaGlucyBhbmQgY2FzZWluIG1pY2VsbGVzIGFuZCB0aGVpciBpbXBhY3Qgb24gcmVubmV0aW5nIGZ1bmN0aW9uYWxpdHk8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+SGFyYXRpZmFyPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mb29kY2hlbS4yMDEzLjA3LjA5MjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4OCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjEwMTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMTc4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FZmZlY3RzIG9mIHRlYSBwb2x5cGhlbm9scyBvbiB0aGUgYWN0aXZpdGllcyBvZiDOseKAkGFteWxhc2UsIHBlcHNpbiwgdHJ5cHNpbiBhbmQgbGlwYXNlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkhlPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mb29kY2hlbS4yMDA2LjAzLjAyMDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY4OSI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+SGVhbHRoIENhbmFkYSAsIDIwMTdhLiBTdW1tYXJ5IFNhZmV0eSBSZXZpZXcg4oCQIGdyZWVuIHRlYSBleHRyYWN04oCQY29udGFpbmluZyBuYXR1cmFsIGhlYWx0aCBwcm9kdWN0cyDigJAgQXNzZXNzaW5nIHRoZSBwb3RlbnRpYWwgcmlzayBvZiBsaXZlciBpbmp1cnkgKGhlcGF0b3RveGljaXR5KS4gTm92ZW1iZXIgMTUsIDIwMTcsIHVwZGF0ZTogRGVjZW1iZXIgMTIsIDIwMTcgQXZhaWxhYmxlIG9ubGluZTogaHR0cHM6Ly93d3cuY2FuYWRhLmNhL2VuL2hlYWx0aC1jYW5hZGEvc2VydmljZXMvZHJ1Z3MtaGVhbHRoLXByb2R1Y3RzL21lZGVmZmVjdC1jYW5hZGEvc2FmZXR5LXJldmlld3MvZ3JlZW4tdGVhLWV4dHJhY3QtY29udGFpbmluZy1uYXR1cmFsLWhlYWx0aC1wcm9kdWN0cy1hc3Nlc3NpbmctcG90ZW50aWFsLXJpc2stbGl2ZXItaW5qdXJ5Lmh0bWw8L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmOTAiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPkhlYWx0aCBDYW5hZGEgLCAyMDE3Yi4gTmF0dXJhbCBoZWFsdGggcHJvZHVjdHMg4oCQIGdyZWVuIHRlYSBleHRyYWN0cy4gQXZhaWxhYmxlIG9ubGluZTogaHR0cDovL3dlYnByb2QuaGMtc2MuZ2MuY2EvbmhwaWQtYmRpcHNuL2F0UmVxLmRvP2F0aWQ9Z3JlZW50ZWFfdGhldmVydCZhbXA7bGFuZz1lbmcgW0FjY2Vzc2VkIE5vdmVtYmVyIDE1LCAyMDE3XTwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY5MSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPk51dHJpdGlvbiBhbmQgQ2FuY2VyPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQ1PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjIyNjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q2F0ZWNoaW4gY29udGVudCBvZiAxOCB0ZWFzIGFuZCBhIGdyZWVuIHRlYSBleHRyYWN0IHN1cHBsZW1lbnQgY29ycmVsYXRlcyB3aXRoIHRoZSBhbnRpb3hpZGFudCBjYXBhY2l0eTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5IZW5uaW5nPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDAzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEyMDcvUzE1MzI3OTE0TkM0NTAyXzEzPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjkyIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiB0aGUgQW1lcmljYW4gQ29sbGVnZSBvZiBOdXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MjY8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+Mzk2UzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q2FuIEVHQ0cgcmVkdWNlIGFiZG9taW5hbCBmYXQgaW4gb2Jlc2Ugc3ViamVjdHM/PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkhpbGw8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDc8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTA4MC8wNzMxNTcyNC4yMDA3LjEwNzE5NjI4PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjkzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Q2xpbmljYWwgTnV0cml0aW9uPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjI3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjM2MzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RWZmZWN0IG9mIGdyZWVuIHRlYSBleHRyYWN0IG9uIG9iZXNlIHdvbWVuOiBhIHJhbmRvbWl6ZWQsIGRvdWJsZeKAkGJsaW5kLCBwbGFjZWJv4oCQY29udHJvbGxlZCBjbGluaWNhbCB0cmlhbDwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Ic3U8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDg8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmNsbnUuMjAwOC4wMy4wMDc8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmOTQiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5BbHRlcm5hdGl2ZSBNZWRpY2luZSBSZXZpZXc8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTY8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTU3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5Eb2VzIHN1cHBsZW1lbnRhdGlvbiB3aXRoIGdyZWVuIHRlYSBleHRyYWN0IGltcHJvdmUgaW5zdWxpbiByZXNpc3RhbmNlIGluIG9iZXNlIHR5cGUgMiBkaWFiZXRpY3M/IEEgcmFuZG9taXplZCwgZG91Ymxl4oCQYmxpbmQsIGFuZCBwbGFjZWJvY29udHJvbGxlZCBjbGluaWNhbCB0cmlhbDwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Ic3U8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY5NSI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+SUFSQyAoV29ya2luZyBHcm91cCBvbiB0aGUgRXZhbHVhdGlvbiBvZiBDYXJjaW5vZ2VuaWMgUmlza3MgdG8gSHVtYW5zLCAmYW1wOyBJbnRlcm5hdGlvbmFsIEFnZW5jeSBmb3IgUmVzZWFyY2ggb24gQ2FuY2VyKSwgMTk5MS4gQ29mZmVlLCB0ZWEsIG1hdGUsIG1ldGh5bHhhbnRoaW5lcyBhbmQgbWV0aHlsZ2x5b3hhbChWb2wuIDUxKS4gV29ybGQgSGVhbHRoIE9yZ2FuaXphdGlvbi48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmOTYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5DYW5jZXIgRXBpZGVtaW9sb2d5IGFuZCBQcmV2ZW50aW9uIEJpb21hcmtlcnM8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTc0NjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RWZmZWN0IG9mIGNvZmZlZSBhbmQgZ3JlZW4gdGVhIGNvbnN1bXB0aW9uIG9uIHRoZSByaXNrIG9mIGxpdmVyIGNhbmNlcjogY29ob3J0IGFuYWx5c2lzIGJ5IGhlcGF0aXRpcyB2aXJ1cyBpbmZlY3Rpb24gc3RhdHVzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPklub3VlPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA5PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjExNTgvMTA1NS05OTY1LkVQSS0wOC0wOTIzPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjk3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40NDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT42MjY8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlNhZmV0eSBzdHVkaWVzIG9uIGVwaWdhbGxvY2F0ZWNoaW4gZ2FsbGF0ZSAoRUdDRykgcHJlcGFyYXRpb25zLiBQYXJ0IDE6IGdlbm90b3hpY2l0eTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Jc2JydWNrZXI8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZjdC4yMDA1LjA3LjAwNTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWY5OCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkNoZW1pY2FsIGFuZCBQaGFybWFjZXV0aWNhbCBCdWxsZXRpbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT42Mjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT41NTI8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlByb3BlcnRpZXMgb2YgcHJlY2lwaXRhdGUgb2YgY3JlYW1pbmcgZG93biBieSAo4oiSKeKAkGVwaWdhbGxvY2F0ZWNoaW7igJAz4oCQT+KAkGdhbGxhdGUgYW5kIGNhZmZlaW5lPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPklzaGl6dTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMjQ4L2NwYi5jMTQtMDAwNDU8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmOTkiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5DaGVtaWNhbCBhbmQgUGhhcm1hY2V1dGljYWwgQnVsbGV0aW48L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NjQ8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+Njc2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5NZWNoYW5pc20gb2YgY3JlYW1pbmcgZG93biBiYXNlZCBvbiBjaGVtaWNhbCBjaGFyYWN0ZXJpemF0aW9uIG9mIGEgY29tcGxleCBvZiBjYWZmZWluZSBhbmQgdGVhIGNhdGVjaGluczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Jc2hpenU8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTI0OC9jcGIuYzE2LTAwMTMxPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEwMCI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+SVNPICwgSU5URVJOQVRJT05BTCBTVEFOREFSRCAxMTI4NywgMjAxMS4gR3JlZW4gdGVhIOKAkCBEZWZpbml0aW9uIGFuZCBiYXNpYyByZXF1aXJlbWVudHMuIFRow6kgdmVydCDigJAgRMOpZmluaXRpb24gZXQgY2FyYWN0w6lyaXN0aXF1ZXMgZGUgYmFzZS48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTAxIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RXVyb3BlYW4gam91cm5hbCBvZiBjbGluaWNhbCBudXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NzA8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTIyMTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TGl2ZXLigJByZWxhdGVkIHNhZmV0eSBhc3Nlc3NtZW50IG9mIGdyZWVuIHRlYSBleHRyYWN0cyBpbiBodW1hbnM6IGEgc3lzdGVtYXRpYyByZXZpZXcgb2YgcmFuZG9taXplZCBjb250cm9sbGVkIHRyaWFsczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Jc29tdXJhPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE2PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMzgvZWpjbi4yMDE2Ljc4PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEwMiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgYW5kIENoZW1pY2FsIFRveGljb2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NzY8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTAzPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5EaWV0YXJ5IHByZXRyZWF0bWVudCB3aXRoIGdyZWVuIHRlYSBwb2x5cGhlbm9sLCjiiJIp4oCQZXBpZ2FsbG9jYXRlY2hpbuKAkDPigJBnYWxsYXRlIHJlZHVjZXMgdGhlIGJpb2F2YWlsYWJpbGl0eSBhbmQgaGVwYXRvdG94aWNpdHkgb2Ygc3Vic2VxdWVudCBvcmFsIGJvbHVzIGRvc2VzIG9mICjiiJIp4oCQZXBpZ2FsbG9jYXRlY2hpbuKAkDPigJBnYWxsYXRlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkphbWVzPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mY3QuMjAxNC4xMi4wMDk8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTAzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+SkNSOiBKb3VybmFsIG9mIENsaW5pY2FsIFJoZXVtYXRvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yMDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMTA8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdHMgb2YgZ3JlZW4gdGVhIGV4dHJhY3Qgb24gc2VydW0gdXJpYyBhY2lkIGFuZCB1cmF0ZSBjbGVhcmFuY2UgaW4gaGVhbHRoeSBpbmRpdmlkdWFsczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5KYXR1d29yYXBydWs8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTQ8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMDQiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIEhlcGF0b2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NDU8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzM0PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5IZXBhdG90b3hpY2l0eSBkdWUgdG8gZXh0cmFjdHMgb2YgQ2hpbmVzZSBncmVlbiB0ZWEgKENhbWVsbGlhIHNpbmVuc2lzKTogYSBncm93aW5nIGNvbmNlcm48L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+SmF2YWlkPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA2PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5qaGVwLjIwMDYuMDUuMDA1PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEwNSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgQ2hyb21hdG9ncmFwaHkgQTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMzk1PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE2MDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TXVsdGlyZXNpZHVlIHBlc3RpY2lkZSBhbmFseXNpcyBpbiBudXRyYWNldXRpY2FscyBmcm9tIGdyZWVuIHRlYSBleHRyYWN0cyBieSBjb21wcmVoZW5zaXZlIHR3b+KAkGRpbWVuc2lvbmFsIGdhcyBjaHJvbWF0b2dyYXBoeSB3aXRoIHRpbWXigJBvZuKAkGZsaWdodCBtYXNzIHNwZWN0cm9tZXRyeTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5KaWE8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmNocm9tYS4yMDE1LjAzLjA3MTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMDYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIEhlcGF0b2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NDQ8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NjE2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BY3V0ZSBoZXBhdGl0aXMgYXNzb2NpYXRlZCB3aXRoIHRoZSB1c2Ugb2YgZ3JlZW4gdGVhIGluZnVzaW9uczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5KaW1lbmV64oCQU2Flbno8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmpoZXAuMjAwNS4xMS4wNDE8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTA3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Q2FuY2VyIFByZXZlbnRpb24gUmVzZWFyY2g8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+ODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMTMxPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5QaGFzZSBJYiByYW5kb21pemVkLCBkb3VibGXigJBibGluZGVkLCBwbGFjZWJv4oCQY29udHJvbGxlZCwgZG9zZSBlc2NhbGF0aW9uIHN0dWR5IG9mIHBvbHlwaGVub24gRSBpbiBwYXRpZW50cyB3aXRoIEJhcnJldHQncyBlc29waGFndXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Sm9lPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjExNTgvMTk0MC02MjA3LkNBUFItMTQtMDI3NC1UPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEwOCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPlRveGljb2xvZ2ljYWwgU2NpZW5jZXM8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NDg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NTc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlN1YmNocm9uaWMgb3JhbCB0b3hpY2l0eSBvZiBncmVlbiB0ZWEgcG9seXBoZW5vbHMgaW4gcmF0cyBhbmQgZG9nczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Kb2huc29uPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4xOTk5PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTA5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RXNzaWFjLiBDYW5hZGlhbiBNZWRpY2FsIEFzc29jaWF0aW9uIEpvdXJuYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTU4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjg5NzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+VW5jb252ZW50aW9uYWwgdGhlcmFwaWVzIGZvciBjYW5jZXI6IDE8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+S2FlZ2k8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjE5OTg8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMTAiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Gb29kIENoZW1pc3RyeTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTA0NjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TWlsayDOsuKAkGxhY3RvZ2xvYnVsaW4gY29tcGxleGVzIHdpdGggdGVhIHBvbHlwaGVub2xzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkthbmFraXM8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZvb2RjaGVtLjIwMTEuMDEuMDc5PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjExMSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPlRveGljb2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MjYwPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FeHBvc3VyZSBhbmQgdG94aWNpdHkgb2YgZ3JlZW4gdGVhIHBvbHlwaGVub2xzIGluIGZhc3RlZCBhbmQgbm9u4oCQZmFzdGVkIGRvZ3M8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+S2FwZXRhbm92aWM8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDk8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLnRveC4yMDA5LjAzLjAwNzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMTIiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Qcm9ncmVzcyBpbiBNZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yNDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMzU4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5Cb2R5IGZhdCByZWR1Y3Rpb24gYnkgdGhlIGxvbmcgdGVybSBpbnRha2Ugb2YgY2F0ZWNoaW5zIGFuZCB0aGUgZWZmZWN0cyBvZiBwaHlzaWNhbCBhY3Rpdml0eTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5LYXRhb2thPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTEzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBBZ3JpY3VsdHVyYWwgYW5kIEZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjUwPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjU2NTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+VG90YWwgcGhlbm9sLCBjYXRlY2hpbiwgYW5kIGNhZmZlaW5lIGNvbnRlbnRzIG9mIHRlYXMgY29tbW9ubHkgY29uc3VtZWQgaW4gdGhlIFVuaXRlZCBLaW5nZG9tPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPktob2toYXI8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAyMS9qZjAxMDE1M2w8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTE0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Q2FuY2VyIExldHRlcnM8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTE0PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE3MTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+QSBSUOKAkEhQTEMgbWV0aG9kIGZvciB0aGUgZGV0ZXJtaW5hdGlvbiBvZiB0ZWEgY2F0ZWNoaW5zPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPktob2toYXI8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjE5OTc8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9TMDMwNC0zODM1KDk3KTA0NjUzLTM8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTE1Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBBZ3JpY3VsdHVyYWwgYW5kIEZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQ4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQxNTE8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPklkZW50aWZpY2F0aW9uIG9mIGJpbGlhcnkgbWV0YWJvbGl0ZXMgb2YgKOKIkinigJBlcGlnYWxsb2NhdGVjaGluIGdhbGxhdGUgaW4gcmF0czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5LaWRhPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDAwPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMjEvamYwMDAzODZ4PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjExNiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkNpcmN1bGF0aW9uIEpvdXJuYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NzA8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTA1MjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RWZmZWN0IG9mIGdyZWVuIHRlYSBjb25zdW1wdGlvbiBvbiBlbmRvdGhlbGlhbCBmdW5jdGlvbiBhbmQgY2lyY3VsYXRpbmcgZW5kb3RoZWxpYWwgcHJvZ2VuaXRvciBjZWxscyBpbiBjaHJvbmljIHNtb2tlcnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+S2ltPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA2PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEyNTMvY2lyY2ouNzAuMTA1MjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMTciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Qcm9ncmVzcyBpbiBNZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yNTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xOTQ1PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FZmZlY3Qgb2YgaW50YWtlIG9mIGEgYmV2ZXJhZ2UgY29udGFpbmluZyA1NDAgbWcgY2F0ZWNoaW5zIG9uIHRoZSBib2R5IGNvbXBvc2l0aW9uIG9mIG9iZXNlIHdvbWVuIGFuZCBtZW48L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+S296dW1hPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTE4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT45Mjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNTA8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkV1cm9wZWFuIG1lZGljaW5hbCBhbmQgZWRpYmxlIHBsYW50cyBhc3NvY2lhdGVkIHdpdGggc3ViYWN1dGUgYW5kIGNocm9uaWMgdG94aWNpdHkgcGFydCBJOiBwbGFudHMgd2l0aCBjYXJjaW5vZ2VuaWMsIHRlcmF0b2dlbmljIGFuZCBlbmRvY3JpbmXigJBkaXNydXB0aW5nIGVmZmVjdHM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+S3Jpc3RhbmM8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZjdC4yMDE2LjA0LjAwNzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMTkiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5CaW9jaGVtaWNhbCBhbmQgQmlvcGh5c2ljYWwgUmVzZWFyY2ggQ29tbXVuaWNhdGlvbnM8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mjc3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjUwNzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RXBpY2F0ZWNoaW4gYW5kIGNhdGVjaGluIGFyZSBP4oCQbWV0aHlsYXRlZCBhbmQgZ2x1Y3Vyb25pZGF0ZWQgaW4gdGhlIHNtYWxsIGludGVzdGluZTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5LdWhubGU8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDA8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwNi9iYnJjLjIwMDAuMzcwMTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMjAiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5DYW5jZXIgUHJldmVudGlvbiBSZXNlYXJjaDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT44PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjg3OTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+UmFuZG9taXplZCwgcGxhY2Vib+KAkGNvbnRyb2xsZWQgdHJpYWwgb2YgZ3JlZW4gdGVhIGNhdGVjaGlucyBmb3IgcHJvc3RhdGUgY2FuY2VyIHByZXZlbnRpb248L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+S3VtYXI8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTE1OC8xOTQwLTYyMDcuQ0FQUi0xNC0wMzI0PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEyMSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPk1vbGVjdWxhciBQaGFybWFjZXV0aWNzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQ8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+ODE5PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5CaW90cmFuc2Zvcm1hdGlvbiBvZiBncmVlbiB0ZWEgcG9seXBoZW5vbHMgYW5kIHRoZSBiaW9sb2dpY2FsIGFjdGl2aXRpZXMgb2YgdGhvc2UgbWV0YWJvbGl0ZXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TGFtYmVydDwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwNzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDIxL21wNzAwMDc1bTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMjIiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Gb29kIGFuZCBDaGVtaWNhbCBUb3hpY29sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQ4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQwOTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+SGVwYXRvdG94aWNpdHkgb2YgaGlnaCBvcmFsIGRvc2UgKOKIkinigJBlcGlnYWxsb2NhdGVjaGlu4oCQM+KAkGdhbGxhdGUgaW4gbWljZTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5MYW1iZXJ0PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEwPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mY3QuMjAwOS4xMC4wMzA8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTI0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBBZ3JpY3VsdHVyYWwgYW5kIEZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjYwPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjEyNTMxPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5LaW5ldGljIHN0dWR5IG9mIGNhdGVjaGluIHN0YWJpbGl0eTogZWZmZWN0cyBvZiBwSCwgY29uY2VudHJhdGlvbiwgYW5kIHRlbXBlcmF0dXJlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkxpPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEyPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMjEvamYzMDQxMTZzPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEyNSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkludGVybmF0aW9uYWwgSm91cm5hbCBvZiBGb29kIFNjaWVuY2UgYW5kIFRlY2hub2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mzg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+Mzc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdCBvZiBleHRyYWN0aW9uIHRlbXBlcmF0dXJlIG9uIGNyZWFtIGFuZCBleHRyYWN0YWJpbGl0eSBvZiBibGFjayB0ZWEgW0NhbWVsbGlhIHNpbmVuc2lzIChMLikgTy4gS3VudHplXTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5MaWFuZzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwMzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDQ2L2ouMTM2NS0yNjIxLjIwMDMuMDA2MzEueDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMjYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5aZWl0c2NocmlmdCBmw7xyIExlYmVuc21pdHRlbHVudGVyc3VjaHVuZyB1bmTigJBGb3JzY2h1bmcgQTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yMDg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjE3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BbnRpb3hpZGFudCBwcm9wZXJ0aWVzIGFuZCB0b3RhbCBwaGVub2xpY3MgY29udGVudCBvZiBncmVlbiBhbmQgYmxhY2sgdGVhIHVuZGVyIGRpZmZlcmVudCBicmV3aW5nIGNvbmRpdGlvbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TGllYmVydDwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MTk5OTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDA3L3MwMDIxNzAwNTA0MDY8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTI3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBBZ3JpY3VsdHVyYWwgYW5kIEZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjUxPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE4NjQ8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkZhY3RvcnMgYWZmZWN0aW5nIHRoZSBsZXZlbHMgb2YgdGVhIHBvbHlwaGVub2xzIGFuZCBjYWZmZWluZSBpbiB0ZWEgbGVhdmVzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkxpbjwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwMzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDIxL2pmMDIxMDY2YjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMjgiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5QYW5jcmVhczwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4zNzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yNTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R3JlZW4gdGVhIGNvbnN1bXB0aW9uIGFuZCB0aGUgcmlzayBvZiBwYW5jcmVhdGljIGNhbmNlciBpbiBKYXBhbmVzZSBhZHVsdHM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TGluPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA4PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwOTcvTVBBLjBiMDEzZTMxODE2MGE1ZTI8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTI5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+UExvUyBPTkU8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+OTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT5lOTExNjM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdHMgb2YgZ3JlZW4gdGVhIGV4dHJhY3Qgb24gaW5zdWxpbiByZXNpc3RhbmNlIGFuZCBnbHVjYWdvbuKAkGxpa2UgcGVwdGlkZSAxIGluIHBhdGllbnRzIHdpdGggdHlwZSAyIGRpYWJldGVzIGFuZCBsaXBpZCBhYm5vcm1hbGl0aWVzOiBhIHJhbmRvbWl6ZWQsIGRvdWJsZeKAkGJsaW5kZWQsIGFuZCBwbGFjZWJv4oCQY29udHJvbGxlZCB0cmlhbDwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5MaXU8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTQ8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTM3MS9qb3VybmFsLnBvbmUuMDA5MTE2MzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMzAiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIFRoZSBOZXVyb2xvZ2ljYWwgU2NpZW5jZXM8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MzU4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQ2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5Qb2x5cGhlbm9uIEUsIG5vbuKAkGZ1dGlsZSBhdCBuZXVyb3Byb3RlY3Rpb24gaW4gbXVsdGlwbGUgc2NsZXJvc2lzIGJ1dCB1bnByZWRpY3RhYmx5IGhlcGF0b3RveGljOiBwaGFzZSBJIHNpbmdsZSBncm91cCBhbmQgcGhhc2UgSUkgcmFuZG9taXplZCBwbGFjZWJv4oCQY29udHJvbGxlZCBzdHVkaWVzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPkxvdmVyYTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2ouam5zLjIwMTUuMDguMDA2PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEzMSI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMTM2L2Jjci0yMDE0LTIwODUzNDwvZG9pPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPkx1Z2cgU1QsIE1lbmV6ZXMgREIgYW5kIEdvbXBlcnR6IFMsIDIwMTUuIENoaW5lc2UgZ3JlZW4gdGVhIGFuZCBhY3V0ZSBoZXBhdGl0aXM6IGEgcmFyZSB5ZXQgcmVjdXJyaW5nIHRoZW1lLiBCTUogQ2FzZSBSZXBvcnRzLCBwaWk6IGJjcjIwMTQyMDg1MzQuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEzMiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE4Nzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT40OTE8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlB5cnJvbGl6aWRpbmUgYWxrYWxvaWRzIGluIGhlcmJhbCB0ZWFzIGZvciBpbmZhbnRzLCBwcmVnbmFudCBvciBsYWN0YXRpbmcgd29tZW48L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TcOkZGdlPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mb29kY2hlbS4yMDE1LjA0LjA2NzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMzMiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5UaGUgSm91cm5hbCBvZiBudXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTM5PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI2NDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R3JlZW4gdGVhIGNhdGVjaGluIGNvbnN1bXB0aW9uIGVuaGFuY2VzIGV4ZXJjaXNl4oCQaW5kdWNlZCBhYmRvbWluYWwgZmF0IGxvc3MgaW4gb3ZlcndlaWdodCBhbmQgb2Jlc2UgYWR1bHRzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk1ha2k8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDg8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMzk0NS9qbi4xMDguMDk4MjkzPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEzNCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgQWRkaXRpdmVzIGFuZCBDb250YW1pbmFudHM6IFBhcnQgQTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4yODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT45MjU8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPk1vbml0b3Jpbmcgb2YgcG9seWN5Y2xpYyBhcm9tYXRpYyBoeWRyb2NhcmJvbnMgKFBBSCkgaW4gZm9vZCBzdXBwbGVtZW50cyBjb250YWluaW5nIGJvdGFuaWNhbHMgYW5kIG90aGVyIGluZ3JlZGllbnRzIG9uIHRoZSBEdXRjaCBtYXJrZXQ8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TWFydGVuYTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDgwLzE5NDQwMDQ5LjIwMTEuNTY5NTczPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjEzNSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgQ2hlbWlzdHJ5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE5Nzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT45MDc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPk11bHRp4oCQY2xhc3MgbWV0aG9kb2xvZ3kgdG8gZGV0ZXJtaW5lIHBlc3RpY2lkZXMgYW5kIG15Y290b3hpbnMgaW4gZ3JlZW4gdGVhIGFuZCByb3lhbCBqZWxseSBzdXBwbGVtZW50cyBieSBsaXF1aWQgY2hyb21hdG9ncmFwaHkgY291cGxlZCB0byBPcmJpdHJhcCBoaWdoIHJlc29sdXRpb24gbWFzcyBzcGVjdHJvbWV0cnk8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TWFydMOtbmV64oCQRG9tw61uZ3VlejwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNjwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2ouZm9vZGNoZW0uMjAxNS4xMS4wNzA8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTM2Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+QnJpdGlzaCBKb3VybmFsIG9mIE51dHJpdGlvbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMDA8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NDk2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BYnNvcnB0aW9uIGFuZCBwaGFybWFjb2tpbmV0aWNzIG9mIGdyZWVuIHRlYSBjYXRlY2hpbnMgaW4gYmVhZ2xlczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5NYXRh4oCQQmlsYmFvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA4PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTcvUzAwMDcxMTQ1MDc4OTg2OTI8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTM3Ij4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5NYXRzdWkgWSwgRnVrdWhhcmEgSSwgVGFrZXNoaXRhIE0sIE9zYWtpIE4gYW5kIEhpYmkgTiwgMjAxNi4gRWZmaWNhY3kgYW5kIFNhZmV0eSBvZiBQb3dkZXJlZCBCZXZlcmFnZSBDb250YWluaW5nIEdyZWVuIFRlYSBDYXRlY2hpbnMgb24gQm9keSBGYXQgaW4gT2Jlc2UgQWR1bHRzIOKAk0EgUmFuZG9taXplZCwgUGxhY2Vib+KAkGNvbnRyb2xsZWQsIERvdWJsZeKAkGJsaW5kIFBhcmFsbGVsIFN0dWR54oCTLiBKcG4gUGhhcm1hY29sIFRoZXIgdm9sLiA0NCwgbm8uIDcuIE9yaWdpbmFsIHBhcGVyIGluIEphcGFuZXNlLiBUcmFuc2xhdGlvbiB0byBFbmdsaXNoIHByb3ZpZGVkIGJ5IGludGVyZXN0ZWQgcGFydGllcyAo4oCYRG9jdW1lbnRhdGlvbiBwcm92aWRlZCB0byBFRlNB4oCZIG4uIDMpLjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxMzgiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5PYmVzaXR5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE2PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjEzMzg8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkNhdGVjaGluIHNhZmVseSBpbXByb3ZlZCBoaWdoZXIgbGV2ZWxzIG9mIGZhdG5lc3MsIGJsb29kIHByZXNzdXJlLCBhbmQgY2hvbGVzdGVyb2wgaW4gY2hpbGRyZW48L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TWF0c3V5YW1hPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA4PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMzgvb2J5LjIwMDguNjA8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTM5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RXVyb3BlYW4gSm91cm5hbCBvZiBDbGluaWNhbCBQaGFybWFjb2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NjU8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzMxPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5IZXBhdG90b3hpY2l0eSBmcm9tIGdyZWVuIHRlYTogYSByZXZpZXcgb2YgdGhlIGxpdGVyYXR1cmUgYW5kIHR3byB1bnB1Ymxpc2hlZCBjYXNlczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5NYXp6YW50aTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwOTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDA3L3MwMDIyOC0wMDgtMDYxMC03PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE0MCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkFyY2hpdmVzIG9mIFRveGljb2xvZ3k8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+ODk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTE3NTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+SGVwYXRvdG94aWNpdHkgb2YgZ3JlZW4gdGVhOiBhbiB1cGRhdGU8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TWF6emFudGk8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwNy9zMDAyMDQtMDE1LTE1MjEteDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNDEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Ub3hpY29sb2dpY2FsIFNjaWVuY2VzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQ4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjU3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5TdWJjaHJvbmljIG9yYWwgdG94aWNpdHkgb2YgZXBpZ2FsbG9jYXRlY2hpbiBnYWxsYXRlIChFR0NHKSBpbiByYXRzIGFuZCBkb2dzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk1jQ29ybWljazwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MTk5OTwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE0MiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkNhbmNlciBQcmV2ZW50aW9uIFJlc2VhcmNoPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjI8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NjczPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5UZWEgcG9seXBoZW5vbHMgZGVjcmVhc2Ugc2VydW0gbGV2ZWxzIG9mIHByb3N0YXRl4oCQc3BlY2lmaWMgYW50aWdlbiwgaGVwYXRvY3l0ZSBncm93dGggZmFjdG9yLCBhbmQgdmFzY3VsYXIgZW5kb3RoZWxpYWwgZ3Jvd3RoIGZhY3RvciBpbiBwcm9zdGF0ZSBjYW5jZXIgcGF0aWVudHMgYW5kIGluaGliaXQgcHJvZHVjdGlvbiBvZiBoZXBhdG9jeXRlIGdyb3d0aCBmYWN0b3IgYW5kIHZhc2N1bGFyIGVuZG90aGVsaWFsIGdyb3d0aCBmYWN0b3IgaW7CoHZpdHJvPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk1jTGFydHk8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDk8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTE1OC8xOTQwLTYyMDcuQ0FQUi0wOC0wMTY3PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE0MyI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+TWVkaW5h4oCQQ2FsaXogSSwgR2FyY2lh4oCQQ29ydGVzIE0sIEdvbnphbGV64oCQSmltZW5leiBBLCBDYWJlbGxvIE1SLCBSb2JsZXPigJBEaWF6IE0sIFNhbmFicmlh4oCQQ2FicmVyYSBKIGFuZCBKaW1lbmV64oCQUGVyZXogTSwgMjAxOC4gSGVyYmFsIGFuZCBkaWV0YXJ5IHN1cHBsZW1lbnTigJBpbmR1Y2VkIExpdmVyIEluanVyaWVzIGluIHRoZSBTcGFuaXNoIERJTEkgUmVnaXN0cnkuIENsaW5pY2FsIEdhc3Ryb2VudGVyb2xvZ3kgYW5kIEhlcGF0b2xvZ3ksIHBpaTogUzE1NDLigJAzNTY1KDE4KTMwMDEw4oCQNy48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTQ0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+VG94aWNvbG9neSBMZXR0ZXJzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjI2Mzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT40NDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+SW50ZXJpbSByZWxhdGl2ZSBwb3RlbmN5IGZhY3RvcnMgZm9yIHRoZSB0b3hpY29sb2dpY2FsIHJpc2sgYXNzZXNzbWVudCBvZiBweXJyb2xpemlkaW5lIGFsa2Fsb2lkcyBpbiBmb29kIGFuZCBoZXJiYWwgbWVkaWNpbmVzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk1lcno8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLnRveGxldC4yMDE2LjA1LjAwMjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNDUiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5JbnRlcm5hdGlvbmFsIEpvdXJuYWwgb2YgSGVtYXRvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMDU8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+Mjk1PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5QaGFzZSAyIHRyaWFsIG9mIGRhaWx5LCBvcmFsIGVwaWdhbGxvY2F0ZWNoaW4gZ2FsbGF0ZSBpbiBwYXRpZW50cyB3aXRoIGxpZ2h04oCQY2hhaW4gYW15bG9pZG9zaXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TWVzaGl0c3VrYTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDA3L3MxMjE4NS0wMTYtMjExMi0xPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE0NiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkJyaXRpc2ggSm91cm5hbCBvZiBOdXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTExPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjEyNjM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdHMgb2YgZGlldGFyeSBzdXBwbGVtZW50YXRpb24gd2l0aCBlcGlnYWxsb2NhdGVjaGlu4oCQM+KAkGdhbGxhdGUgb24gd2VpZ2h0IGxvc3MsIGVuZXJneSBob21lb3N0YXNpcywgY2FyZGlvbWV0YWJvbGljIHJpc2sgZmFjdG9ycyBhbmQgbGl2ZXIgZnVuY3Rpb24gaW4gb2Jlc2Ugd29tZW46IHJhbmRvbWlzZWQsIGRvdWJsZeKAkGJsaW5kLCBwbGFjZWJv4oCQY29udHJvbGxlZCBjbGluaWNhbCB0cmlhbDwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5NaWVsZ2/igJBBeXVzbzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE3L1MwMDA3MTE0NTEzMDAzNzg0PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE0OCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPk1lZGljaW5hbCBSZXNlYXJjaCBSZXZpZXdzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjMyNzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q2hlbW9wcm90ZWN0aW9uOiBhIHJldmlldyBvZiB0aGUgcG90ZW50aWFsIHRoZXJhcGV1dGljIGFudGlveGlkYW50IHByb3BlcnRpZXMgb2YgZ3JlZW4gdGVhIChDYW1lbGxpYSBzaW5lbnNpcykgYW5kIGNlcnRhaW4gb2YgaXRzIGNvbnN0aXR1ZW50czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5NaXRzY2hlcjwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MTk5NzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDAyLyhTSUNJKTEwOTgtMTEyOCgxOTk3MDcpMTc6NCZsdDszMjc6OkFJRC1NRUQyJmd0OzMuMC5DTzsyLVk8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTQ5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40Nzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNzYwPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5TYWZldHkgYXNzZXNzbWVudCBvZiBoZWF04oCQc3RlcmlsaXplZCBncmVlbiB0ZWEgY2F0ZWNoaW4gcHJlcGFyYXRpb246IGEgNuKAkG1vbnRoIHJlcGVhdOKAkGRvc2Ugc3R1ZHkgaW4gcmF0czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Nb3JpdGE8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDk8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZjdC4yMDA5LjA0LjAzMzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNTAiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPk11bGRlciBQUCwgU8OhbmNoZXogUEwsIFRoZXNlIEEsIFByZWlzc+KAkFdlaWdlcnQgQSBhbmQgQ2FzdGVsbGFyaSBNLCAyMDE1LiBPY2N1cnJlbmNlIG9mIFB5cnJvbGl6aWRpbmUgYWxrYWxvaWRzIGluIGZvb2QuIEVGU0EgU3VwcG9ydGluZyBQdWJsaWNhdGlvbiAyMDE1OkVO4oCQODU5LCAx4oCTMTE0IHBwLjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNTEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5BcmNoaXZlcyBvZiBCaW9jaGVtaXN0cnkgYW5kIEJpb3BoeXNpY3M8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NTU3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkRvc2XigJBkZXBlbmRlbnQgZnVuY3Rpb25hbGl0eSBhbmQgdG94aWNpdHkgb2YgZ3JlZW4gdGVhIHBvbHlwaGVub2xzIGluIGV4cGVyaW1lbnRhbCByb2RlbnRzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk11cmFrYW1pPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5hYmIuMjAxNC4wNC4wMTg8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTUyIj4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5NdXJhbWF0c3U8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZV90aXRsZT5TY2llbmNlIG9mIFRlYTwvdm9sdW1lX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MTk5MTwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE1MyI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMTExL2pmcGUuMTI1MzI8L2RvaT4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5NdXJ1Z2VzaCBDUywgTWFub2ogSkIsIEhhd2FyZSBESiwgUmF2aSBSIGFuZCBTdWJyYW1hbmlhbiBSLCAyMDE3LiBJbmZsdWVuY2Ugb2Ygd2F0ZXIgcXVhbGl0eSBvbiBudXRyaXRpb25hbCBhbmQgc2Vuc29yeSBjaGFyYWN0ZXJpc3RpY3Mgb2YgZ3JlZW4gdGVhIGluZnVzaW9uLiBKb3VybmFsIG9mIEZvb2QgUHJvY2VzcyBFbmdpbmVlcmluZywgNDAuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE1NCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPlRoZSBBbWVyaWNhbiBKb3VybmFsIG9mIENsaW5pY2FsIE51dHJpdGlvbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT44MTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMjI8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkluZ2VzdGlvbiBvZiBhIHRlYSByaWNoIGluIGNhdGVjaGlucyBsZWFkcyB0byBhIHJlZHVjdGlvbiBpbiBib2R5IGZhdCBhbmQgbWFsb25kaWFsZGVoeWRl4oCQbW9kaWZpZWQgTERMIGluIG1lbuKAkzwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5OYWdhbzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwNTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDkzL2FqY24vODEuMS4xMjI8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTU1Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+T2Jlc2l0eTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xNTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNDczPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BIGdyZWVuIHRlYSBleHRyYWN0IGhpZ2ggaW4gY2F0ZWNoaW5zIHJlZHVjZXMgYm9keSBmYXQgYW5kIGNhcmRpb3Zhc2N1bGFyIHJpc2tzIGluIGh1bWFuczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5OYWdhbzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwNzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDM4L29ieS4yMDA3LjE3NjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNTYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5PYmVzaXR5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjMxMDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+QSBjYXRlY2hpbuKAkHJpY2ggYmV2ZXJhZ2UgaW1wcm92ZXMgb2Jlc2l0eSBhbmQgYmxvb2QgZ2x1Y29zZSBjb250cm9sIGluIHBhdGllbnRzIHdpdGggdHlwZSAyIGRpYWJldGVzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk5hZ2FvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA5PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMzgvb2J5LjIwMDguNTA1PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE1NyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkRpZ2VzdGl2ZSBEaXNlYXNlcyBhbmQgU2NpZW5jZXM8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NTg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjY4MjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q2F0ZWNoaW5zIGluIGRpZXRhcnkgc3VwcGxlbWVudHMgYW5kIGhlcGF0b3RveGljaXR5PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk5hdmFycm88L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTM8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwNy9zMTA2MjAtMDEzLTI2ODctOTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNTgiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5IZXBhdG9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjYwPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjM5OTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TGl2ZXIgaW5qdXJ5IGZyb20gaGVyYmFscyBhbmQgZGlldGFyeSBzdXBwbGVtZW50cyBpbiB0aGUgVS5TLiBEcnVn4oCQSW5kdWNlZCBMaXZlciBJbmp1cnkgTmV0d29yazwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5OYXZhcnJvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTU5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+SGVwYXRvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT42NTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zNjM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkxpdmVyIGluanVyeSBmcm9tIGhlcmJhbCBhbmQgZGlldGFyeSBzdXBwbGVtZW50czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5OYXZhcnJvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMDIvaGVwLjI4ODEzPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE2MCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgUGhhcm1hY3kgYW5kIFBoYXJtYWNldXRpY2FsIFNjaWVuY2VzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjgyNTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+SGVwYXRvdG94aWNpdHkgb2YgcHlycm9saXppZGluZSBhbGthbG9pZHM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+TmV1bWFuPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjE4NDMzL0ozQkc3SjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNjEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5DYW5jZXIgUHJldmVudGlvbiBSZXNlYXJjaDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT41PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI5MDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+UmFuZG9taXplZCwgZG91Ymxl4oCQYmxpbmQsIHBsYWNlYm/igJBjb250cm9sbGVkIHRyaWFsIG9mIHBvbHlwaGVub24gRSBpbiBwcm9zdGF0ZSBjYW5jZXIgcGF0aWVudHMgYmVmb3JlIHByb3N0YXRlY3RvbXk6IGV2YWx1YXRpb24gb2YgcG90ZW50aWFsIGNoZW1vcHJldmVudGl2ZSBhY3Rpdml0aWVzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPk5ndXllbjwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMjwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMTU4LzE5NDAtNjIwNy5DQVBSLTExLTAzMDY8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTYyIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+TnV0cml0aW9uIGFuZCBDYW5jZXI8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Njk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjExPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5HcmVlbiB0ZWEgY29uc3VtcHRpb24gYW5kIHRoZSByaXNrIG9mIGxpdmVyIGNhbmNlcjogYSBtZXRh4oCQYW5hbHlzaXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Tmk8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTc8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTA4MC8wMTYzNTU4MS4yMDE3LjEyNjM3NTQ8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTYzIj4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5OVFAgKE5hdGlvbmFsIFRveGljb2xvZ3kgUHJvZ3JhbSksIDIwMTYuIFRveGljb2xvZ3kgU3R1ZGllcyBvZiBHcmVlbiBUZWEgRXh0cmFjdCBpbiBGMzQ0L05UYWMgUmF0cyBhbmQgQjZDM0YxL04gTWljZSBhbmQgVG94aWNvbG9neSBhbmQgQ2FyY2lub2dlbmVzaXMgU3R1ZGllcyBvZiBHcmVlbiBUZWEgRXh0cmFjdCBpbiBXaXN0YXIgSGFuW0NybDpXSShIYW4pXSBSYXRzIGFuZCBCNmMzZjEvTiBNaWNlIChHYXZhZ2UgU3R1ZGllcykuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE2NCI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+T0VDRCAoT3JnYW5pemF0aW9uIGZvciBFY29ub21pYyBDb29wZXJhdGlvbiBhbmQgRGV2ZWxvcG1lbnQpLCAxOTk4LiBPRUNEIGd1aWRlbGluZSBmb3IgdGVzdGluZyBvZiBjaGVtaWNhbHMsIDQwOC4gUmVwZWF0ZWQgZG9zZSA5MOKAkGRheSBvcmFsIHRveGljaXR5IHN0dWR5IGluIHJvZGVudHMuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE2NSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkJpb2xvZ2ljYWwgYW5kIFBoYXJtYWNldXRpY2FsIEJ1bGxldGluPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE4PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE5MDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+QWJzb3JwdGlvbiBvZiAo4oCQKeKAkGVwaWdhbGxvY2F0ZWNoaW4gZ2FsbGF0ZSBpbnRvIHJhdCBwb3J0YWwgdmVpbjwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Pa3VzaGlvPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4xOTk1PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEyNDgvYnBiLjE4LjE5MDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNjYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5CaW9sb2dpY2FsIGFuZCBQaGFybWFjZXV0aWNhbCBCdWxsZXRpbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4zNjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNTc3PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5Db21wYXJpc29uIG9mICjiiJIp4oCQZXBpZ2FsbG9jYXRlY2hpbuKAkDPigJBP4oCQZ2FsbGF0ZSAoRUdDRykgYW5kIE/igJBtZXRoeWwgRUdDRyBiaW9hdmFpbGFiaWxpdHkgaW4gcmF0czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Pcml0YW5pPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEyNDgvYnBiLmIxMy0wMDM0OTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNjciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5KYXBhbmVzZSBKb3VybmFsIG9mIE51dHJpdGlvbiBBc3Nlc3M8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzY1PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FZmZlY3RzIG9mIHRlYSBjYXRlY2hpbnMgb24gYm9keSBmYXQgbWV0YWJvbGlzbSBpbiB3b21lbjwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5PdHN1a2E8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNjgiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5UcmVuZHMgaW4gRm9vZCBTY2llbmNlIGFuZCBUZWNobm9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE1PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE4NjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q2hhcmFjdGVyaXphdGlvbiBvZiBwcm90ZWlu4oCTcG9seXBoZW5vbCBpbnRlcmFjdGlvbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+UGFwYWRvcG91bG91PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai50aWZzLjIwMDMuMDkuMDE3PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE2OSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgYW5kIEJpb3Byb2Nlc3MgVGVjaG5vbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT44PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjkzNTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+VGVjaG5pcXVlcyBmb3IgZXh0cmFjdGlvbiBvZiBncmVlbiB0ZWEgcG9seXBoZW5vbHM6IGEgcmV2aWV3PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlBhc3JpamE8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwNy9zMTE5NDctMDE1LTE0NzkteTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNzAiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5NZWRpY2luYSBDbMOtbmljYTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMjE8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NTk4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5IZXBhdG90b3hpY2lkYWQgcG9yIGV4dHJhY3RvIGV0YW7Ds2xpY28gc2VjbyBkZSBDYW1lbGxpYSBzaW5lbnNpczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5QZWRyw7NzPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDAzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvUzAwMjUtNzc1MygwMyk3NDAyNi0zPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE3MSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgUmVzZWFyY2ggSW50ZXJuYXRpb25hbDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40Mzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT45NTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Rm9ybXVsYXRpb24gd2l0aCBhc2NvcmJpYyBhY2lkIGFuZCBzdWNyb3NlIG1vZHVsYXRlcyBjYXRlY2hpbiBiaW9hdmFpbGFiaWxpdHkgZnJvbSBncmVlbiB0ZWE8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+UGV0ZXJzPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEwPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mb29kcmVzLjIwMDkuMDguMDE2PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE3MiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkludGVybmF0aW9uYWwgSm91cm5hbCBvZiBQcmV2ZW50aXZlIE1lZGljaW5lPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+Mjg8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlRoZSBlZmZlY3Qgb2YgZ3JlZW4gdGVhIGV4dHJhY3Qgc3VwcGxlbWVudGF0aW9uIG9uIGxpdmVyIGVuenltZXMgaW4gcGF0aWVudHMgd2l0aCBub25hbGNvaG9saWMgZmF0dHkgbGl2ZXIgZGlzZWFzZTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5QZXplc2hraTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNjwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC40MTAzLzIwMDgtNzgwMi4xNzMwNTE8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTczIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBFdGhub3BoYXJtYWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xNTU8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTY1PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5Db25jZW50cmF0ZWQgZ3JlZW4gdGVhIGV4dHJhY3QgaW5kdWNlcyBzZXZlcmUgYWN1dGUgaGVwYXRpdGlzIGluIGEgNjPigJB5ZWFy4oCQb2xkIHdvbWFu4oCTYSBjYXNlIHJlcG9ydCB3aXRoIHBoYXJtYWNldXRpY2FsIGFuYWx5c2lzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlBpbGx1a2F0PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5qZXAuMjAxNC4wNS4wMTU8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTc0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Q3JpdGljYWwgUmV2aWV3cyBpbiBGb29kIFNjaWVuY2UgYW5kIE51dHJpdGlvbjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT41Nzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMTg4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BZGRpdGlvbiBvZiBtaWxrIHRvIHRlYSBpbmZ1c2lvbnM6IGhlbHBmdWwgb3IgaGFybWZ1bD8gRXZpZGVuY2UgZnJvbSBpbsKgdml0cm8gYW5kIGluwqB2aXZvIHN0dWRpZXMgb24gYW50aW94aWRhbnQgcHJvcGVydGllczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5SYXNoaWRpbmVqYWQ8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTc8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTA4MC8xMDQwODM5OC4yMDE1LjEwOTk1MTU8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTc1Ij4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5SS0kgKFJvYmVydCBLb2NoIEluc3RpdHV0ZSksIDE5OTguIFZlcnplaHIgdm9uIGdyw7xuZW0gdGVlLiBCdW5kZXPigJBHZXN1bmRoZWl0c3N1cnZleSBBdmFpbGFibGUgb25saW5lOiBodHRwczovL3d3dy5ya2kuZGUvREUvSG9tZS9ob21lcGFnZV9ub2RlLmh0bWwgW0FjY2Vzc2VkOiAxOSBNYXJjaCAyMDE4XTwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNzYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5OYXR1cmFsIFByb2R1Y3QgUmVwb3J0czwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4zNDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT42MjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+UHlycm9saXppZGluZSBhbGthbG9pZHM6IG9jY3VycmVuY2UsIGJpb2xvZ3ksIGFuZCBjaGVtaWNhbCBzeW50aGVzaXM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Um9iZXJ0c29uPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMzkvQzVOUDAwMDc2QTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNzciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5VZ2Vza3IgTMOmZ2VyPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjE3Mzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yMDU8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlRva3Npc2sgaGVwYXRpdGlzIHVkbMO4c3QgYWYgZ3LDuG4gdGU8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Um9oZGU8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxNzgiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIGFncmljdWx0dXJhbCBhbmQgZm9vZCBjaGVtaXN0cnk8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NTg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGlzc3VlPjI8L2lzc3VlPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xMjk2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5HcmVlbiB0ZWEgZmxhdmFu4oCQM+KAkG9sczogY29sb25pYyBkZWdyYWRhdGlvbiBhbmQgdXJpbmFyeSBleGNyZXRpb24gb2YgY2F0YWJvbGl0ZXMgYnkgaHVtYW5zPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlJvb3dpPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA5PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMjEvamY5MDMyOTc1PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE3OSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkludGVybmF0aW9uYWwgSm91cm5hbCBvZiBXb21lbidzIEhlYWx0aDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT41PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQ3NzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+VHJlYXRtZW50IG9mIHN5bXB0b21hdGljIHV0ZXJpbmUgZmlicm9pZHMgd2l0aCBncmVlbiB0ZWEgZXh0cmFjdDogYSBwaWxvdCByYW5kb21pemVkIGNvbnRyb2xsZWQgY2xpbmljYWwgc3R1ZHk8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Um9zaGR5PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEzPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTgwIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+SW50ZXJuYXRpb25hbCBKb3VybmFsIG9mIE1vbGVjdWxhciBNZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4zMjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT45ODk8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkdyZWVuIHRlYSB3aXRoIGhpZ2jigJBkZW5zaXR5IGNhdGVjaGlucyBpbXByb3ZlcyBsaXZlciBmdW5jdGlvbiBhbmQgZmF0IGluZmlsdHJhdGlvbiBpbiBub27igJBhbGNvaG9saWMgZmF0dHkgbGl2ZXIgZGlzZWFzZSAoTkFGTEQpIHBhdGllbnRzOiBhIGRvdWJsZeKAkGJsaW5kIHBsYWNlYm/igJBjb250cm9sbGVkIHN0dWR5PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlNha2F0YTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4zODkyL2lqbW0uMjAxMy4xNTAzPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE4MSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkRydWcgU2FmZXR5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjMxPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjQ2OTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+U2FmZXR5IG9mIGdyZWVuIHRlYSBleHRyYWN0czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5TYXJtYTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwODwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4yMTY1LzAwMDAyMDE4LTIwMDgzMTA2MC0wMDAwMzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxODIiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPlNDRiAoU2NpZW50aWZpYyBDb21taXR0ZWUgb24gRm9vZHMpLCBFdXJvcGVhbiBVbmlvbiAxOTk3LiBPcGluaW9uIG9uIHRoZSBwb3RlbnRpYWwgbWljcm9iaW9sb2dpY2FsIHJpc2sgYXJpc2luZyBmcm9tIHRoZSBwcmVzZW5jZSBvZiBtb2lzdHVyZSBpbiB0ZWEgKGV4cHJlc3NlZCBvbiAxOXRoIFNlcHRlbWJlciAxOTk3KS48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTgzIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40Mzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMDc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlRveGljaXR5IG9mIGdyZWVuIHRlYSBleHRyYWN0cyBhbmQgdGhlaXIgY29uc3RpdHVlbnRzIGluIHJhdCBoZXBhdG9jeXRlcyBpbiBwcmltYXJ5IGN1bHR1cmU8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+U2NobWlkdDwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwNTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDE2L2ouZmN0LjIwMDQuMTEuMDAxPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE4NCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkt1bnR6ZS4gRGVyIFRlZXN0cmF1Y2guIFplaXRzY2hyaWZ0IGbDvHIgUGh5dG90aGVyYXBpZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xNzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yMzU8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkNhbWVsbGlhIHNpbmVuc2lzIChMLikgTzwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5TY2hvbHo8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjE5OTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxODUiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Gb29kIEFkZGl0aXZlcyBhbmQgQ29udGFtaW5hbnRzOiBQYXJ0IEE8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MzE8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTcyMzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+T2NjdXJyZW5jZSBvZiAxNSsgMSBFVSBwcmlvcml0eSBwb2x5Y3ljbGljIGFyb21hdGljIGh5ZHJvY2FyYm9ucyAoUEFIKSBpbiB2YXJpb3VzIHR5cGVzIG9mIHRlYSAoQ2FtZWxsaWEgc2luZW5zaXMpIGFuZCBoZXJiYWwgaW5mdXNpb25zPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlNjaHVsejwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDgwLzE5NDQwMDQ5LjIwMTQuOTUyNzg1PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE4NiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkdhc3Ryb2VudGVyb2xvZ2llIENsaW5pcXVlIGV0IEJpb2xvZ2lxdWU8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MjU8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+ODM0PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5JcyBleG9saXNlIGhlcGF0b3RveGljPzwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5TZWRkaWs8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDE8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxODciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIENsaW5pY2FsIE9uY29sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjI3PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjM4MDg8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlBoYXNlIEkgdHJpYWwgb2YgZGFpbHkgb3JhbCBQb2x5cGhlbm9uIEUgaW4gcGF0aWVudHMgd2l0aCBhc3ltcHRvbWF0aWMgUmFpIHN0YWdlIDAgdG8gSUkgY2hyb25pYyBseW1waG9jeXRpYyBsZXVrZW1pYTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5TaGFuYWZlbHQ8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDk8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTIwMC9KQ08uMjAwOC4yMS4xMjg0PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE4OCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkNhbmNlcjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMTk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzYzPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5QaGFzZSAyIHRyaWFsIG9mIGRhaWx5LCBvcmFsIFBvbHlwaGVub24gRSBpbiBwYXRpZW50cyB3aXRoIGFzeW1wdG9tYXRpYywgUmFpIHN0YWdlIDAgdG8gSUkgY2hyb25pYyBseW1waG9jeXRpYyBsZXVrZW1pYTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5TaGFuYWZlbHQ8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTM8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwMi9jbmNyLjI3NzE5PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE4OSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkJNQyBDb21wbGVtZW50YXJ5IGFuZCBBbHRlcm5hdGl2ZSBNZWRpY2luZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xMDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT43NjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R3JlZW4gdGVhIHBvbHlwaGVub2xzIHN1cHBsZW1lbnRhdGlvbiBhbmQgVGFpIENoaSBleGVyY2lzZSBmb3IgcG9zdG1lbm9wYXVzYWwgb3N0ZW9wZW5pYyB3b21lbjogc2FmZXR5IGFuZCBxdWFsaXR5IG9mIGxpZmUgcmVwb3J0PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlNoZW48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTA8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTE4Ni8xNDcyLTY4ODItMTAtNzY8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTkwIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+T3N0ZW9wb3Jvc2lzIEludGVybmF0aW9uYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MjM8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTU0MTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RWZmZWN0IG9mIGdyZWVuIHRlYSBhbmQgVGFpIENoaSBvbiBib25lIGhlYWx0aCBpbiBwb3N0bWVub3BhdXNhbCBvc3Rlb3BlbmljIHdvbWVuOiBhIDbigJBtb250aCByYW5kb21pemVkIHBsYWNlYm/igJBjb250cm9sbGVkIHRyaWFsPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlNoZW48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwNy9zMDAxOTgtMDExLTE3MzEteDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxOTEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Gb29kIFJlc2VhcmNoIEludGVybmF0aW9uYWw8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NTk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTAwPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5JbnRlcmFjdGlvbnMgYmV0d2VlbiB0ZWEgcG9seXBoZW5vbCBhbmQgdHdvIGtpbmRzIG9mIHR5cGljYWwgZWdnIHdoaXRlIHByb3RlaW5z4oCQb3ZhbGJ1bWluIGFuZCBseXNvenltZTogRWZmZWN0IG9uIHRoZSBnYXN0cm9pbnRlc3RpbmFsIGRpZ2VzdGlvbiBvZiBib3RoIHByb3RlaW5zIGluwqB2aXRybzwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5TaGVuPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE0PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mb29kcmVzLjIwMTQuMDEuMDcwPC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE5MiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkZvb2QgQWRkaXRpdmVzIGFuZCBDb250YW1pbmFudHM6IFBhcnQgQTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4zMjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yMDU4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5QeXJyb2xpemlkaW5lIGFuZCB0cm9wYW5lIGFsa2Fsb2lkcyBpbiB0ZWFzIGFuZCB0aGUgaGVyYmFsIHRlYXMgcGVwcGVybWludCwgcm9vaWJvcyBhbmQgY2hhbW9taWxlIGluIHRoZSBJc3JhZWxpIG1hcmtldDwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5TaGltc2hvbmk8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxOTMiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwMi9tbmZyLjIwMDgwMDE2OTwvZG9pPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPlN0YWxtYWNoIEEsIFRyb3VmZmxhcmQgUywgU2VyYWZpbmkgTSBhbmQgQ3JvemllciBBLCAyMDA5LiBBYnNvcnB0aW9uLCBtZXRhYm9saXNtIGFuZCBleGNyZXRpb24gb2YgQ2hvbGFkaSBncmVlbiB0ZWEgZmxhdmFu4oCQM+KAkG9scyBieSBodW1hbnMuIE1vbGVjdWxhciBOdXRyaXRpb24gYW5kIEZvb2QgUmVzZWFyY2gsIDUzLCBTNDTigJA1My48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTk0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+TW9sZWN1bGFyIE51dHJpdGlvbiBhbmQgRm9vZCBSZXNlYXJjaDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT41NDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zMjM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkFic29ycHRpb24sIG1ldGFib2xpc20sIGFuZCBleGNyZXRpb24gb2YgZ3JlZW4gdGVhIGZsYXZhbuKAkDPigJBvbHMgaW4gaHVtYW5zIHdpdGggYW4gaWxlb3N0b215PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlN0YWxtYWNoPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDEwPC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMDIvbW5mci4yMDA5MDAxOTQ8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTk1Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+VG94aW5zPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjg8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzU2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5EZWh5ZHJvcHlycm9saXppZGluZSBhbGthbG9pZCB0b3hpY2l0eSwgY3l0b3RveGljaXR5LCBhbmQgY2FyY2lub2dlbmljaXR5PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlN0ZWdlbG1laWVyPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE2PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjMzOTAvdG94aW5zODEyMDM1NjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYxOTYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIEFPQUMgSW50ZXJuYXRpb25hbDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT45NDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT40ODc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkEgbm9u4oCQdGFyZ2V0ZWQgYXBwcm9hY2ggdG8gY2hlbWljYWwgZGlzY3JpbWluYXRpb24gYmV0d2VlbiBncmVlbiB0ZWEgZGlldGFyeSBzdXBwbGVtZW50cyBhbmQgZ3JlZW4gdGVhIGxlYXZlcyBieSBIUExDL01TPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlN1bjwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMTwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE5NyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgTnV0cml0aW9uYWwgRm9vZDwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT44PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlNhZmV0eSBvZiBleGNlc3NpdmUgaW5nZXN0aW9uIG9mIGEgYmV2ZXJhZ2UgY29udGFpbmluZyBncmVlbiB0ZWEgY2F0ZWNoaW5zPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlN1enVraTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAwNTwvY1llYXI+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjE5OCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgYWdyaWN1bHR1cmFsIGFuZCBmb29kIGNoZW1pc3RyeTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT41ODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8aXNzdWU+MjwvaXNzdWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjEzMTM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPk1ldGFib2xpc20gb2YgKOKIkinigJBlcGlnYWxsb2NhdGVjaGluIGdhbGxhdGUgYnkgcmF0IGludGVzdGluYWwgZmxvcmE8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+VGFrYWdha2k8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDk8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAyMS9qZjkwMzM3NXM8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMTk5Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40Njwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yMjI0PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FdmFsdWF0aW9uIG9mIHRveGljaXR5IG9mIGdyZWVuIHRlYSBjYXRlY2hpbnMgd2l0aCA5MOKAkGRheSBkaWV0YXJ5IGFkbWluaXN0cmF0aW9uIHRvIEYzNDQgcmF0czwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5UYWthbWk8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDg8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmZjdC4yMDA4LjAyLjAyMzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMDAiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5KYXBhbmVzZSBQaGFybWFjb2xvZ3kgVGhlcjwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4zNjwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT43Njc8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdHMgb2YgbG9uZ+KAkHRlcm0gY29uc3VtcHRpb24gb2YgdGVhIGNhdGVjaGluc+KAkGVucmljaGVkIGJldmVyYWdlIHdpdGggbm8gY2FmZmVpbmUgb24gYm9keSBjb21wb3NpdGlvbiBpbiBodW1hbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+VGFrZXNoaXRhPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA4PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjAyIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+VGhlIEFtZXJpY2FuIEpvdXJuYWwgb2YgQ2xpbmljYWwgTnV0cml0aW9uPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjk1PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjczMjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R3JlZW4gdGVhIGNvbnN1bXB0aW9uIGFuZCB0aGUgcmlzayBvZiBpbmNpZGVudCBmdW5jdGlvbmFsIGRpc2FiaWxpdHkgaW4gZWxkZXJseSBKYXBhbmVzZTogdGhlIE9oc2FraSBDb2hvcnQgMjAwNiBTdHVkeeKAkzwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Ub21hdGE8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMzk0NS9hamNuLjExMS4wMjMyMDA8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjAzIj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjExNTUvMjAxMy80MTIzNzk8L2RvaT4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5Ub29sc2VlIE5BLCBBcnVvbWEgT0ksIEd1bm5lc3MgVEssIEtvd2xlc3N1ciBTLCBEYW1iYWxhIFYsIE11cmFkIEYgYW5kIEJvdXJkb24gRSwgMjAxMy4gRWZmZWN0aXZlbmVzcyBvZiBncmVlbiB0ZWEgaW4gYSByYW5kb21pemVkIGh1bWFuIGNvaG9ydDogcmVsZXZhbmNlIHRvIGRpYWJldGVzIGFuZCBpdHMgY29tcGxpY2F0aW9ucy4gQmlvTWVkIFJlc2VhcmNoIEludGVybmF0aW9uYWwuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIwNCI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+VHN1Y2hpZGEgVCBhbmQgSXRha3VyYSBILCAyMDAyLiBSZWR1Y3Rpb24gb2YgYm9keSBmYXQgaW4gaHVtYW5zIGJ5IGxvbmfigJB0ZXJtIGluZ2VzdGlvbiBvZiBjYXRlY2hpbnMuIFByb2dyZXNzIGluIE1lZGljaW5lLiBTZXB0ZW1iZXI6IFJlcHJpbnQsIDkoMjIpLiBPcmlnaW5hbCBwYXBlciBpbiBKYXBhbmVzZS4gVHJhbnNsYXRpb24gdG8gRW5nbGlzaCBwcm92aWRlZCBieSBpbnRlcmVzdGVkIHBhcnRpZXMgKOKAmERvY3VtZW50YXRpb24gcHJvdmlkZWQgdG8gRUZTQeKAmSBuLiAzKS48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjA1Ij4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5Va2F3YSBZLCBIYXRha2V5YW1hIFksIE5vcm8gQSwgRnVrdWhhcmEgSSBhbmQgU2FnZXNha2EgWU0sIDIwMTMuIEVmZmVjdCBvZiBjb25zdW1wdGlvbiBvZiB0ZWEgYmV2ZXJhZ2UgY29udGFpbmluZyBjYXRlY2hpbnMgd2l0aCBhIGdhbGxveWwgbW9pZXR5IG9uIGxpcGlkIGV4Y3JldGlvbiBpbnRvIGZlY2VzLCBKcG4uIFBoYXJtYWNvbC4gVGhlciwgNDEsIDkxOeKAkDkyNy4gT3JpZ2luYWwgcGFwZXIgaW4gSmFwYW5lc2UuIFRyYW5zbGF0aW9uIHRvIEVuZ2xpc2ggcHJvdmlkZWQgYnkgaW50ZXJlc3RlZCBwYXJ0aWVzICjigJhEb2N1bWVudGF0aW9uIHByb3ZpZGVkIHRvIEVGU0HigJkgbi4gMykuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIwNiI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkpvdXJuYWwgb2YgSW50ZXJuYXRpb25hbCBNZWRpY2FsIFJlc2VhcmNoPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjMxPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjg4PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5BIHNpbmdsZSBhc2NlbmRpbmcgZG9zZSBzdHVkeSBvZiBlcGlnYWxsb2NhdGVjaGluIGdhbGxhdGUgaW4gaGVhbHRoeSB2b2x1bnRlZXJzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlVsbG1hbm48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDM8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTE3Ny8xNDczMjMwMDAzMDMxMDAyMDU8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjA3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+SW50ZXJuYXRpb25hbCBKb3VybmFsIGZvciBWaXRhbWluIGFuZCBOdXRyaXRpb24gUmVzZWFyY2g8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NzQ8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MjY5PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5QbGFzbWHigJBraW5ldGljIGNoYXJhY3RlcmlzdGljcyBvZiBwdXJpZmllZCBhbmQgaXNvbGF0ZWQgZ3JlZW4gdGVhIGNhdGVjaGluIGVwaWdhbGxvY2F0ZWNoaW4gZ2FsbGF0ZSAoRUdDRykgYWZ0ZXIgMTAgZGF5cyByZXBlYXRlZCBkb3NpbmcgaW4gaGVhbHRoeSB2b2x1bnRlZXJzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlVsbG1hbm48L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDQ8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAyNC8wMzAwLTk4MzEuNzQuNC4yNjk8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjA4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjExMTEvai4xNzUwLTM4NDEuMjAxMC4wMTcwNS54PC9kb2k+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+VW5hY2h1a3d1IFVKLCBBaG1lZCBTLCBLYXZhbGllciBBLCBMeWxlcyBKVCBhbmQgS2VubmVsbHkgRUosIDIwMTAuIFdoaXRlIGFuZCBncmVlbiB0ZWFzIChDYW1lbGxpYSBzaW5lbnNpcyB2YXIuIHNpbmVuc2lzKTogdmFyaWF0aW9uIGluIHBoZW5vbGljLCBtZXRoeWx4YW50aGluZSwgYW5kIGFudGlveGlkYW50IHByb2ZpbGVzLiBKb3VybmFsIG9mIEZvb2QgU2NpZW5jZSwgNzUsIEM1NDHigJNDNTQ4LjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMDkiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPlVTIFBoYXJtYWNvcGVpYSAsIDIwMDcuIE5hdGlvbmFsIEZvcm11bGFyeSAyNS4gVVMgUGhhcm1hY29wZWlhbCBDb252ZW50aW9uLCBSb2NrdmlsbGUsIE1ELiAxNjU0IHBwLjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMTAiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPlVTIFBoYXJtYWNvcGVpYSAsIDIwMDguIDIgc3VwcGxlbWVudC4gSVNTTjogMTkzMOKAkDI5MDguIElTU04gb25saW5lOiAxOTMw4oCQMjkxNi4gMTI2MDEgVHdpbmJyb29rIFBhcmt3YXksIFJvY2t2aWxsZSwgTUQgMjA4NTIuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIxMSI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+VVMgUGhhcm1hY29wZWlhICwgMjAxNy4gVm9sdW1lIDQsIFVTUCA0MCwgTkYgMzUuIFRoZSBVbml0ZXMgU3RhdGVzIFBoYXJtYWNvcGVpYWwgQ29udmVudGlvbiAxMjYwMSBUd2luYm9vayBQYXJrd2F5LCBSb2NrdmlsbGUsIE1EIDIwODUyLjwvdW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMTIiPg0KICAgICAgICAgICAgICAgICAgICA8dW5zdHJ1Y3R1cmVkX2NpdGF0aW9uPlVTREEgQVJTIChVbml0ZWQgU3RhdGVzIERlcGFydG1lbnQgb2YgQWdyaWN1bHR1cmUsIEFncmljdWx0dXJhbCBSZXNlYXJjaCBTZXJ2aWNlKSwgb25saW5lLiBOYXRpb25hbCBHZW5ldGljIFJlc291cmNlcyBQcm9ncmFtLiBHZXJtcGxhc20gUmVzb3VyY2VzIEluZm9ybWF0aW9uIE5ldHdvcmsgKEdSSU4pLiBOYXRpb25hbCBHZXJtcGxhc20gUmVzb3VyY2VzIExhYm9yYXRvcnksIEJlbHRzdmlsbGUsIE1hcnlsYW5kLiBBdmFpbGFibGUgb25saW5lOiBodHRwOi8vd3d3LmFycy1ncmluLmdvdi9jZ2ktYmluL25wZ3MvaHRtbC90YXhfc2VhcmNoLnBsPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIxMyI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+VVNQIFBoYXJtYWNpc3RzIFBoYXJtYWNvcGVpYSAsIDIwMDguIDIgc3VwcGxlbWVudC4gSVNTTjogMTkzMOKAkDI5MDguIElTU04gb25saW5lOiAxOTMw4oCQMjkxNi4gMTI2MDEgVHdpbmJyb29rIFBhcmt3YXksIFJvY2t2aWxsZSwgTUQgMjA4NTIuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIxNCI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkdhc3Ryb2VudGVyb2xvZ2llIENsaW5pcXVlIGV0IEJpb2xvZ2lxdWU8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MTE2NjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+QWN1dGUgaGVwYXRpdGlzIGR1ZSB0byBFeG9saXNlLCBhIENhbWVsbGlhIHNpbmVuc2lz4oCQZGVyaXZlZCBkcnVnPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlZpYWw8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDM8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMTUiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5UcmVuZHMgaW4gRm9vZCBTY2llbmNlIGFuZCBUZWNobm9sb2d5PC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjExPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjE1MjwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+VGVhIGZsYXZvbm9pZHM6IHRoZWlyIGZ1bmN0aW9ucywgdXRpbGlzYXRpb24gYW5kIGFuYWx5c2lzPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPldhbmc8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDA8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9TMDkyNC0yMjQ0KDAwKTAwMDYxLTM8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjE2Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Rm9vZCBhbmQgQ2hlbWljYWwgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT40Njwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yMzI8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPlZhbGlkYXRpb24gb2YgZ3JlZW4gdGVhIHBvbHlwaGVub2wgYmlvbWFya2VycyBpbiBhIHBoYXNlIElJIGh1bWFuIGludGVydmVudGlvbiB0cmlhbDwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5XYW5nPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA4PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5mY3QuMjAwNy4wOC4wMDc8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjE3Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+T2Jlc2l0eTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4xODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT43NzM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdHMgb2YgY2F0ZWNoaW4gZW5yaWNoZWQgZ3JlZW4gdGVhIG9uIGJvZHkgY29tcG9zaXRpb248L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+V2FuZzwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMDwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMDM4L29ieS4yMDA5LjI1NjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMTgiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Nb2xlY3VsYXIgTnV0cml0aW9uIGFuZCBGb29kIFJlc2VhcmNoPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjU5PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjYxMDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+Q29tcGFyYXRpdmUgYmlva2luZXRpY3MgYW5kIG1ldGFib2xpc20gb2YgcHVyZSBtb25vbWVyaWMsIGRpbWVyaWMsIGFuZCBwb2x5bWVyaWMgZmxhdmFu4oCQM+KAkG9sczogYSByYW5kb21pemVkIGNyb3Nz4oCQb3ZlciBzdHVkeSBpbiBodW1hbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+V2Vpc2U8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTU8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwMi9tbmZyLjIwMTQwMDQyMjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMTkiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5Kb3VybmFsIG9mIENocm9tYXRvZ3JhcGh5IEE8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MTAxMTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xNzM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkRldGVybWluYXRpb24gb2YgY2F0ZWNoaW5zIGluIG1hdGNoYSBncmVlbiB0ZWEgYnkgbWljZWxsYXIgZWxlY3Ryb2tpbmV0aWMgY2hyb21hdG9ncmFwaHk8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+V2Vpc3M8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDM8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9TMDAyMS05NjczKDAzKTAxMTMzLTY8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjIwIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiB0aGUgQW1lcmljYW4gQ29sbGVnZSBvZiBOdXRyaXRpb248L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+MjY8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+OTU8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkFjdXRlIEVHQ0cgc3VwcGxlbWVudGF0aW9uIHJldmVyc2VzIGVuZG90aGVsaWFsIGR5c2Z1bmN0aW9uIGluIHBhdGllbnRzIHdpdGggY29yb25hcnkgYXJ0ZXJ5IGRpc2Vhc2U8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+V2lkbGFuc2t5PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwODAvMDczMTU3MjQuMjAwNy4xMDcxOTU5MDwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMjEiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5JbnRlcm5hdGlvbmFsIEpvdXJuYWwgb2YgVG94aWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT4zMDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4xOTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+R3JlZW4gdGVhIGV4dHJhY3TigJBpbmR1Y2VkIGxldGhhbCB0b3hpY2l0eSBpbiBmYXN0ZWQgYnV0IG5vdCBpbiBub25mYXN0ZWQgZG9nczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5XdTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMTc3LzEwOTE1ODE4MTAzODc0NDU8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjIyIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Q2FuY2VyIFByZXZlbnRpb24gUmVzZWFyY2g8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+NTwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zOTM8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdCBvZiAy4oCQbW9udGggY29udHJvbGxlZCBncmVlbiB0ZWEgaW50ZXJ2ZW50aW9uIG9uIGxpcG9wcm90ZWluIGNob2xlc3Rlcm9sLCBnbHVjb3NlLCBhbmQgaG9ybW9uYWwgbGV2ZWxzIGluIGhlYWx0aHkgcG9zdG1lbm9wYXVzYWwgd29tZW48L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+V3U8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTE1OC8xOTQwLTYyMDcuQ0FQUi0xMS0wNDA3PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIyMyI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkxXVOKAkEZvb2QgU2NpZW5jZSBhbmQgVGVjaG5vbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT43ODwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4zNTI8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdCBvZiBzYWNjaGFyaWRlcyBvbiBzZWRpbWVudCBmb3JtYXRpb24gaW4gZ3JlZW4gdGVhIGNvbmNlbnRyYXRlPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPlh1PC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai5sd3QuMjAxNy4wMS4wMDM8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjI0Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBDaHJvbWF0b2dyYXBoeSBBPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjExNTY8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzEyPC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FZmZlY3RzIG9mIGRpZmZlcmVudCBzdGVlcGluZyBtZXRob2RzIGFuZCBzdG9yYWdlIG9uIGNhZmZlaW5lLCBjYXRlY2hpbnMgYW5kIGdhbGxpYyBhY2lkIGluIGJhZyB0ZWEgaW5mdXNpb25zPC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPllhbmc8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMDc8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAxNi9qLmNocm9tYS4yMDA2LjExLjA4ODwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMjUiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5SZWd1bGF0b3J5IFRveGljb2xvZ3kgYW5kIFBoYXJtYWNvbG9neTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT44NDwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT45NDwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+QmlvYWN0aXZlIG51dHJpZW50c+KAkHRpbWUgZm9yIHRvbGVyYWJsZSB1cHBlciBpbnRha2UgbGV2ZWxzIHRvIGFkZHJlc3Mgc2FmZXR5PC9hcnRpY2xlX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8YXV0aG9yPllhdGVzPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDE3PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwMTYvai55cnRwaC4yMDE3LjAxLjAwMjwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMjYiPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5NZXRhYm9saWMgU3luZHJvbWUgYW5kIFJlbGF0ZWQgRGlzb3JkZXJzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjc8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+MzQ5PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5FZmZlY3RpdmVuZXNzIGFuZCBzYWZldHkgb2YgMeKAkHllYXIgYWTCoGxpYml0dW0gY29uc3VtcHRpb24gb2YgYSBoaWdo4oCQY2F0ZWNoaW4gYmV2ZXJhZ2UgdW5kZXIgbnV0cml0aW9uYWwgZ3VpZGFuY2U8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+WW9uZWRhPC9hdXRob3I+DQogICAgICAgICAgICAgICAgICAgIDxjWWVhcj4yMDA5PC9jWWVhcj4NCiAgICAgICAgICAgICAgICAgICAgPGRvaSBwcm92aWRlcj0iY3Jvc3NyZWYiPjEwLjEwODkvbWV0LjIwMDguMDA2MTwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMjciPg0KICAgICAgICAgICAgICAgICAgICA8am91cm5hbF90aXRsZT5UaGUgSm91cm5hbCBvZiBUb3hpY29sb2dpY2FsIFNjaWVuY2VzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjM2PC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjI5NzwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+TGFjayBvZiBjaHJvbmljIHRveGljaXR5IGFuZCBjYXJjaW5vZ2VuaWNpdHkgb2YgZGlldGFyeSBhZG1pbmlzdHJhdGVkIGNhdGVjaGluIG1peHR1cmUgaW4gV2lzdGFyIEhhbm5vdmVyIEdBTEFTIHJhdHM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+WW9zaGlkYTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxMTwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4yMTMxL2p0cy4zNi4yOTc8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjI4Ij4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Umluc2hvIFlha3VyaS9KYXBhbmVzZSBKb3VybmFsIG9mIENsaW5pY2FsIFBoYXJtYWNvbG9neSBhbmQgVGhlcmFwZXV0aWNzPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjQzPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjk8L2ZpcnN0X3BhZ2U+DQogICAgICAgICAgICAgICAgICAgIDxhcnRpY2xlX3RpdGxlPkVmZmVjdHMgb2Ygc2hvcnTigJB0ZXJtIGNvbnN1bXB0aW9uIG9mIGEgbGFyZ2UgYW1vdW50IG9mIHRlYSBjYXRlY2hpbnMgb24gY2hyb21vc29tYWwgZGFtYWdlLCBveGlkYXRpdmUgc3RyZXNzIG1hcmtlcnMsIHNlcnVtIGxpcGlkLCBmb2xpYyBhY2lkLCBhbmQgdG90YWwgaG9tb2N5c3RlaW5lIGxldmVsczogYSByYW5kb21pemVkLCBkb3VibGXigJBibGluZCwgY29udHJvbGxlZCBzdHVkeTwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5Zb3NoaWthd2E8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTI8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMzk5OS9qc2NwdC40My45PC9kb2k+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIyOSI+DQogICAgICAgICAgICAgICAgICAgIDxqb3VybmFsX3RpdGxlPkNhbmNlciBQcmV2ZW50aW9uIFJlc2VhcmNoPC9qb3VybmFsX3RpdGxlPg0KICAgICAgICAgICAgICAgICAgICA8dm9sdW1lPjEwPC92b2x1bWU+DQogICAgICAgICAgICAgICAgICAgIDxmaXJzdF9wYWdlPjU3MTwvZmlyc3RfcGFnZT4NCiAgICAgICAgICAgICAgICAgICAgPGFydGljbGVfdGl0bGU+RWZmZWN0IG9mIGdyZWVuIHRlYSBzdXBwbGVtZW50cyBvbiBsaXZlciBlbnp5bWUgZWxldmF0aW9uOiByZXN1bHRzIGZyb20gYSByYW5kb21pemVkIGludGVydmVudGlvbiBzdHVkeSBpbiB0aGUgVW5pdGVkIFN0YXRlczwvYXJ0aWNsZV90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPGF1dGhvcj5ZdTwvYXV0aG9yPg0KICAgICAgICAgICAgICAgICAgICA8Y1llYXI+MjAxNzwvY1llYXI+DQogICAgICAgICAgICAgICAgICAgIDxkb2kgcHJvdmlkZXI9ImNyb3NzcmVmIj4xMC4xMTU4LzE5NDAtNjIwNy5DQVBSLTE3LTAxNjA8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjMwIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+Sm91cm5hbCBvZiBUaGUgU2NpZW5jZSBvZiBGb29kIGFuZCBBZ3JpY3VsdHVyZTwvam91cm5hbF90aXRsZT4NCiAgICAgICAgICAgICAgICAgICAgPHZvbHVtZT45Nzwvdm9sdW1lPg0KICAgICAgICAgICAgICAgICAgICA8Zmlyc3RfcGFnZT4yODI2PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5JbmZsdWVuY2Ugb2YgYnJld2luZyBjb25kaXRpb25zIG9uIHRhc3RlIGNvbXBvbmVudHMgaW4gZnVkaW5nIHdoaXRlIHRlYSBpbmZ1c2lvbnM8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Wmhhbmc8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTc8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwMi9qc2ZhLjgxMTE8L2RvaT4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8Y2l0YXRpb24ga2V5PSIxMC4yOTAzL2ouZWZzYS4yMDE4LjUyMzlfcmVmMjMxIj4NCiAgICAgICAgICAgICAgICAgICAgPGpvdXJuYWxfdGl0bGU+RHJ1ZyBTYWZldHk8L2pvdXJuYWxfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDx2b2x1bWU+Mzk8L3ZvbHVtZT4NCiAgICAgICAgICAgICAgICAgICAgPGZpcnN0X3BhZ2U+NzQ5PC9maXJzdF9wYWdlPg0KICAgICAgICAgICAgICAgICAgICA8YXJ0aWNsZV90aXRsZT5SaXNrIG9mIGxpdmVyIGluanVyeSBhc3NvY2lhdGVkIHdpdGggZ3JlZW4gdGVhIGV4dHJhY3QgaW4gU0xJTVFVSUNLwq4gd2VpZ2h0IGxvc3MgcHJvZHVjdHM6IHJlc3VsdHMgZnJvbSB0aGUgRElMSU4gcHJvc3BlY3RpdmUgc3R1ZHk8L2FydGljbGVfdGl0bGU+DQogICAgICAgICAgICAgICAgICAgIDxhdXRob3I+Wmhlbmc8L2F1dGhvcj4NCiAgICAgICAgICAgICAgICAgICAgPGNZZWFyPjIwMTY8L2NZZWFyPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMTAwNy9zNDAyNjQtMDE2LTA0MjgtNzwvZG9pPg0KICAgICAgICAgICAgICAgICAgPC9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDxjaXRhdGlvbiBrZXk9IjEwLjI5MDMvai5lZnNhLjIwMTguNTIzOV9yZWYyMzIiPg0KICAgICAgICAgICAgICAgICAgICA8ZG9pIHByb3ZpZGVyPSJjcm9zc3JlZiI+MTAuMjE2NS8wMDAwMzQ5NS0xOTc4MTYwMTAtMDAwMDI8L2RvaT4NCiAgICAgICAgICAgICAgICAgICAgPHVuc3RydWN0dXJlZF9jaXRhdGlvbj5aaW1tZXJtYW4gSEosIDE5NzguIERydWfigJBpbmR1Y2VkIGxpdmVyIGRpc2Vhc2UuIEluOiBIZXBhdG90b3hpY2l0eSwgVGhlIEFkdmVyc2UgRWZmZWN0cyBvZiBEcnVncyBhbmQgT3RoZXIgQ2hlbWljYWxzIG9uIHRoZSBMaXZlciwgMXN0IEVkaXRpb24uIEFwcGxldG9u4oCQQ2VudHVyeeKAkENyb2Z0cywgTmV3IFlvcmsuIHBwLiAzNTHigJMzNTMuPC91bnN0cnVjdHVyZWRfY2l0YXRpb24+DQogICAgICAgICAgICAgICAgICA8L2NpdGF0aW9uPg0KICAgICAgICAgICAgICAgICAgPGNpdGF0aW9uIGtleT0iMTAuMjkwMy9qLmVmc2EuMjAxOC41MjM5X3JlZjIzMyI+DQogICAgICAgICAgICAgICAgICAgIDx1bnN0cnVjdHVyZWRfY2l0YXRpb24+WmltbWVybWFuIEhKLCAxOTk5LiBEcnVn4oCQaW5kdWNlZCBsaXZlciBkaXNlYXNlLiBJbjogSGVwYXRvdG94aWNpdHksIFRoZSBBZHZlcnNlIEVmZmVjdHMgb2YgRHJ1Z3MgYW5kIE90aGVyIENoZW1pY2FscyBvbiB0aGUgTGl2ZXIsIDJuZCBFZGl0aW9uLiBMaXBwaW5jb3R0IFdpbGxpYW1zICZhbXA7IFdpbGtpbnMsIFBoaWxhZGVscGhpYS4gcHAuIDQyOOKAkzQzMy48L3Vuc3RydWN0dXJlZF9jaXRhdGlvbj4NCiAgICAgICAgICAgICAgICAgIDwvY2l0YXRpb24+DQogICAgICAgICAgICAgICAgPC9jaXRhdGlvbl9saXN0Pg0KICAgICAgICAgICAgICA8L2pvdXJuYWxfYXJ0aWNsZT4NCiAgICAgICAgICAgIDwvam91cm5hbD4NCiAgICAgICAgICA8L2Nyb3NzcmVmPg0KICAgICAgICA8L2RvaV9yZWNvcmQ+DQogICAgICA8L3F1ZXJ5Pg0KICAgIDwvYm9keT4NCiAgPC9xdWVyeV9yZXN1bHQ+DQo8L2Nyb3NzcmVmX3Jlc3VsdD4=
    http_version: 
  recorded_at: Sat, 06 Jul 2019 15:24:00 GMT
recorded_with: VCR 3.0.3
