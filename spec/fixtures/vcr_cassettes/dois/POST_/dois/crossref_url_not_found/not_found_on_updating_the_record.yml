---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.3389
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.6.1; mailto:info@datacite.org)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sat, 28 Mar 2020 05:05:04 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d94bdbff6a1d314d44da1584880b5fa0e1585371904; expires=Mon, 27-Apr-20
        05:05:04 GMT; path=/; domain=.doi.org; HttpOnly; SameSite=Lax; Secure
      Content-Encoding:
      - gzip
      Cf-Cache-Status:
      - DYNAMIC
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Server:
      - cloudflare
      Cf-Ray:
      - 57aed0615a5c8741-DUS
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        H4sIAAAAAAAAA4vmUlCoBmIFBSUXf08lKwUlQwM9Y2MLSyUdiGiQI0jQuSi/uLgoNU0JKFjLFQsAJnECuDYAAAA=
    http_version: null
  recorded_at: Sat, 28 Mar 2020 05:05:04 GMT
- request:
    method: get
    uri: https://api.crossref.org/works/10.3389/fmicb.2019.01425/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.6.1; mailto:info@datacite.org)
      Accept:
      - text/xml
      Accept-Encoding:
      - gzip,deflate
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.3389/fmicb.2019.01425>; rel="canonical", <https://www.frontiersin.org/article/10.3389/fmicb.2019.01425/full>;
        version="vor"; rel="item", <https://creativecommons.org/licenses/by/4.0/>;
        version="vor"; rel="license"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '49713'
      Server:
      - http-kit
      Date:
      - Sat, 28 Mar 2020 05:05:05 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Sat, 28 Mar 2020 05:05:05 GMT
recorded_with: VCR 5.1.0
