---
http_interactions:
- request:
    method: get
    uri: https://api.crossref.org/works/10.1371/journal.pbio.2001414/transform/application/vnd.crossref.unixsd+xml
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.7.2; mailto:info@datacite.org)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Link:
      - <http://dx.doi.org/10.1371/journal.pbio.2001414>; rel="canonical", <http://dx.plos.org/10.1371/journal.pbio.2001414>;
        version="vor"; rel="item", <http://creativecommons.org/licenses/by/4.0/>;
        version="vor"; rel="license", <http://orcid.org/0000-0002-9353-5498>; title="Julie
        A. McMurry"; rel="author"
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - X-Requested-With
      Content-Length:
      - '39014'
      Server:
      - http-kit
      Date:
      - Mon, 21 Dec 2020 17:34:15 GMT
      X-Rate-Limit-Limit:
      - '50'
      X-Rate-Limit-Interval:
      - 1s
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: null
  recorded_at: Mon, 21 Dec 2020 17:34:15 GMT
recorded_with: VCR 5.1.0
