---
http_interactions:
- request:
    method: get
    uri: https://doi.org/10.7554/elife.01567
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 302
      message: ''
    headers:
      Date:
      - Thu, 29 Nov 2018 12:25:12 GMT
      Content-Type:
      - text/html;charset=utf-8
      Content-Length:
      - '165'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d1499a08cc7464af49ac5e4b0318993ba1543494312; expires=Fri, 29-Nov-19
        12:25:12 GMT; path=/; domain=.doi.org; HttpOnly
      Expires:
      - Thu, 29 Nov 2018 13:11:51 GMT
      Location:
      - https://elifesciences.org/articles/01567
      Vary:
      - Accept
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 48150e3bec852744-FRA
    body:
      encoding: UTF-8
      string: |-
        <html><head><title>Handle Redirect</title></head>
        <body><a href="https://elifesciences.org/articles/01567">https://elifesciences.org/articles/01567</a></body></html>
    http_version: 
  recorded_at: Thu, 29 Nov 2018 12:25:12 GMT
- request:
    method: get
    uri: https://elifesciences.org/articles/01567
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Cache-Control:
      - max-age=1800, public, s-maxage=3720, stale-if-error=86400, stale-while-revalidate=43200
      Content-Security-Policy:
      - 'default-src data: https: ''unsafe-inline''; frame-ancestors ''none'''
      Content-Type:
      - text/html; charset=UTF-8
      Link:
      - </assets/patterns/js/main.a60f455f.js>; rel="preload"; as="script"; nopush,</assets/patterns/css/all.0c439898.css>;
        rel="preload"; as="style"; nopush,</assets/patterns/fonts/NotoSans-Regular-webfont-custom-2-subsetting.6f6e1e25.woff2>;
        rel="preload"; as="font"; type="font/woff2"; nopush,</assets/patterns/fonts/NotoSans-SemiBold-webfont-custom-2-subsetting.aa6d8116.woff2>;
        rel="preload"; as="font"; type="font/woff2"; nopush,</assets/patterns/fonts/NotoSerif-Regular-webfont-custom-2-subsetting.a00f980c.woff2>;
        rel="preload"; as="font"; type="font/woff2"; nopush
      Referrer-Policy:
      - no-referrer-when-downgrade, strict-origin-when-cross-origin
      Server:
      - nginx
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      X-Content-Security-Policy:
      - 'default-src data: https: ''unsafe-inline''; frame-ancestors ''none'''
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - DENY
      X-Xss-Protection:
      - 1; mode=block
      Via:
      - 1.1 varnish
      - 1.1 varnish
      Content-Length:
      - '62979'
      Accept-Ranges:
      - bytes
      Date:
      - Thu, 29 Nov 2018 12:25:12 GMT
      Age:
      - '216'
      Connection:
      - keep-alive
      X-Served-By:
      - cache-dca17737-DCA, cache-fra19150-FRA
      X-Cache:
      - MISS, HIT
      X-Cache-Hits:
      - 0, 1
      X-Timer:
      - S1543494312.441652,VS0,VE1
      Vary:
      - Accept-Encoding, Cookie
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        <!doctype html>

<html lang="en" prefix="og: http://ogp.me/ns#">

<head>

    <meta charset="utf-8"><script type="text/javascript">(window.NREUM||(NREUM={})).loader_config={xpid:"VQICUFJWCRACXVZVAgkHUQ=="};window.NREUM||(NREUM={}),__nr_require=function(t,n,e){function r(e){if(!n[e]){var o=n[e]={exports:{}};t[e][0].call(o.exports,function(n){var o=t[e][1][n];return r(o||n)},o,o.exports)}return n[e].exports}if("function"==typeof __nr_require)return __nr_require;for(var o=0;o<e.length;o++)r(e[o]);return r}({1:[function(t,n,e){function r(t){try{s.console&&console.log(t)}catch(n){}}var o,i=t("ee"),a=t(15),s={};try{o=localStorage.getItem("__nr_flags").split(","),console&&"function"==typeof console.log&&(s.console=!0,o.indexOf("dev")!==-1&&(s.dev=!0),o.indexOf("nr_dev")!==-1&&(s.nrDev=!0))}catch(c){}s.nrDev&&i.on("internal-error",function(t){r(t.stack)}),s.dev&&i.on("fn-err",function(t,n,e){r(e.stack)}),s.dev&&(r("NR AGENT IN DEVELOPMENT MODE"),r("flags: "+a(s,function(t,n){return t}).join(", ")))},{}],2:[function(t,n,e){function r(t,n,e,r,s){try{p?p-=1:o(s||new UncaughtException(t,n,e),!0)}catch(f){try{i("ierr",[f,c.now(),!0])}catch(d){}}return"function"==typeof u&&u.apply(this,a(arguments))}function UncaughtException(t,n,e){this.message=t||"Uncaught error with no additional information",this.sourceURL=n,this.line=e}function o(t,n){var e=n?null:c.now();i("err",[t,e])}var i=t("handle"),a=t(16),s=t("ee"),c=t("loader"),f=t("gos"),u=window.onerror,d=!1,l="nr@seenError",p=0;c.features.err=!0,t(1),window.onerror=r;try{throw new Error}catch(h){"stack"in h&&(t(8),t(7),"addEventListener"in window&&t(5),c.xhrWrappable&&t(9),d=!0)}s.on("fn-start",function(t,n,e){d&&(p+=1)}),s.on("fn-err",function(t,n,e){d&&!e[l]&&(f(e,l,function(){return!0}),this.thrown=!0,o(e))}),s.on("fn-end",function(){d&&!this.thrown&&p>0&&(p-=1)}),s.on("internal-error",function(t){i("ierr",[t,c.now(),!0])})},{}],3:[function(t,n,e){t("loader").features.ins=!0},{}],4:[function(t,n,e){function r(t){}if(window.performance&&window.performance.timing&&window.performance.getEntriesByType){var o=t("ee"),i=t("handle"),a=t(8),s=t(7),c="learResourceTimings",f="addEventListener",u="resourcetimingbufferfull",d="bstResource",l="resource",p="-start",h="-end",m="fn"+p,w="fn"+h,v="bstTimer",y="pushState",g=t("loader");g.features.stn=!0,t(6);var b=NREUM.o.EV;o.on(m,function(t,n){var e=t[0];e instanceof b&&(this.bstStart=g.now())}),o.on(w,function(t,n){var e=t[0];e instanceof b&&i("bst",[e,n,this.bstStart,g.now()])}),a.on(m,function(t,n,e){this.bstStart=g.now(),this.bstType=e}),a.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),this.bstType])}),s.on(m,function(){this.bstStart=g.now()}),s.on(w,function(t,n){i(v,[n,this.bstStart,g.now(),"requestAnimationFrame"])}),o.on(y+p,function(t){this.time=g.now(),this.startPath=location.pathname+location.hash}),o.on(y+h,function(t){i("bstHist",[location.pathname+location.hash,this.startPath,this.time])}),f in window.performance&&(window.performance["c"+c]?window.performance[f](u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["c"+c]()},!1):window.performance[f]("webkit"+u,function(t){i(d,[window.performance.getEntriesByType(l)]),window.performance["webkitC"+c]()},!1)),document[f]("scroll",r,{passive:!0}),document[f]("keypress",r,!1),document[f]("click",r,!1)}},{}],5:[function(t,n,e){function r(t){for(var n=t;n&&!n.hasOwnProperty(u);)n=Object.getPrototypeOf(n);n&&o(n)}function o(t){s.inPlace(t,[u,d],"-",i)}function i(t,n){return t[1]}var a=t("ee").get("events"),s=t(18)(a,!0),c=t("gos"),f=XMLHttpRequest,u="addEventListener",d="removeEventListener";n.exports=a,"getPrototypeOf"in Object?(r(document),r(window),r(f.prototype)):f.prototype.hasOwnProperty(u)&&(o(window),o(f.prototype)),a.on(u+"-start",function(t,n){var e=t[1],r=c(e,"nr@wrapped",function(){function t(){if("function"==typeof e.handleEvent)return e.handleEvent.apply(e,arguments)}var n={object:t,"function":e}[typeof e];return n?s(n,"fn-",null,n.name||"anonymous"):e});this.wrapped=t[1]=r}),a.on(d+"-start",function(t){t[1]=this.wrapped||t[1]})},{}],6:[function(t,n,e){var r=t("ee").get("history"),o=t(18)(r);n.exports=r,o.inPlace(window.history,["pushState","replaceState"],"-")},{}],7:[function(t,n,e){var r=t("ee").get("raf"),o=t(18)(r),i="equestAnimationFrame";n.exports=r,o.inPlace(window,["r"+i,"mozR"+i,"webkitR"+i,"msR"+i],"raf-"),r.on("raf-start",function(t){t[0]=o(t[0],"fn-")})},{}],8:[function(t,n,e){function r(t,n,e){t[0]=a(t[0],"fn-",null,e)}function o(t,n,e){this.method=e,this.timerDuration=isNaN(t[1])?0:+t[1],t[0]=a(t[0],"fn-",this,e)}var i=t("ee").get("timer"),a=t(18)(i),s="setTimeout",c="setInterval",f="clearTimeout",u="-start",d="-";n.exports=i,a.inPlace(window,[s,"setImmediate"],s+d),a.inPlace(window,[c],c+d),a.inPlace(window,[f,"clearImmediate"],f+d),i.on(c+u,r),i.on(s+u,o)},{}],9:[function(t,n,e){function r(t,n){d.inPlace(n,["onreadystatechange"],"fn-",s)}function o(){var t=this,n=u.context(t);t.readyState>3&&!n.resolved&&(n.resolved=!0,u.emit("xhr-resolved",[],t)),d.inPlace(t,y,"fn-",s)}function i(t){g.push(t),h&&(x?x.then(a):w?w(a):(E=-E,O.data=E))}function a(){for(var t=0;t<g.length;t++)r([],g[t]);g.length&&(g=[])}function s(t,n){return n}function c(t,n){for(var e in t)n[e]=t[e];return n}t(5);var f=t("ee"),u=f.get("xhr"),d=t(18)(u),l=NREUM.o,p=l.XHR,h=l.MO,m=l.PR,w=l.SI,v="readystatechange",y=["onload","onerror","onabort","onloadstart","onloadend","onprogress","ontimeout"],g=[];n.exports=u;var b=window.XMLHttpRequest=function(t){var n=new p(t);try{u.emit("new-xhr",[n],n),n.addEventListener(v,o,!1)}catch(e){try{u.emit("internal-error",[e])}catch(r){}}return n};if(c(p,b),b.prototype=p.prototype,d.inPlace(b.prototype,["open","send"],"-xhr-",s),u.on("send-xhr-start",function(t,n){r(t,n),i(n)}),u.on("open-xhr-start",r),h){var x=m&&m.resolve();if(!w&&!m){var E=1,O=document.createTextNode(E);new h(a).observe(O,{characterData:!0})}}else f.on("fn-end",function(t){t[0]&&t[0].type===v||a()})},{}],10:[function(t,n,e){function r(t){var n=this.params,e=this.metrics;if(!this.ended){this.ended=!0;for(var r=0;r<d;r++)t.removeEventListener(u[r],this.listener,!1);if(!n.aborted){if(e.duration=a.now()-this.startTime,4===t.readyState){n.status=t.status;var i=o(t,this.lastSize);if(i&&(e.rxSize=i),this.sameOrigin){var c=t.getResponseHeader("X-NewRelic-App-Data");c&&(n.cat=c.split(", ").pop())}}else n.status=0;e.cbTime=this.cbTime,f.emit("xhr-done",[t],t),s("xhr",[n,e,this.startTime])}}}function o(t,n){var e=t.responseType;if("json"===e&&null!==n)return n;var r="arraybuffer"===e||"blob"===e||"json"===e?t.response:t.responseText;return h(r)}function i(t,n){var e=c(n),r=t.params;r.host=e.hostname+":"+e.port,r.pathname=e.pathname,t.sameOrigin=e.sameOrigin}var a=t("loader");if(a.xhrWrappable){var s=t("handle"),c=t(11),f=t("ee"),u=["load","error","abort","timeout"],d=u.length,l=t("id"),p=t(14),h=t(13),m=window.XMLHttpRequest;a.features.xhr=!0,t(9),f.on("new-xhr",function(t){var n=this;n.totalCbs=0,n.called=0,n.cbTime=0,n.end=r,n.ended=!1,n.xhrGuids={},n.lastSize=null,p&&(p>34||p<10)||window.opera||t.addEventListener("progress",function(t){n.lastSize=t.loaded},!1)}),f.on("open-xhr-start",function(t){this.params={method:t[0]},i(this,t[1]),this.metrics={}}),f.on("open-xhr-end",function(t,n){"loader_config"in NREUM&&"xpid"in NREUM.loader_config&&this.sameOrigin&&n.setRequestHeader("X-NewRelic-ID",NREUM.loader_config.xpid)}),f.on("send-xhr-start",function(t,n){var e=this.metrics,r=t[0],o=this;if(e&&r){var i=h(r);i&&(e.txSize=i)}this.startTime=a.now(),this.listener=function(t){try{"abort"===t.type&&(o.params.aborted=!0),("load"!==t.type||o.called===o.totalCbs&&(o.onloadCalled||"function"!=typeof n.onload))&&o.end(n)}catch(e){try{f.emit("internal-error",[e])}catch(r){}}};for(var s=0;s<d;s++)n.addEventListener(u[s],this.listener,!1)}),f.on("xhr-cb-time",function(t,n,e){this.cbTime+=t,n?this.onloadCalled=!0:this.called+=1,this.called!==this.totalCbs||!this.onloadCalled&&"function"==typeof e.onload||this.end(e)}),f.on("xhr-load-added",function(t,n){var e=""+l(t)+!!n;this.xhrGuids&&!this.xhrGuids[e]&&(this.xhrGuids[e]=!0,this.totalCbs+=1)}),f.on("xhr-load-removed",function(t,n){var e=""+l(t)+!!n;this.xhrGuids&&this.xhrGuids[e]&&(delete this.xhrGuids[e],this.totalCbs-=1)}),f.on("addEventListener-end",function(t,n){n instanceof m&&"load"===t[0]&&f.emit("xhr-load-added",[t[1],t[2]],n)}),f.on("removeEventListener-end",function(t,n){n instanceof m&&"load"===t[0]&&f.emit("xhr-load-removed",[t[1],t[2]],n)}),f.on("fn-start",function(t,n,e){n instanceof m&&("onload"===e&&(this.onload=!0),("load"===(t[0]&&t[0].type)||this.onload)&&(this.xhrCbStart=a.now()))}),f.on("fn-end",function(t,n){this.xhrCbStart&&f.emit("xhr-cb-time",[a.now()-this.xhrCbStart,this.onload,n],n)})}},{}],11:[function(t,n,e){n.exports=function(t){var n=document.createElement("a"),e=window.location,r={};n.href=t,r.port=n.port;var o=n.href.split("://");!r.port&&o[1]&&(r.port=o[1].split("/")[0].split("@").pop().split(":")[1]),r.port&&"0"!==r.port||(r.port="https"===o[0]?"443":"80"),r.hostname=n.hostname||e.hostname,r.pathname=n.pathname,r.protocol=o[0],"/"!==r.pathname.charAt(0)&&(r.pathname="/"+r.pathname);var i=!n.protocol||":"===n.protocol||n.protocol===e.protocol,a=n.hostname===document.domain&&n.port===e.port;return r.sameOrigin=i&&(!n.hostname||a),r}},{}],12:[function(t,n,e){function r(){}function o(t,n,e){return function(){return i(t,[f.now()].concat(s(arguments)),n?null:this,e),n?void 0:this}}var i=t("handle"),a=t(15),s=t(16),c=t("ee").get("tracer"),f=t("loader"),u=NREUM;"undefined"==typeof window.newrelic&&(newrelic=u);var d=["setPageViewName","setCustomAttribute","setErrorHandler","finished","addToTrace","inlineHit","addRelease"],l="api-",p=l+"ixn-";a(d,function(t,n){u[n]=o(l+n,!0,"api")}),u.addPageAction=o(l+"addPageAction",!0),u.setCurrentRouteName=o(l+"routeName",!0),n.exports=newrelic,u.interaction=function(){return(new r).get()};var h=r.prototype={createTracer:function(t,n){var e={},r=this,o="function"==typeof n;return i(p+"tracer",[f.now(),t,e],r),function(){if(c.emit((o?"":"no-")+"fn-start",[f.now(),r,o],e),o)try{return n.apply(this,arguments)}catch(t){throw c.emit("fn-err",[arguments,this,t],e),t}finally{c.emit("fn-end",[f.now()],e)}}}};a("setName,setAttribute,save,ignore,onEnd,getContext,end,get".split(","),function(t,n){h[n]=o(p+n)}),newrelic.noticeError=function(t){"string"==typeof t&&(t=new Error(t)),i("err",[t,f.now()])}},{}],13:[function(t,n,e){n.exports=function(t){if("string"==typeof t&&t.length)return t.length;if("object"==typeof t){if("undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer&&t.byteLength)return t.byteLength;if("undefined"!=typeof Blob&&t instanceof Blob&&t.size)return t.size;if(!("undefined"!=typeof FormData&&t instanceof FormData))try{return JSON.stringify(t).length}catch(n){return}}}},{}],14:[function(t,n,e){var r=0,o=navigator.userAgent.match(/Firefox[\/\s](\d+\.\d+)/);o&&(r=+o[1]),n.exports=r},{}],15:[function(t,n,e){function r(t,n){var e=[],r="",i=0;for(r in t)o.call(t,r)&&(e[i]=n(r,t[r]),i+=1);return e}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],16:[function(t,n,e){function r(t,n,e){n||(n=0),"undefined"==typeof e&&(e=t?t.length:0);for(var r=-1,o=e-n||0,i=Array(o<0?0:o);++r<o;)i[r]=t[n+r];return i}n.exports=r},{}],17:[function(t,n,e){n.exports={exists:"undefined"!=typeof window.performance&&window.performance.timing&&"undefined"!=typeof window.performance.timing.navigationStart}},{}],18:[function(t,n,e){function r(t){return!(t&&t instanceof Function&&t.apply&&!t[a])}var o=t("ee"),i=t(16),a="nr@original",s=Object.prototype.hasOwnProperty,c=!1;n.exports=function(t,n){function e(t,n,e,o){function nrWrapper(){var r,a,s,c;try{a=this,r=i(arguments),s="function"==typeof e?e(r,a):e||{}}catch(f){l([f,"",[r,a,o],s])}u(n+"start",[r,a,o],s);try{return c=t.apply(a,r)}catch(d){throw u(n+"err",[r,a,d],s),d}finally{u(n+"end",[r,a,c],s)}}return r(t)?t:(n||(n=""),nrWrapper[a]=t,d(t,nrWrapper),nrWrapper)}function f(t,n,o,i){o||(o="");var a,s,c,f="-"===o.charAt(0);for(c=0;c<n.length;c++)s=n[c],a=t[s],r(a)||(t[s]=e(a,f?s+o:o,i,s))}function u(e,r,o){if(!c||n){var i=c;c=!0;try{t.emit(e,r,o,n)}catch(a){l([a,e,r,o])}c=i}}function d(t,n){if(Object.defineProperty&&Object.keys)try{var e=Object.keys(t);return e.forEach(function(e){Object.defineProperty(n,e,{get:function(){return t[e]},set:function(n){return t[e]=n,n}})}),n}catch(r){l([r])}for(var o in t)s.call(t,o)&&(n[o]=t[o]);return n}function l(n){try{t.emit("internal-error",n)}catch(e){}}return t||(t=o),e.inPlace=f,e.flag=a,e}},{}],ee:[function(t,n,e){function r(){}function o(t){function n(t){return t&&t instanceof r?t:t?c(t,s,i):i()}function e(e,r,o,i){if(!l.aborted||i){t&&t(e,r,o);for(var a=n(o),s=h(e),c=s.length,f=0;f<c;f++)s[f].apply(a,r);var d=u[y[e]];return d&&d.push([g,e,r,a]),a}}function p(t,n){v[t]=h(t).concat(n)}function h(t){return v[t]||[]}function m(t){return d[t]=d[t]||o(e)}function w(t,n){f(t,function(t,e){n=n||"feature",y[e]=n,n in u||(u[n]=[])})}var v={},y={},g={on:p,emit:e,get:m,listeners:h,context:n,buffer:w,abort:a,aborted:!1};return g}function i(){return new r}function a(){(u.api||u.feature)&&(l.aborted=!0,u=l.backlog={})}var s="nr@context",c=t("gos"),f=t(15),u={},d={},l=n.exports=o();l.backlog=u},{}],gos:[function(t,n,e){function r(t,n,e){if(o.call(t,n))return t[n];var r=e();if(Object.defineProperty&&Object.keys)try{return Object.defineProperty(t,n,{value:r,writable:!0,enumerable:!1}),r}catch(i){}return t[n]=r,r}var o=Object.prototype.hasOwnProperty;n.exports=r},{}],handle:[function(t,n,e){function r(t,n,e,r){o.buffer([t],r),o.emit(t,n,e)}var o=t("ee").get("handle");n.exports=r,r.ee=o},{}],id:[function(t,n,e){function r(t){var n=typeof t;return!t||"object"!==n&&"function"!==n?-1:t===window?0:a(t,i,function(){return o++})}var o=1,i="nr@id",a=t("gos");n.exports=r},{}],loader:[function(t,n,e){function r(){if(!x++){var t=b.info=NREUM.info,n=l.getElementsByTagName("script")[0];if(setTimeout(u.abort,3e4),!(t&&t.licenseKey&&t.applicationID&&n))return u.abort();f(y,function(n,e){t[n]||(t[n]=e)}),c("mark",["onload",a()+b.offset],null,"api");var e=l.createElement("script");e.src="https://"+t.agent,n.parentNode.insertBefore(e,n)}}function o(){"complete"===l.readyState&&i()}function i(){c("mark",["domContent",a()+b.offset],null,"api")}function a(){return E.exists&&performance.now?Math.round(performance.now()):(s=Math.max((new Date).getTime(),s))-b.offset}var s=(new Date).getTime(),c=t("handle"),f=t(15),u=t("ee"),d=window,l=d.document,p="addEventListener",h="attachEvent",m=d.XMLHttpRequest,w=m&&m.prototype;NREUM.o={ST:setTimeout,SI:d.setImmediate,CT:clearTimeout,XHR:m,REQ:d.Request,EV:d.Event,PR:d.Promise,MO:d.MutationObserver};var v=""+location,y={beacon:"bam.nr-data.net",errorBeacon:"bam.nr-data.net",agent:"js-agent.newrelic.com/nr-1071.min.js"},g=m&&w&&w[p]&&!/CriOS/.test(navigator.userAgent),b=n.exports={offset:s,now:a,origin:v,features:{},xhrWrappable:g};t(12),l[p]?(l[p]("DOMContentLoaded",i,!1),d[p]("load",r,!1)):(l[h]("onreadystatechange",o),d[h]("onload",r)),c("mark",["firstbyte",s],null,"api");var x=0,E=t(17)},{}]},{},["loader",2,10,4,3]);</script>

    <title>Automated quantitative histology reveals vascular morphodynamics during Arabidopsis hypocotyl secondary growth | eLife</title>

    <meta name="viewport" content="width=device-width,initial-scale=1,shrink-to-fit=no">

    <meta name="format-detection" content="telephone=no">

    
    <style>
                @font-face{font-display:fallback;font-family:"Noto Sans";src:url(/assets/patterns/fonts/NotoSans-Regular-webfont-custom-2-subsetting.6f6e1e25.woff2) format("woff2")}@font-face{font-display:fallback;font-family:"Noto Sans";src:url(/assets/patterns/fonts/NotoSans-SemiBold-webfont-custom-2-subsetting.aa6d8116.woff2) format("woff2");font-weight:700}@font-face{font-display:fallback;font-family:"Noto Serif";src:url(/assets/patterns/fonts/NotoSerif-Regular-webfont-custom-2-subsetting.a00f980c.woff2) format("woff2")}@font-face{font-display:fallback;font-family:"Noto Serif";src:url(/assets/patterns/fonts/NotoSerif-Bold-webfont-basic-latin-subsetting.631d8fb6.woff2) format("woff2");font-weight:700}html{font-family:sans-serif;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}header,main,nav,section{display:block}picture{display:inline-block;vertical-align:baseline}a{background-color:transparent}h1{font-size:2em;margin:.67em 0}img{border:0}svg:not(:root){overflow:hidden}button,input{font:inherit;margin:0}button{overflow:visible}button{text-transform:none}button{-webkit-appearance:button}button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0}button:-moz-focusring,input:-moz-focusring{outline:ButtonText dotted 1px}input{line-height:normal}input[type=checkbox]{box-sizing:border-box;padding:0}input[type=search]{-webkit-appearance:textfield}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em}*,:after,:before{box-sizing:border-box}body,html{height:100%}body{background-color:#fff;color:#212121;text-rendering:optimizeLegibility}h1{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:700;font-size:36px;font-size:2.25rem;line-height:1.33333;font-size:36px;font-size:2.25rem;margin:0}h2{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:700;font-size:26px;font-size:1.625rem;line-height:1.15385;margin:0;padding-bottom:21px;padding-bottom:1.3125rem;padding-top:21px;padding-top:1.3125rem}p{font-family:"Noto Serif",serif;font-size:16px;font-size:1rem;line-height:1.5;font-weight:400;margin:0;margin-bottom:24px;margin-bottom:1.5rem}a{color:#0288d1;text-decoration:none}ol,ul{margin-bottom:24px;margin-bottom:1.5rem;margin-top:0;padding-left:48px;padding-left:3rem}li{font-family:"Noto Serif",serif;font-size:16px;font-size:1rem;line-height:1.5;font-weight:400}.hidden{display:none}.visuallyhidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.clearfix{zoom:1}.clearfix:after,.clearfix:before{content:"";display:table}.clearfix:after{clear:both}.global-inner:after{content:"";display:block;clear:both}main{border-top:1px solid #e0e0e0}img{max-height:100%;max-width:100%}input[type=checkbox]{margin-right:6px;margin-right:.375rem}::-webkit-input-placeholder{color:#bdbdbd}::-moz-placeholder{color:#bdbdbd}:-ms-input-placeholder{color:#bdbdbd}:-moz-placeholder{color:#bdbdbd}.grid-column{margin-bottom:48px;margin-bottom:3rem}@media only all and (min-width:45.625em){.grid-column{margin-bottom:72px;margin-bottom:4.5rem}}.grid-secondary-column__item{margin-bottom:48px;margin-bottom:3rem}@media only all and (min-width:45.625em){.grid-secondary-column__item{margin-bottom:72px;margin-bottom:4.5rem}}.wrapper{box-sizing:content-box;max-width:1114px;max-width:69.625rem;margin:auto;padding-left:7%;padding-right:7%}@media only screen and (min-width:45.625em){.wrapper{padding-left:14%;padding-right:14%}}@media only screen and (min-width:75em){.wrapper{padding-left:3%;padding-right:3%}}.wrapper.wrapper--site-header{padding:0}.wrapper.wrapper--content{padding-top:24px;padding-top:1.5rem}@media only all and (min-width:45.625em){.wrapper.wrapper--content{padding-top:48px;padding-top:3rem}}.content-header-image-wrapper+.wrapper.wrapper--listing,.content-header-simple+.wrapper.wrapper--listing{padding-top:0}.grid{list-style:none;margin:0;padding:0;margin-left:-1.6%;margin-right:-1.6%;zoom:1}.grid:after,.grid:before{content:"";display:table}.grid:after{clear:both}.grid__item{float:left;padding-left:1.6%;padding-right:1.6%;width:100%;box-sizing:border-box}.one-whole{width:100%}[class*=push--]{position:relative}@media only screen and (min-width:900px){.large--eight-twelfths{min-height:1px;width:66.666%}.large--ten-twelfths{min-height:1px;width:83.333%}.push--large--one-twelfth{left:8.333%}}@media only screen and (min-width:1200px){.x-large--two-twelfths{min-height:1px;width:16.666%}.x-large--seven-twelfths{min-height:1px;width:58.333%}.x-large--eight-twelfths{min-height:1px;width:66.666%}.push--x-large--zero{left:0}.push--x-large--two-twelfths{left:16.666%}}.button{border:none;border-radius:4px;color:#fff;display:inline-block;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1;font-weight:500;padding:17px 40px 16px;padding:1.0625rem 2.5rem 1rem;text-align:center;text-decoration:none;text-transform:uppercase}.button--default{background-color:#0288d1;border:1px solid #0288d1;color:#fff;padding:15px 36px 14px;padding:.9375rem 2.25rem .875rem}.button--extra-small{border-radius:3px;font-size:11px;font-size:.6875rem;line-height:2.1818181818;padding:0 6px;padding:0 .375rem;height:24px;height:1.5rem}.button--login{border-radius:3px;font-size:11px;font-size:.6875rem;line-height:2.1818181818;padding:0 6px;padding:0 .375rem;height:24px;height:1.5rem;background:url(/assets/patterns/img/icons/orcid.10f6112b.png) 3px 3px no-repeat #629f43;background:url(/assets/patterns/img/icons/orcid.b96370b9.svg) 3px 3px no-repeat #629f43;background-color:#629f43;border:1px solid #629f43;color:#fff;padding-left:23px;padding-left:1.4375rem}.date{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:inherit;text-transform:capitalize}.doi{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:#888}.doi a.doi__link{border-bottom:none;color:#888;text-decoration:none;text-transform:none}.doi--article-section{color:#212121;display:block;font-size:14px;font-size:.875rem;margin-bottom:24px;margin-bottom:1.5rem}.doi--article-section a.doi__link{color:#212121}.main-menu .list-heading{padding-left:0;padding-right:0;padding-top:24px;padding-top:1.5rem;padding-bottom:24px;padding-bottom:1.5rem;text-align:center}.js .main-menu .list-heading{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.media-source__fallback_link{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;text-decoration:none}.see-more-link{display:block;color:#212121;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5;text-decoration:none}.social-media-sharers{-ms-flex-positive:0;flex-grow:0;-ms-flex-preferred-size:24px;flex-basis:24px}.social-media-sharer,.social-media-sharer__icon{display:inline-block}.social-media-sharer{background-color:#212121;border-radius:3px;color:#fff;margin:0 8px;height:24px;padding:2px 0;text-decoration:none;width:24px}.content-header--image .social-media-sharer{background-color:transparent;border:1px solid #fff;padding:1px 0}.content-header:not(.content-header--image) .social-media-sharer:active,.content-header:not(.content-header--image) .social-media-sharer:hover{background-color:#0288d1}.social-media-sharer__icon svg{width:16px;height:16px;margin-right:7px;vertical-align:top}.social-media-sharer__icon_wrapper--small svg{margin:0;vertical-align:middle}.social-media-sharer__icon--solid{fill:#fff;stroke:none}.speech-bubble{background-color:#0288d1;border:1px solid #0288d1;color:#fff;border-radius:3px;display:block;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:2.57143;height:36px;height:2.25rem;padding:0;position:relative;text-align:center;text-decoration:none;width:42px;width:2.625rem}.speech-bubble[data-behaviour~=HypothesisOpener]{display:none}.speech-bubble:after{border-style:solid;border-width:20px;border-color:transparent;border-left-color:#0288d1;border-right-width:0;content:"";height:0;width:0;left:8px;position:absolute;top:8px;z-index:-1}.speech-bubble:after:hover{border-left-color:#0277bd}.speech-bubble:hover{background-color:#0277bd;border-color:#0277bd}.speech-bubble:hover:after{border-left-color:#0277bd}.speech-bubble__inner{display:inline-block}.speech-bubble--inline{margin-left:12px;margin-left:.75rem}.speech-bubble--small{display:inline-block;font-size:11px;font-size:.6875rem;line-height:1.27273;height:14px;height:.875rem;min-width:2em;padding-left:4px;padding-right:4px;width:auto}.speech-bubble--small:after{border-style:solid;border-width:3px;border-color:transparent;border-left-color:#0288d1;border-right-width:0;content:"";height:0;width:0;left:5px;top:10px}.speech-bubble--has-placeholder{font-family:"Noto Serif",serif;font-size:48px;font-size:3rem;line-height:.75;padding-top:12px;padding-top:.75rem}.speech-bubble--loading{position:relative}.speech-bubble--loading::before{animation:1s steps(4,end) infinite ellipsis;box-sizing:content-box;content:"\2026";display:block;left:0;overflow:hidden;padding-left:4px;padding-left:.25rem;position:absolute;top:0;white-space:nowrap;width:0}@keyframes ellipsis{from{width:0}to{width:55%}}.speech-bubble[disabled]{background-color:#e0e0e0;border-color:#e0e0e0}.speech-bubble[disabled]:after{border-left-color:#e0e0e0;left:5px;top:10px}.js .main-menu .to-top-link{display:none}.article-section--first{border:none;padding-top:0}.article-section--first .article-section__header:first-child h2{margin-top:0;padding-top:0}.article-section__header{position:relative}.article-section__header_text{color:#212121;margin:0;-ms-flex:1 0 80%;flex:1 0 80%;text-decoration:none}.article-section__body{font-family:"Noto Serif",serif;font-size:16px;font-size:1rem;line-height:1.5;font-weight:400}.js .carousel-item__meta .meta{color:inherit;line-height:1;font-size:12px;font-size:.75rem}.js .carousel-item__meta .meta__type:hover{color:inherit}.compact-form__container{border:none;margin:0 auto;max-width:440px;max-width:27.5rem;padding:0;position:relative}.search-box__inner .compact-form__container{max-width:none}.compact-form__input{background-color:#fff;border:1px solid #e0e0e0;border-right:none;border-radius:3px;display:block;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5;padding:11px 55px 11px 12px;padding:.6875rem 3.4375rem .6875rem .75rem;width:100%}.compact-form__submit{background:url(/assets/patterns/img/icons/arrow-forward.004934f6.png);background:url(/assets/patterns/img/icons/arrow-forward.663dc5c2.svg),linear-gradient(transparent,transparent);background-color:#0288d1;background-position:50% 50%;background-repeat:no-repeat;border:none;border-radius:0 3px 3px 0;color:#fff;height:48px;height:3rem;position:absolute;right:0;top:0;width:47px;width:2.9375rem}.compact-form__reset{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.contextual-data{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;color:#888}.contextual-data__list{border-bottom:1px solid #e0e0e0;margin:0;padding:11px 0;padding:.6875rem 0;text-align:center}.contextual-data__item{display:inline-block;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:#888;margin:0;padding:0 5px 0 0;padding:0 .3125rem 0 0}.contextual-data__item a{color:inherit}.contextual-data__item a:hover{color:#0288d1}.contextual-data__item__hypothesis_opener{display:none}.js .contextual-data__item__hypothesis_opener{color:#0288d1;display:inline-block}.contextual-data__cite_wrapper{border-bottom:1px solid #e0e0e0;padding-top:12px;padding-top:.75rem;padding-bottom:11px;padding-bottom:.6875rem;padding-left:0;padding-right:0;text-align:center}.contextual-data__cite{display:none}@media only screen and (min-width:56.25rem){.contextual-data{border-bottom:1px solid #e0e0e0;display:-ms-flexbox;display:flex}.contextual-data__list{-ms-flex-item-align:center;-ms-grid-row-align:center;align-self:center;border-bottom:none;display:inline-block;text-align:left}.contextual-data__cite_wrapper{border-bottom:none;float:right;margin-left:auto;padding:11px 0;padding:.6875rem 0;text-align:start}.contextual-data__cite{-ms-flex-item-align:center;-ms-grid-row-align:center;align-self:center;display:inline-block;-ms-flex:1;flex:1;text-align:right;padding:0 5px 0 0;padding:0 .3125rem 0 0}.contextual-data__cite_label{text-transform:uppercase}}.login-control__icon{width:35px}.login-control__non_js_control_link{color:#212121;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;font-weight:400;text-decoration:underline;text-transform:none;display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:29vw}.login-control__non_js_control_link:hover{text-decoration:underline}.js .login-control__non_js_control_link{display:none}.login-control__controls{border-radius:3px;box-shadow:0 2px 6px 0 rgba(0,0,0,.5);background-color:#fff;border:1px solid #e0e0e0;color:#212121;max-width:200px;max-width:12.5rem;margin:0;padding:0;position:absolute;right:12px;list-style-type:none}.login-control__control{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:2.57143;margin:0;padding-bottom:0;padding-top:12px;padding-top:.75rem;padding-right:18px;padding-right:1.125rem;padding-left:18px;padding-left:1.125rem}.login-control__control:first-child{border-bottom:1px solid #e0e0e0;padding-bottom:17px;padding-bottom:1.0625rem;padding-top:18px;padding-top:1.125rem}.login-control__control:last-child{margin-top:0;padding-bottom:12px;padding-bottom:.75rem}.login-control__control:last-child:not(.login-control__control:first-child){padding-top:0}.login-control__link{color:#212121;text-transform:none}.login-control__display_name{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap;max-width:200px;max-width:12.5rem;font-size:16px;font-size:1rem;line-height:1.5}.login-control__display_name+.login-control__subsidiary_text{font-size:14px;font-size:.875rem;line-height:1.71429}.main-menu__section{padding-bottom:15px;padding-bottom:.9375rem}.main-menu__title{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1;font-weight:700;text-transform:uppercase;margin:0;padding:0;padding-bottom:5px;padding-bottom:.3125rem;text-transform:uppercase}.main-menu__list{list-style:none;margin:0;padding:0;margin-left:auto;margin-right:auto}.main-menu__list_item{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5;font-size:16px;font-size:1rem;line-height:3;margin:0;padding:0;text-align:center;border-top:1px solid #e0e0e0;display:block;padding-top:11px;padding-top:.6875rem;padding-right:0;padding-bottom:12px;padding-bottom:.75rem;padding-left:0}.main-menu__list_link{color:#212121;text-decoration:none}.main-menu__close_control{background:url(/assets/patterns/img/icons/close-1x.638f23c6.png) no-repeat #fff;background:url(/assets/patterns/img/icons/close.f00467a1.svg) center right/14px 14px no-repeat,linear-gradient(transparent,transparent);border:none;color:#212121;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5;font-size:16px;font-size:1rem;line-height:3;margin:0;padding:0;text-align:center;display:block;padding-top:11px;padding-top:.6875rem;padding-right:24px;padding-right:1.5rem;padding-bottom:12px;padding-bottom:.75rem;padding-left:0;position:relative;left:-24px;text-align:right;width:100%}.main-menu--js{display:none}.main-menu--js .main-menu__container{display:block}.main-menu--js .main-menu__list_item{padding:0 24px;padding:0 1.5rem;text-align:left}.main-menu--js.main-menu--shown{background-color:#fff;color:#212121;display:block;float:left;left:-3000px;height:100vh;width:17.5rem;max-width:90vw;overflow:auto;position:fixed;top:0;transform:translate3d(3000px,0,0);z-index:40}.main-menu--js.main-menu--shown .main-menu__list_item{padding-top:11px;padding-top:.6875rem;padding-bottom:12px;padding-bottom:.75rem}.main-menu--js .main_menu__quit{display:none}.meta{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:#888}.highlights .meta{display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.meta__type{color:inherit;text-decoration:none;text-transform:uppercase}a.meta__type:hover{color:#0277bd}.search-box{position:relative}.search-box:not(.search-box--js){padding-top:48px;padding-top:3rem}.search-box__inner{max-width:1114px;padding:0 6%;position:relative}.wrapper .search-box__inner{padding-left:0;padding-right:0}@media only all and (min-width:1114px){.search-box__inner{margin:0 auto;padding:0 66px;padding:0 4.125rem}}.nav-primary{background-color:#fff;border-top:1px solid #e0e0e0;clear:right;padding:0 5px;padding:0 .3125rem;position:relative;z-index:10}.nav-primary__list{height:54px;height:3.375rem;margin:0;padding:7px 0 0;vertical-align:middle}@supports (display:flex){.nav-primary__list{-ms-flex-align:center;align-items:center;display:-ms-flexbox;display:flex;padding-top:0}}.nav-primary__item{float:left;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;font-weight:700;list-style-type:none;padding:9px 12px 0 0;padding:.5625rem .75rem 0 0;text-transform:uppercase}@supports (display:flex){.nav-primary__item{padding-top:0}.nav-primary__menu_icon{margin-top:-2px}}.nav-primary a:link,.nav-primary a:visited{color:#212121;text-decoration:none}.nav-primary__item--search{float:right;margin-left:auto;padding-right:8px;padding-right:.5rem}.nav-primary__menu_icon{border:none;box-sizing:content-box;display:block;float:left;height:24px;padding:0 3px;width:24px}.nav-primary__search_icon{display:block;height:24px;width:24px}.nav-primary__item--first a{display:inline-block;margin-bottom:-6px}@media only all and (max-width:21.25rem){.nav-primary__menu_text{padding-bottom:0;border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}.nav-primary__item--first{padding:0}.nav-primary__menu_icon{margin:0 8px 0 0;margin:0 .5rem 0 0;margin-top:-3px}}.nav-secondary{background-color:#fff;float:right;height:40px;padding-top:8px;position:relative;z-index:15}.nav-secondary__list{-ms-flex-align:baseline;align-items:baseline;height:40px;height:2.5rem;-ms-flex-pack:end;justify-content:flex-end;margin:0;padding:0;vertical-align:middle}@supports (display:flex){.nav-secondary__list{display:-ms-flexbox;display:flex}}.nav-secondary__item{float:left;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;font-weight:700;font-size:11px;font-size:.6875rem;line-height:2.18182;height:24px;height:1.5rem;list-style-type:none;padding:0 12px 0 0;padding:0 .75rem 0 0;text-transform:uppercase}.nav-secondary__item--hide-narrow{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}@media only all and (min-width:45.625em){.nav-secondary__item--hide-narrow{clip:auto;height:auto;margin:0;overflow:auto;position:static;width:auto;overflow:hidden;height:24px;height:1.5rem;margin:0 12px 0 0;margin:0 .75rem 0 0}}.nav-secondary__item a:not(.login-control__non_js_control_link){text-decoration:none}.nav-secondary__item a:not(.login-control__non_js_control_link):link,.nav-secondary__item a:not(.login-control__non_js_control_link):visited{color:#212121}.nav-secondary__item a:not(.login-control__non_js_control_link).button:active,.nav-secondary__item a:not(.login-control__non_js_control_link).button:hover,.nav-secondary__item a:not(.login-control__non_js_control_link).button:link,.nav-secondary__item a:not(.login-control__non_js_control_link).button:visited{color:#fff}.view-selector{margin-bottom:36px;margin-bottom:2.25rem}.view-selector__list{background-color:#fff;list-style:none;margin:0;padding:0}.view-selector__list-item{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;margin:0;margin-bottom:12px;margin-bottom:.75rem}.view-selector__link{display:block;text-decoration:none}.view-selector__link span{display:inline-block}.view-selector__link:hover{color:#212121}.view-selector__list-item--active{color:#212121}.view-selector__list-item--active .view-selector__link{color:#212121}.view-selector__link{color:#888}.view-selector__jump_link{color:#888}.view-selector__jump_link--active{color:#212121}.view-selector__jump_links_header{color:#888;display:block;font-size:14px;font-size:.875rem;margin-bottom:12px;margin-bottom:.75rem}.js .view-selector__jump_links_header:before{border-style:solid;border-width:5px;border-color:transparent;border-bottom-width:0;border-top-color:#888;content:"";height:0;width:0;margin-left:-15px;margin-left:-.9375rem;margin-right:-12px;margin-right:-.75rem;margin-top:9px;margin-top:.5625rem;display:block;float:left}.js .view-selector__jump_links_header--closed:before{border-style:solid;border-width:5px;border-color:transparent;border-left-color:#888;border-right-width:0;content:"";height:0;width:0;margin-top:5px;margin-top:.3125rem;margin-left:-12px;margin-left:-.75rem;margin-right:-12px;margin-right:-.75rem;margin-top:6px;margin-top:.375rem}.view-selector__jump_links{list-style:none;margin:0;padding:0;padding-left:18px;padding-left:1.125rem}.view-selector__jump_link_item{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;margin:0;margin-bottom:12px;margin-bottom:.75rem}.view-selector__jump_link{text-decoration:none}.view-selector__jump_link:hover{color:#212121}@media only screen and (max-width:74.9375em){.view-selector{display:none}.view-selector--has-figures{display:inline-block;width:100%}@supports (display:flex){.view-selector--has-figures{display:-ms-flexbox;display:flex}}.view-selector__list{margin:auto;max-width:375px;max-width:23.4375rem;width:100%}.view-selector__list-item{border:1px solid #212121;float:left;margin:0;padding:0 6px;padding:0 .375rem;text-align:center;width:50%}.view-selector__list-item--article{border-right:none;border-radius:4px 0 0 4px}.view-selector__list-item--figures{border-left:none;border-radius:0 4px 4px 0}.view-selector__list-item--active{background-color:#212121}.view-selector__list-item--active .view-selector__link{color:#fff}.view-selector__list-item--side-by-side{display:none}.view-selector__list-item--jump{display:none}.view-selector__link{font-size:14px;font-size:.875rem;line-height:2.57143;height:34px;height:2.125rem;margin:0;padding:0;text-align:center}.view-selector__link span{padding:0}.view-selector__link--figures{color:#212121}}@media only screen and (min-width:75em){.view-selector{margin-left:-1.6vw;max-width:210px;max-width:13.125rem;padding-left:1.6vw;width:16.666vw}.view-selector--fixed{max-height:100vh;min-height:11rem;overflow:auto;padding-top:30px;padding-top:1.875rem;position:fixed;top:0}}.content-header-profile{padding-top:24px;padding-top:1.5rem;padding-bottom:24px;padding-bottom:1.5rem;box-sizing:content-box;max-width:1114px;max-width:69.625rem;margin:auto;font-family:"Noto Sans",Arial,Helvetica,sans-serif;padding-left:6%;padding-right:6%;position:relative;text-align:center}@media only all and (min-width:45.625em){.content-header-profile{padding-top:48px;padding-top:3rem}.content-header-profile{padding-bottom:48px;padding-bottom:3rem}}.content-header-profile__display_name{font-size:20px;font-size:1.25rem;line-height:2.4;font-weight:700;margin:0;padding:0}.content-header-profile__details{font-size:16px;font-size:1rem;line-height:1.5}.content-header-profile__affiliations{margin:0;padding:0;list-style:none}.content-header-profile__affiliations:empty{display:none}.content-header-profile__affiliation{display:inline;font-family:"Noto Sans",Arial,Helvetica,sans-serif}.content-header-profile__affiliation:after{content:"; "}.content-header-profile__affiliation:last-child:after{content:""}.content-header-profile__orcid .orcid__id{color:inherit}.content-header-profile__email{word-break:break-all}.content-header-profile__links{list-style:none;margin:0;padding:0}.js .content-header-profile__links{display:none}.content-header-profile__link{color:#212121;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;font-weight:400;text-decoration:underline;text-transform:none}.content-header-profile__link:hover{text-decoration:underline}.content-header-profile__link--logout{position:absolute;right:24px;top:24px}.content-header-simple{padding-top:24px;padding-top:1.5rem;padding-bottom:24px;padding-bottom:1.5rem;padding-left:6%;padding-right:6%;text-align:center}@media only all and (min-width:45.625em){.content-header-simple{padding-top:48px;padding-top:3rem}.content-header-simple{padding-bottom:48px;padding-bottom:3rem}}.content-header-simple__title{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:700;font-size:26px;font-size:1.625rem;line-height:1.15385;color:#212121;font-size:20px;font-size:1.25rem;line-height:1.2;margin:0;padding:0}.content-header-simple__strapline{color:#212121;font-family:"Noto Serif",serif;font-size:16px;font-size:1rem;line-height:1.5;font-weight:400;margin:0;padding:0}.content-header{box-sizing:content-box;max-width:1114px;max-width:69.625rem;margin:auto;color:#212121;padding-top:0;padding-bottom:23px;padding-bottom:1.4375rem;position:relative;text-align:center}.content-header.wrapper{padding-bottom:0}.content-header.wrapper:after{border-bottom:1px solid #e0e0e0;content:"";display:block;padding-top:23px;padding-top:1.4375rem;width:100%}.content-header--read-more .content-header__subject_list{width:100%}.content-header-image-wrapper--no-credit{padding-bottom:48px;padding-bottom:3rem}.content-header__body{margin-top:48px;margin-top:3rem;margin-bottom:24px;margin-bottom:1.5rem}.content-header--header .content-header__body{margin-top:60px;margin-top:3.75rem}.content-header--image{border-bottom:none;color:#fff;height:264px;overflow:hidden;padding-bottom:0}.content-header--image .content-header__body{height:132px;display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;-ms-flex-pack:center;justify-content:center;padding:0 12px;padding:0 .75rem}.content-header--has-social-media-sharers .content-header--image .content-header__body{min-height:192px}.content-header--image .social-media-sharers{position:absolute;left:0;right:0;bottom:52px}@media only all and (max-width:45.5625em){.content-header--image.content-header--has-profile .content-header__body{display:block;margin-top:0;margin-bottom:0}}.content-header__title{font-size:36px;font-size:2.25rem;line-height:1.33333;margin-top:0;margin-top:0;margin-bottom:24px;margin-bottom:1.5rem}@media only all and (min-width:45.625em){.content-header--header .content-header__body{margin-top:72px;margin-top:4.5rem}.content-header--image{height:288px}.content-header--image .content-header__body{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-align:center;align-items:center;-ms-flex-line-pack:center;align-content:center;-ms-flex-pack:center;justify-content:center;padding:0 48px;padding:0 3rem;margin-top:48px;margin-top:3rem;margin-bottom:24px;margin-bottom:1.5rem}.content-header__title{font-size:41px;font-size:2.5625rem;line-height:1.17073}}@media only all and (min-width:56.25em){.content-header--image{min-height:336px}.content-header--image .content-header__body{height:168px}.content-header--has-social-media-sharers .content-header--image .content-header__body{min-height:216px}.content-header__title{font-size:46px;font-size:2.875rem;line-height:1.56522}}.content-header--header .content-header__title,.content-header--read-more .content-header__title{font-size:29px;font-size:1.8125rem;line-height:1.24138}.content-header__title_link{color:inherit;text-decoration:inherit}@media only all and (min-width:45.625em){.content-header--header .content-header__title,.content-header--read-more .content-header__title{font-size:36px;font-size:2.25rem;line-height:1.33333}.content-header--image .content-header__body{margin-top:72px;margin-top:4.5rem}}.content-header--image .content-header__title{font-size:41px;font-size:2.5625rem;line-height:1.17073;margin-bottom:0;height:132px;display:-ms-flexbox;display:flex;-ms-flex-pack:center;justify-content:center;-ms-flex-item-align:center;align-self:center;-ms-flex-align:center;align-items:center}@media only all and (min-width:45.625em){.content-header--image .content-header__title{font-size:52px;font-size:3.25rem;height:auto;display:block}}.content-header--image .content-header__title.content-header__title--xx-short{font-size:46px;font-size:2.875rem}@media only all and (min-width:30em){.content-header--image .content-header__title.content-header__title--xx-short{font-size:52px;font-size:3.25rem}}.content-header--image .content-header__title.content-header__title--x-short{font-size:41px;font-size:2.5625rem}@media only all and (min-width:45.625em){.content-header--image .content-header__title.content-header__title--x-short{font-size:46px;font-size:2.875rem}}@media only all and (min-width:56.25em){.content-header--image .content-header__title{font-size:58px;font-size:3.625rem;line-height:1.24138}.content-header--image .content-header__title.content-header__title--x-short{font-size:52px;font-size:3.25rem}}.content-header--image .content-header__title.content-header__title--short{font-size:30px;font-size:1.875rem}@media only all and (min-width:30em){.content-header--image .content-header__title.content-header__title--short{font-size:36px;font-size:2.25rem}}@media only all and (min-width:45.625em){.content-header--image .content-header__title.content-header__title--short{font-size:41px;font-size:2.5625rem}}@media only all and (min-width:56.25em){.content-header--image .content-header__title.content-header__title--short{font-size:46px;font-size:2.875rem}}@media only all and (min-width:75em){.content-header--image .content-header__title.content-header__title--short{font-size:52px;font-size:3.25rem}}.content-header--image .content-header__title.content-header__title--medium{font-size:26px;font-size:1.625rem}@media only all and (min-width:30em){.content-header--image .content-header__title.content-header__title--medium{font-size:30px;font-size:1.875rem}}@media only all and (min-width:45.625em){.content-header--image .content-header__title.content-header__title--medium{font-size:36px;font-size:2.25rem}}@media only all and (min-width:56.25em){.content-header--image .content-header__title.content-header__title--medium{font-size:41px;font-size:2.5625rem}}@media only all and (min-width:75em){.content-header--image .content-header__title.content-header__title--medium{font-size:52px;font-size:3.25rem}}.content-header--image .content-header__title.content-header__title--long{font-size:20px;font-size:1.25rem}@media only all and (min-width:30em){.content-header--image .content-header__title.content-header__title--long{font-size:26px;font-size:1.625rem}}@media only all and (min-width:45.625em){.content-header--image .content-header__title.content-header__title--long{font-size:36px;font-size:2.25rem}}@media only all and (min-width:75em){.content-header--image .content-header__title.content-header__title--long{font-size:41px;font-size:2.5625rem}}.content-header--image .content-header__title.content-header__title--x-long{font-size:20px;font-size:1.25rem}@media only all and (min-width:45.625em){.content-header--image .content-header__title.content-header__title--x-long{font-size:26px;font-size:1.625rem}}@media only all and (min-width:56.25em){.content-header--image .content-header__title.content-header__title--x-long{font-size:26px;font-size:1.625rem}}@media only all and (min-width:75em){.content-header--image .content-header__title.content-header__title--x-long{font-size:30px;font-size:1.875rem}}.content-header--image .content-header__title.content-header__title--xx-long{font-size:18px;font-size:1.125rem}@media only all and (min-width:30em){.content-header--image .content-header__title.content-header__title--xx-long{font-size:20px;font-size:1.25rem}}.content-header__picture{position:absolute;top:0;right:0;bottom:0;left:0;z-index:-1}.content-header__picture:after{content:"";position:absolute;top:0;right:0;bottom:0;left:0;z-index:-1;background-color:rgba(0,0,0,.4)}.content-header__image{z-index:-2;position:absolute;left:50%;top:50%;height:100%;min-width:100%;max-width:none;-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.content-header__image:after{content:"";background-color:#fff;position:absolute;top:0;left:0;width:100%;height:100%}.content-header__profile_wrapper{padding:18px 0 6px;padding:1.125rem 0 .375rem;font-size:12px;font-size:.75rem;line-height:1}.content-header__profile{text-decoration:none}.content-header__profile .content-header__profile_data,.content-header__profile .content-header__profile_label,.content-header__profile dl{display:inline-block;margin:0;font-size:12px;font-size:.75rem;line-height:1}@media only all and (min-width:45.625em){.content-header__profile_wrapper{position:absolute;left:0;right:0;line-height:normal}.content-header__profile .content-header__profile_data,.content-header__profile .content-header__profile_label,.content-header__profile dl{display:block;font-size:11px;font-size:.6875rem;line-height:2.18182}}.content-header__profile_label{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:#fff}.content-header__profile_data{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;color:#fff}.content-header__profile_image{display:none}@supports (display:flex){@media only all and (min-width:45.625em){.content-header__profile--has-image{display:-ms-inline-flexbox;display:inline-flex;-ms-flex-pack:center;justify-content:center;text-align:left;width:100%}.content-header__profile--has-image .content-header__profile_image{display:block;border-radius:24px;height:48px;width:48px;margin-right:12px;margin-right:.75rem}.content-header__profile--has-image dd,.content-header__profile--has-image dl,.content-header__profile--has-image dt{display:block}.content-header__profile--has-image .content-header__profile_data{color:#fff;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429}.content-header__profile_wrapper{padding:24px 0 0;padding:1.5rem 0 0}}}.content-header__subject_list{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:#0288d1;margin:0;padding-left:0;text-align:center;padding-left:36px;padding-left:2.25rem;padding-right:36px;padding-right:2.25rem;padding-top:24px;padding-top:1.5rem;position:absolute;width:calc(100% - 2 * 7%);display:block;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}@media only all and (min-width:45.625rem){.content-header__subject_list{padding-left:72px;padding-left:4.5rem;padding-right:72px;padding-right:4.5rem;width:calc(100% - 2 * 14%)}}@media only all and (min-width:75rem){.content-header__subject_list{width:calc(100% - 2 * 3%)}}.content-header--image .content-header__subject_list{color:inherit}.content-header__subject_list:before{color:#888}.content-header__subject_list_item{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:#0288d1;display:inline;font-size:11px;font-size:.6875rem;line-height:2.18182;list-style-type:none;padding:0}.content-header__subject_list_item .content-header__subject:after{content:", "}.content-header--image .content-header__subject_list_item{color:inherit}.content-header__subject_list_item:last-child .content-header__subject:after{content:""}.content-header__subject_link{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-weight:400;font-size:11px;font-size:.6875rem;line-height:2.18182;letter-spacing:.5px;text-transform:uppercase;color:#0288d1;text-decoration:none}.content-header__subject_link:hover{color:#0277bd}.content-header--image .content-header__subject_link{color:inherit}.content-header--image .content-header__subject_link:hover{color:inherit}.content-header__icons{float:left;position:absolute;list-style:none;margin:0;padding:0;left:7%;top:14px}@media only all and (min-width:45.625em){.content-header__icons{left:14%}}@media only all and (min-width:75em){.content-header__icons{left:42px}.content-header--image .content-header__icons{left:16px}}.content-header--image .content-header__icons{left:12px;top:12px}.content-header__icon{background-repeat:no-repeat;background-position:center bottom;display:block;width:17px;height:22px}.content-header__icon--cc{background-image:url(/assets/patterns/img/icons/cc.d3d0cdec.png);background-image:url(/assets/patterns/img/icons/cc.ec7b6e9c.svg),linear-gradient(transparent,transparent)}.content-header__icon--cc:hover{background-image:url(/assets/patterns/img/icons/cc-hover.83dfab2f.png);background-image:url(/assets/patterns/img/icons/cc-hover.7a693c5e.svg),linear-gradient(transparent,transparent)}.content-header__icon--oa{background-image:url(/assets/patterns/img/icons/oa.15bbffdd.png);background-image:url(/assets/patterns/img/icons/oa.f53eb8bd.svg),linear-gradient(transparent,transparent)}.content-header__icon--oa:hover{background-image:url(/assets/patterns/img/icons/oa-hover.791672fc.png);background-image:url(/assets/patterns/img/icons/oa-hover.ec1c5229.svg),linear-gradient(transparent,transparent)}.content-header__download_link{float:right;position:absolute;right:7%;top:24px}@media only all and (min-width:45.625em){.content-header__download_link{right:14%;top:14px}}@media only all and (min-width:75em){.content-header__download_link{right:42px}.content-header--image .content-header__download_link{right:16px}}.content-header--image .content-header__download_link{right:12px;top:12px}.content-header__download_icon{width:20px}.content-header__impact-statement{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5;font-weight:500;margin-bottom:24px;margin-bottom:1.5rem;max-width:100%}.content-header__impact-statement a{border-bottom:1px dotted #212121;color:#212121;text-decoration:none}.content-header__impact-statement a:hover{border-bottom-color:#212121;color:#212121}.content-header__impact-statement a:active,.content-header__impact-statement a:hover{color:inherit}.content-header--image .content-header__impact-statement{margin-bottom:0;margin-bottom:0;display:none}.content-header--image .content-header__impact-statement a{border-bottom:1px dotted #fff;color:#fff;text-decoration:none}.content-header--image .content-header__impact-statement a:hover{border-bottom-color:#fff;color:#fff}@media only all and (min-width:56.25em){.content-header--image .content-header__title.content-header__title--xx-long{font-size:26px;font-size:1.625rem}.content-header--image .content-header__impact-statement{display:block}.content-header--image.content-header--has-social-media-sharers .content-header__impact-statement{display:none}}@media only all and (min-width:75em){.content-header--image.content-header--has-social-media-sharers .content-header__impact-statement{display:block}}.content-header__author_link_highlight{padding:0}.content-header__author_link_highlight,.content-header__author_link_highlight:hover{background-color:transparent;border-style:none;color:#0288d1}.content-header__authors{margin-bottom:24px;margin-bottom:1.5rem}@media only all and (max-width:45.625em){.content-header__authors .content-header__institution_list{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}}.content-header__authors--line{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5}.content-header__author_list{margin:0;padding:0}.content-header__author_list_item{display:inline;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5;list-style-type:none;padding:0}.content-header__item_toggle--expanded{display:block}.content-header__author_suffix{white-space:nowrap}.content-header__author--last-non-excess .content-header__author_separator{display:none}.content-header__author_list--expanded .content-header__author--last-non-excess .content-header__author_separator{display:inline}li.content-header__author_list_item--last .content-header__author_separator,li.content-header__author_list_item:last-child .content-header__author_separator{display:none}.content-header__institution--last-non-excess .content-header__institution_separator{display:none}.content-header__institution_list--expanded .content-header__institution--last-non-excess .content-header__institution_separator{display:inline}li.content-header__institution_list_item--last .content-header__institution_separator,li.content-header__institution_list_item:last-child .content-header__institution_separator{display:none}.content-header__author_link{color:inherit;text-decoration:inherit}.content-header__author_link:hover{color:#0288d1}.content-header__author_icon{padding-top:1px;vertical-align:text-top}.content-header__author--single{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5}.content-header__institution_list{margin:0;padding:0}.content-header__institution_list_item{display:inline;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;font-weight:500;list-style-type:none;padding:0}.content-header__item_toggle{white-space:nowrap}.content-header__item_toggle--author{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:16px;font-size:1rem;line-height:1.5;font-weight:400}.content-header__item_toggle--expanded .content-header__item_toggle_cta{display:block;-ms-transform:rotate(90deg);transform:rotate(90deg)}.content-header__cta{margin-bottom:18px;margin-bottom:1.125rem}.content-header--image .content-header__cta{margin-bottom:0;margin-bottom:0;position:absolute;bottom:44px;left:0;right:0}.content-header--image .content-header__meta{position:absolute;left:0;right:0;bottom:18px;font-size:12px;font-size:.75rem;line-height:1}@media only all and (min-width:45.625em){.content-header__download_icon{width:44px}.content-header__author--last-non-excess .content-header__author_separator{display:none}.content-header__institution--last-non-excess .content-header__institution_separator{display:none}.content-header__item_toggle{color:#0288d1;display:inline;list-style-type:none;padding:0}.content-header__item_toggle--institution{font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:14px;font-size:.875rem;line-height:1.71429;font-weight:500;font-weight:400}.content-header__item_toggle--collapsed:after{content:"\00a0\00bb"}.content-header__item_toggle--expanded:before{content:"\00ab\00a0"}.content-header--image .content-header__meta{bottom:12px;font-size:11px;font-size:.6875rem;line-height:2.18182}}.content-header--image .meta{color:inherit;font-size:12px;font-size:.75rem;line-height:1}@media only all and (min-width:45.625em){.content-header--image .meta{font-size:11px;font-size:.6875rem;line-height:2.18182}}.content-header--image .date{color:inherit;font-size:12px;font-size:.75rem;line-height:1}.content-header--image .meta__type:hover{color:inherit}.content-header__image-credit{color:#888;font-family:"Noto Sans",Arial,Helvetica,sans-serif;font-size:11px;font-size:.6875rem;line-height:2.18182;padding-top:12px;padding-top:.75rem;padding-bottom:12px;padding-bottom:.75rem;text-align:right;visibility:hidden}.content-header__image-credit a,.content-header__image-credit a:hover{color:inherit;text-decoration:underline}.content-header__image-credit--overlay{color:inherit;opacity:.4;position:absolute;bottom:0;padding-right:12px;padding-right:.75rem;width:100%}.listing-list--read-more .content-header-divider{border:none}.listing-list--read-more .content-header--read-more{border:none}.site-header{max-height:96px;min-width:17.1875rem;position:relative;z-index:20}.site-header .search-box{background-color:#fff;display:none}.site-header__title{float:left;position:relative;z-index:21}.site-header__logo_link{background:url(/assets/patterns/img/patterns/organisms/elife-logo-symbol-1x.7d254625.png) no-repeat;display:block;height:28px;margin:6px 0 0 3px;width:28px}.site-header__logo_link_image{display:none}@supports (display:flex){.site-header__logo_link{background:0 0;height:27px}.site-header__logo_link_image{display:block}}.site-header__navigation{background-color:#fff;position:relative;z-index:20}.site-header__skip_to_content{display:block;position:absolute;top:20px;left:20px;white-space:nowrap}.site-header__skip_to_content__link{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;padding:15px 36px 14px;padding:.9375rem 2.25rem .875rem;z-index:50}@media only all and (min-width:45.625em){.content-header--image .date{font-size:11px;font-size:.6875rem;line-height:2.18182}.content-header__image-credit{visibility:visible}.site-header__title{border-right:1px solid #e0e0e0;float:left;height:95px;height:5.9375rem;margin-right:10px;margin-right:10px;margin-right:.625rem;padding-top:14px;padding-top:.875rem;padding-right:20px;padding-right:1.25rem;position:relative;width:170px}.site-header__title:after{background-color:#fff;content:"";display:block;height:95px;left:0;position:absolute;top:0;width:169px}.site-header__logo_link{background:0 0;display:block;float:right;height:70px;margin:0;position:relative;width:136px;z-index:10}.site-header__logo_link_image{display:block}}    </style>

        <link rel="apple-touch-icon" sizes="57x57" href="/assets/favicons/apple-touch-icon-57x57.4aeffd56.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/assets/favicons/apple-touch-icon-60x60.91474092.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/assets/favicons/apple-touch-icon-72x72.95fa9e7b.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/assets/favicons/apple-touch-icon-76x76.a4c54393.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/assets/favicons/apple-touch-icon-114x114.a8199d6e.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/assets/favicons/apple-touch-icon-120x120.efde6c5c.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/assets/favicons/apple-touch-icon-144x144.457f5c5e.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/assets/favicons/apple-touch-icon-152x152.5aea1932.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/assets/favicons/apple-touch-icon-180x180.21337439.png">
    <link rel="icon" type="image/svg+xml" href="/assets/favicons/favicon.ee498e7d.svg">
    <link rel="icon" type="image/png" sizes="32x32" href="/assets/favicons/favicon-32x32.825ee0ea.png">
    <link rel="icon" type="image/png" sizes="192x192" href="/assets/favicons/android-chrome-192x192.365fe68b.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/assets/favicons/favicon-16x16.337f389b.png">
    <link rel="shortcut icon" href="/assets/favicons/favicon.a755add0.ico">
    <link rel="manifest" href="/assets/favicons/manifest.cff74b51.json">
    <meta name="theme-color" content="#ffffff">
    <meta name="application-name" content="eLife">

    
    
                            
        
            
                <meta name="dc.format" content="text/html">
                <meta name="dc.language" content="en">
                <meta name="dc.publisher" content="eLife Sciences Publications Limited">

                                    <meta name="dc.title" content="Automated quantitative histology reveals vascular morphodynamics during Arabidopsis hypocotyl secondary growth">
                
                                    <meta name="dc.identifier" content="doi:10.7554/eLife.01567">
                
                                    <meta name="dc.date" content="2014-02-11">

                                            <meta name="dc.rights" content="© 2014 Sankar et al.. This article is distributed under the terms of the Creative Commons Attribution License, which permits unrestricted use and redistribution provided that the original author and source are credited.">
                    
                
                                    <meta name="dc.description" content="Our understanding of the living world has been advanced greatly by studies of ‘model organisms’, such as mice, zebrafish, and fruit flies. Studying these creatures has been crucial to uncovering the genes that control how our bodies develop and grow, and also to discover the genetic basis of diseases such as cancer. Thale cress—or Arabidopsis thaliana to give its formal name—is the model organism of choice for many plant biologists. This tiny weed has been widely studied because it can complete its lifecycle, from seed to seed, in about 6 weeks, and because its relatively small genome simplifies the search for genes that control specific traits. However, as with other much-studied model systems, understanding the changes that underpin the development of some of the more complex tissues in Arabidopsis has been severely hampered by the shear number of cells involved. After it has emerged from the seed, the plant’s first stem will develop from a few dozen cells in width to several thousand cells with highly specialized tissues arranged in a complex pattern of concentric circles. Although this stem thickening process represents a major developmental change in many plants—from Arabidopsis to oak trees—it has been under-researched. This is partly because it involves so many different cells, and also because it can only be observed in thin sections cut out of the plant’s stem. Now Sankar, Nieminen, Ragni et al. have developed a novel approach, termed ‘automated quantitative histology’, to overcome these problems. This strategy involves ‘teaching’ a computer to automatically recognize different plant cells and to measure their important features in high-resolution images of tissue sections. The resulting ‘map’ of the developing stem—which required over 800 hr of computing time to complete—reveals the changes to cells and tissues as they develop that allow the transport of water, sugars and nutrients between the above- and below-ground organs. Sankar, Nieminen, Ragni et al. suggest that their novel approach could, in the future, also be applied to study the development of other tissues and organisms, including animals.">
                
                                                                                        <meta name="dc.contributor" content="Martial Sankar">
                                                                                                                            <meta name="dc.contributor" content="Kaisa Nieminen">
                                                                                                                            <meta name="dc.contributor" content="Laura Ragni">
                                                                                                                            <meta name="dc.contributor" content="Ioannis Xenarios">
                                                                                                                            <meta name="dc.contributor" content="Christian S Hardtke">
                                                                                        
            
        
        <meta property="og:site_name" content="eLife">
        <meta property="og:url" content="https://elifesciences.org/articles/01567">
        <meta property="og:title" content="Automated quantitative histology reveals vascular morphodynamics during Arabidopsis hypocotyl secondary growth">
        <meta name="twitter:site" content="@eLife">

                                                <meta property="og:description" content="Combining high-resolution imaging with automated image segmentation and supervised machine learning achieves accurate cellular feature extraction and automated cell type recognition in a large-scale developmental process.">
            <meta name="description" content="Combining high-resolution imaging with automated image segmentation and supervised machine learning achieves accurate cellular feature extraction and automated cell type recognition in a large-scale developmental process.">
        
                    <meta name="twitter:card" content="summary">
        
                    <meta property="og:type" content="article">
                    
        <link rel="canonical" href="/articles/01567">

        
            
            
        
    

    

    <!--[if lt IE 9]>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv.min.js"></script>
    <![endif]-->

    <script>
                window.gtmDataLayer = window.gtmDataLayer || [];

                window.gtmDataLayer.push(
            {
                'articleSubjects': 'Plant Biology',
                'articleType': 'Research Article',
                'articlePublishDate': 'Feb 11, 2014'
            }
        );
        
        (function (w, d, s, l, i) {
            w[l] = w[l] || [];
            w[l].push({
                'gtm.start': new Date().getTime(), event: 'gtm.js'
            });
            var f = d.getElementsByTagName(s)[0],
                j = d.createElement(s), dl = l != 'dataLayer' ? '&l=' + l : '';
            j.async = true;
            j.src =
                'https://www.googletagmanager.com/gtm.js?id=' + i + dl;
            f.parentNode.insertBefore(j, f);
        })(window, document, 'script', 'gtmDataLayer', 'GTM-WVM8KG');
            </script>


</head>

<body>

            <noscript>
            <iframe src="https://www.googletagmanager.com/ns.html?id=GTM-WVM8KG" height="0" width="0"
                    style="display:none; visibility:hidden"></iframe>
        </noscript>
    
    <div class="global-wrapper" data-behaviour=" CookieOverlay FragmentHandler Math HypothesisLoader"
                    data-item-type="research-article"
            >

        <div class="global-inner">

                            <div class="wrapper wrapper--site-header">
                    <header class="site-header clearfix" data-behaviour="SiteHeader" id="siteHeader">
  <div class="site-header__title clearfix" role="banner">
    <div class="site-header__skip_to_content">
      <a href="#maincontent" class="site-header__skip_to_content__link button button--default">Skip to Content</a>
    </div>
    <a href="/" class="site-header__logo_link">
      <picture class="site-header__logo_link_image">
        <source srcset="/assets/patterns/img/patterns/organisms/elife-logo-full.b1283c9a.svg" type="image/svg+xml" media="(min-width: 45.625em)">
        <source srcset="/assets/patterns/img/patterns/organisms/elife-logo-symbol.6f18db13.svg" type="image/svg+xml">
        <img src="/assets/patterns/img/patterns/organisms/elife-logo-full-1x.ce3f6342.png" alt="eLife logo" class="site-header__logo_link"/>
      </picture>
      <span class="visuallyhidden" >eLife home page</span>
    </a>
  </div>
  <div class="site-header__navigation" role="navigation" aria-label="Main navigation">

      <nav class="nav-secondary">
        <ul class="nav-secondary__list clearfix">
            <li class="nav-secondary__item nav-secondary__item--first">
            
            
            
            
                  <a href="/about">
                  
                   About 
                  </a>
            
            
            </li>
            <li class="nav-secondary__item">
            
            
            
            
                  <a href="/community">
                  
                   Community 
                  </a>
            
            
            </li>
            <li class="nav-secondary__item nav-secondary__item--hide-narrow">
            
            
            
                      <a href="http://submit.elifesciences.org/" class="button button--extra-small button--default"  id="submitResearchButton">Submit my research</a>
            
            
            
            </li>
            <li class="nav-secondary__item nav-secondary__item--last">
            
                
                <div class="login-control"
                
                
                     data-behaviour="LoginControl">
                
                
                        <a href="/log-in" class="button button--login" >Log in/Register<span class="visuallyhidden"> (via ORCID - An ORCID is a persistent digital identifier for researchers)</span></a>
                
                </div>
            
            
            </li>
        </ul>
      </nav>

      <nav class="nav-primary">
        <ul class="nav-primary__list clearfix">
            <li class="nav-primary__item nav-primary__item--first">
            
            
            
            
                  <a href="#mainMenu">
                      <picture class="nav-primary__menu_icon">
                    
                    
                    
                        <source srcset="/assets/patterns/img/patterns/molecules/nav-primary-menu-ic.ac4e582f.svg"
                                type="image/svg+xml" 
                                >
                    
                    
                    
                        <img srcset="/assets/patterns/img/patterns/molecules/nav-primary-menu-ic_2x.8722f6c7.png 2x, /assets/patterns/img/patterns/molecules/nav-primary-menu-ic_1x.8efd68cc.png 1x"
                           src="/assets/patterns/img/patterns/molecules/nav-primary-menu-ic_1x.8efd68cc.png"
                           
                           alt="" />
                    
                    
                      </picture>
                    
                    
                  <span class="visuallyhidden nav-primary__menu_text"> Menu </span>
                  
                  </a>
            
            
            </li>
            <li class="nav-primary__item">
            
            
            
            
                  <a href="/">
                  
                   Home 
                  </a>
            
            
            </li>
            <li class="nav-primary__item">
            
            
            
            
                  <a href="/magazine">
                  
                   Magazine 
                  </a>
            
            
            </li>
            <li class="nav-primary__item">
            
            
            
            
                  <a href="/labs">
                  
                   Innovation 
                  </a>
            
            
            </li>
            <li class="nav-primary__item nav-primary__item--last nav-primary__item--search">
            
            
            
            
                  <a href="/search" rel="search">
                      <picture class="nav-primary__search_icon">
                    
                    
                    
                        <source srcset="/assets/patterns/img/patterns/molecules/nav-primary-search-ic.350bcf38.svg"
                                type="image/svg+xml" 
                                >
                    
                    
                    
                        <img srcset="/assets/patterns/img/patterns/molecules/nav-primary-search-ic_2x.0635c16f.png 2x, /assets/patterns/img/patterns/molecules/nav-primary-search-ic_1x.8e357583.png 1x"
                           src="/assets/patterns/img/patterns/molecules/nav-primary-search-ic_1x.8e357583.png"
                           
                           alt="" />
                    
                    
                      </picture>
                    
                    
                  <span class="visuallyhidden nav-primary__menu_text"> Search the eLife site </span>
                  
                  </a>
            
            
            </li>
        </ul>
      </nav>

  </div>

    
    <div class="search-box" data-behaviour="SearchBox">
      <div class="search-box__inner">
          <form class="compact-form" id="search" action="/search" method="GET" novalidate>
            <fieldset class="compact-form__container">
              <label>
                <span class="visuallyhidden">Search by keyword or author</span>
                <input type="search" name="for" value="" placeholder="Search by keyword or author"
                  
                   class="compact-form__input"
                  
                >
              </label>
          
          
              <button type="reset" name="reset" class="compact-form__reset"><span class="visuallyhidden">Reset form</span></button>
              <button type="submit" class="compact-form__submit"><span class="visuallyhidden">Search</span></button>
            </fieldset>
          </form>
    
          <label class="search-box__search_option_label">
            <input type="checkbox" name="subjects[]" value="plant-biology" form="search">Limit my search to Plant Biology
          </label>
    
      </div>
    </div>

</header>

                </div>
            
            
            
            <main role="main" class="main" id="maincontent">

                
      <header
    class="content-header  wrapper content-header--header content-header--has-social-media-sharers  clearfix"
    data-behaviour="ContentHeader">



      <ol class="content-header__subject_list">
          <li class="content-header__subject_list_item">
            <a href="/subjects/plant-biology" class="content-header__subject_link">
              <span class="content-header__subject">Plant Biology</span>
            </a>
          </li>
      </ol>

      <ul class="content-header__icons">
        <li><a href="https://en.wikipedia.org/wiki/Open_access"
               class="content-header__icon content-header__icon--oa"><span
            class="visuallyhidden">Open access</span></a></li>
        <li><a href="https://creativecommons.org/licenses/by/3.0/"
               class="content-header__icon content-header__icon--cc"><span
            class="visuallyhidden">Copyright information</span></a></li>
      </ul>

    <a href="#downloads" class="content-header__download_link">
      <picture>
          <source srcset="/assets/patterns/img/icons/download-full.6691999e.svg" type="image/svg+xml" media="(min-width: 45.625em)">
          <source srcset="/assets/patterns/img/icons/download-full-2x.a54fbeb0.png" type="image/png" media="(min-width: 45.625em)">
          <source srcset="/assets/patterns/img/icons/download.ecfa2d98.svg" type="image/svg+xml">
          <img src="/assets/patterns/img/icons/download-full-1x.5485093b.png" class="content-header__download_icon" alt="Download icon">
      </picture>
    </a>

  <div class="content-header__body">
    <h1 class="content-header__title content-header__title--x-long">Automated quantitative histology reveals vascular morphodynamics during Arabidopsis hypocotyl secondary growth</h1>


      <div class="social-media-sharers">
      
      
        <a class="social-media-sharer" href="https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Fdoi.org%2F10.7554%2FeLife.01567" target="_blank" rel="noopener noreferrer" aria-label="Share on Facebook">
          <div class="social-media-sharer__icon_wrapper social-media-sharer__icon_wrapper--facebook social-media-sharer__icon_wrapper--small"><div aria-hidden="true" class="social-media-sharer__icon social-media-sharer__icon--solid">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M18.77 7.46H14.5v-1.9c0-.9.6-1.1 1-1.1h3V.5h-4.33C10.24.5 9.5 3.44 9.5 5.32v2.15h-3v4h3v12h5v-12h3.85l.42-4z"/></svg>
          </div>
          </div>
        </a>
      
        <a class="social-media-sharer" href="https://twitter.com/intent/tweet/?text=Automated%20quantitative%20histology%20reveals%20vascular%20morphodynamics%20during%20Arabidopsis%20hypocotyl%20secondary%20growth&amp;url=https%3A%2F%2Fdoi.org%2F10.7554%2FeLife.01567" target="_blank" rel="noopener noreferrer" aria-label="Tweet a link to this page">
          <div class="social-media-sharer__icon_wrapper social-media-sharer__icon_wrapper--twitter social-media-sharer__icon_wrapper--small"><div aria-hidden="true" class="social-media-sharer__icon social-media-sharer__icon--solid">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M23.44 4.83c-.8.37-1.5.38-2.22.02.93-.56.98-.96 1.32-2.02-.88.52-1.86.9-2.9 1.1-.82-.88-2-1.43-3.3-1.43-2.5 0-4.55 2.04-4.55 4.54 0 .36.03.7.1 1.04-3.77-.2-7.12-2-9.36-4.75-.4.67-.6 1.45-.6 2.3 0 1.56.8 2.95 2 3.77-.74-.03-1.44-.23-2.05-.57v.06c0 2.2 1.56 4.03 3.64 4.44-.67.2-1.37.2-2.06.08.58 1.8 2.26 3.12 4.25 3.16C5.78 18.1 3.37 18.74 1 18.46c2 1.3 4.4 2.04 6.97 2.04 8.35 0 12.92-6.92 12.92-12.93 0-.2 0-.4-.02-.6.9-.63 1.96-1.22 2.56-2.14z"/></svg>
          </div>
          </div>
        </a>
      
        <a class="social-media-sharer" href="mailto:?subject=Automated%20quantitative%20histology%20reveals%20vascular%20morphodynamics%20during%20Arabidopsis%20hypocotyl%20secondary%20growth&amp;body=https%3A%2F%2Fdoi.org%2F10.7554%2FeLife.01567" target="_self" aria-label="Email a link to this page (opens up email program, if configured on this system)">
          <div class="social-media-sharer__icon_wrapper social-media-sharer__icon_wrapper--email social-media-sharer__icon_wrapper--small"><div aria-hidden="true" class="social-media-sharer__icon social-media-sharer__icon--solid">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M22 4H2C.9 4 0 4.9 0 6v12c0 1.1.9 2 2 2h20c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM7.25 14.43l-3.5 2c-.08.05-.17.07-.25.07-.17 0-.34-.1-.43-.25-.14-.24-.06-.55.18-.68l3.5-2c.24-.14.55-.06.68.18.14.24.06.55-.18.68zm4.75.07c-.1 0-.2-.03-.27-.08l-8.5-5.5c-.23-.15-.3-.46-.15-.7.15-.22.46-.3.7-.14L12 13.4l8.23-5.32c.23-.15.54-.08.7.15.14.23.07.54-.16.7l-8.5 5.5c-.08.04-.17.07-.27.07zm8.93 1.75c-.1.16-.26.25-.43.25-.08 0-.17-.02-.25-.07l-3.5-2c-.24-.13-.32-.44-.18-.68s.44-.32.68-.18l3.5 2c.24.13.32.44.18.68z"/></svg>
          </div>
          </div>
        </a>
      
        <a class="social-media-sharer" href="https://reddit.com/submit/?title=Automated%20quantitative%20histology%20reveals%20vascular%20morphodynamics%20during%20Arabidopsis%20hypocotyl%20secondary%20growth&amp;url=https%3A%2F%2Fdoi.org%2F10.7554%2FeLife.01567" target="_blank" rel="noopener noreferrer" aria-label="Share this page on Reddit">
          <div class="social-media-sharer__icon_wrapper social-media-sharer__icon_wrapper--reddit social-media-sharer__icon_wrapper--small"><div aria-hidden="true" class="social-media-sharer__icon social-media-sharer__icon--solid">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M24 11.5c0-1.65-1.35-3-3-3-.96 0-1.86.48-2.42 1.24-1.64-1-3.75-1.64-6.07-1.72.08-1.1.4-3.05 1.52-3.7.72-.4 1.73-.24 3 .5C17.2 6.3 18.46 7.5 20 7.5c1.65 0 3-1.35 3-3s-1.35-3-3-3c-1.38 0-2.54.94-2.88 2.22-1.43-.72-2.64-.8-3.6-.25-1.64.94-1.95 3.47-2 4.55-2.33.08-4.45.7-6.1 1.72C4.86 8.98 3.96 8.5 3 8.5c-1.65 0-3 1.35-3 3 0 1.32.84 2.44 2.05 2.84-.03.22-.05.44-.05.66 0 3.86 4.5 7 10 7s10-3.14 10-7c0-.22-.02-.44-.05-.66 1.2-.4 2.05-1.54 2.05-2.84zM2.3 13.37C1.5 13.07 1 12.35 1 11.5c0-1.1.9-2 2-2 .64 0 1.22.32 1.6.82-1.1.85-1.92 1.9-2.3 3.05zm3.7.13c0-1.1.9-2 2-2s2 .9 2 2-.9 2-2 2-2-.9-2-2zm9.8 4.8c-1.08.63-2.42.96-3.8.96-1.4 0-2.74-.34-3.8-.95-.24-.13-.32-.44-.2-.68.15-.24.46-.32.7-.18 1.83 1.06 4.76 1.06 6.6 0 .23-.13.53-.05.67.2.14.23.06.54-.18.67zm.2-2.8c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm5.7-2.13c-.38-1.16-1.2-2.2-2.3-3.05.38-.5.97-.82 1.6-.82 1.1 0 2 .9 2 2 0 .84-.53 1.57-1.3 1.87z"/></svg>
          </div>
          </div>
        </a>
      
      </div>

  </div>

    <div class="content-header__authors">
      <ol class="content-header__author_list" aria-label="Authors of this article">
          <li class="content-header__author_list_item">
            <span class="content-header__author"><a href="/articles/01567#x731672cc" data-behaviour="Popup" class="content-header__author_link">Martial Sankar</a><span class="content-header__author_suffix"><span class="content-header__author_separator" aria-hidden="true">,</span>
            </span></span>
          </li>
          <li class="content-header__author_list_item">
            <span class="content-header__author"><a href="/articles/01567#x97d42bf2" data-behaviour="Popup" class="content-header__author_link">Kaisa Nieminen</a><span class="content-header__author_suffix"><span class="content-header__author_separator" aria-hidden="true">,</span>
            </span></span>
          </li>
          <li class="content-header__author_list_item">
            <span class="content-header__author"><a href="/articles/01567#xe1d5c328" data-behaviour="Popup" class="content-header__author_link">Laura Ragni</a><span class="content-header__author_suffix"><span class="content-header__author_separator" aria-hidden="true">,</span>
            </span></span>
          </li>
          <li class="content-header__author_list_item">
            <span class="content-header__author"><a href="/articles/01567#xb1bd680c" data-behaviour="Popup" class="content-header__author_link">Ioannis Xenarios</a><span class="content-header__author_suffix"><span class="content-header__author_separator" aria-hidden="true">,</span>
            </span></span>
          </li>
          <li class="content-header__author_list_item">
            <span class="content-header__author"><a href="/articles/01567#x731c1333" data-behaviour="Popup" class="content-header__author_link">Christian S Hardtke</a><span class="content-header__author_suffix">&nbsp;<picture>
               <source srcset="/assets/patterns/img/icons/corresponding-author.d7eda27b.svg" type="image/svg+xml">
               <img src="/assets/patterns/img/icons/corresponding-author@1x.89247d49.png"
                    srcset="/assets/patterns/img/icons/corresponding-author@2x.808ab270.png 2x, /assets/patterns/img/icons/corresponding-author@1x.89247d49.png 1x"
                    alt="Is a corresponding author" class="content-header__author_icon">
            </picture><span class="content-header__author_separator" aria-hidden="true">,</span>
            </span></span>
          </li>
      </ol>

        <ol class="content-header__institution_list" aria-label="Author institutions">
            <li class="content-header__institution_list_item">
              <span class="content-header__institution">University of Lausanne, Switzerland<span class="content-header__institution_separator" aria-hidden="true">;</span>
              </span>
            </li>
            <li class="content-header__institution_list_item">
              <span class="content-header__institution">Swiss Institute of Bioinformatics, Switzerland<span class="content-header__institution_separator" aria-hidden="true">;</span>
              </span>
            </li>
        </ol>
    </div>


    <div class="content-header__meta">
      <div class="meta">
      
          <a class="meta__type" href="/articles/research-article" >Research Article</a>
      
      
          
          <span class="date"> <time datetime="2014-02-11">Feb 11, 2014</time></span>
      </div>
    </div>


</header>





    
        <div class="wrapper">

            <div class="contextual-data">

    <ul class="contextual-data__list" aria-label="The following contains the number of views, citations and annotations in this article">

        <li class="contextual-data__item">Cited 10</li>
        <li class="contextual-data__item"><a href="/articles/01567#metrics">Views 2,304</a></li>

        <li class="contextual-data__item" data-hypothesis-trigger><span class="contextual-data__item__hypothesis_opener">Annotations</span> <button class="speech-bubble speech-bubble--small "
        data-behaviour="SpeechBubble HypothesisOpener"
  
aria-live="polite">
  <span class="speech-bubble__inner"><span aria-hidden="true"><span data-visible-annotation-count></span></span><span class="visuallyhidden"> Open annotations. The current annotation count on this page is <span data-hypothesis-annotation-count>being calculated</span>.</span></span>
</button>
</li>

    </ul>

  <div class="contextual-data__cite_wrapper">
    <span class="contextual-data__cite"><span class="contextual-data__cite_label">Cite <span class="visuallyhidden"> this article</span>  as:</span> eLife 2014;3:e01567</span>
      <span class="doi">doi: <a href="https://doi.org/10.7554/eLife.01567" class="doi__link">10.7554/eLife.01567</a></span>
  </div>

</div>


        </div>

    
    <div data-behaviour="DelegateBehaviour" data-delegate-behaviour="Popup" data-selector=".article-section:not(#abstract) a">

        
    <div class="wrapper wrapper--content">

    <div class="grid">

                        
        
            <div class="grid__item one-whole x-large--two-twelfths">

                <div class="view-selector view-selector--has-figures" data-behaviour="ViewSelector" data-side-by-side-link="https://lens.elifesciences.org/01567">
  <ul class="view-selector__list">
    <li class="view-selector__list-item view-selector__list-item--article view-selector__list-item--active">
      <a href="/articles/01567" class="view-selector__link view-selector__link--article"><span>Article</span></a>
    </li>
      <li class="view-selector__list-item view-selector__list-item--figures">
        <a href="/articles/01567/figures" class="view-selector__link view-selector__link--figures"><span>Figures and data</span></a>
      </li>

      <li class="view-selector__list-item view-selector__list-item--jump">
        <span class="view-selector__jump_links_header">Jump to</span>
        <ul class="view-selector__jump_links">
            <li class="view-selector__jump_link_item">
              <a href="#abstract" class="view-selector__jump_link">Abstract</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#digest" class="view-selector__jump_link">eLife digest</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#s1" class="view-selector__jump_link">Introduction</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#s2" class="view-selector__jump_link">Results</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#s3" class="view-selector__jump_link">Discussion</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#s4" class="view-selector__jump_link">Materials and methods</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#references" class="view-selector__jump_link">References</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#SA1" class="view-selector__jump_link">Decision letter</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#SA2" class="view-selector__jump_link">Author response</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#info" class="view-selector__jump_link">Article and author information</a>
            </li>
            <li class="view-selector__jump_link_item">
              <a href="#metrics" class="view-selector__jump_link">Metrics</a>
            </li>
        </ul>
      </li>

  </ul>
</div>

            </div>

        
        <div class="content-container grid__item one-whole

                            large--eight-twelfths x-large--seven-twelfths
                                        grid-column">

            
            
                
                
                    <section
    class="article-section article-section--first"
   id="abstract"
  data-behaviour="ArticleSection"
  
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Abstract</h2>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Among various advantages, their small size makes model organisms preferred subjects of investigation. Yet, even in model systems detailed analysis of numerous developmental processes at cellular level is severely hampered by their scale. For instance, secondary growth of Arabidopsis hypocotyls creates a radial pattern of highly specialized tissues that comprises several thousand cells starting from a few dozen. This dynamic process is difficult to follow because of its scale and because it can only be investigated invasively, precluding comprehensive understanding of the cell proliferation, differentiation, and patterning events involved. To overcome such limitation, we established an automated quantitative histology approach. We acquired hypocotyl cross-sections from tiled high-resolution images and extracted their information content using custom high-throughput image processing and segmentation. Coupled with automated cell type recognition through machine learning, we could establish a cellular resolution atlas that reveals vascular morphodynamics during secondary growth, for example equidistant phloem pole formation.</p>




      <span class="doi doi--article-section"><a href="https://doi.org/10.7554/eLife.01567.001" class="doi__link">https://doi.org/10.7554/eLife.01567.001</a></span>
  </div>

</section>


                
                    <section
    class="article-section "
   id="digest"
  data-behaviour="ArticleSection"
  
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">eLife digest</h2>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Our understanding of the living world has been advanced greatly by studies of ‘model organisms’, such as mice, zebrafish, and fruit flies. Studying these creatures has been crucial to uncovering the genes that control how our bodies develop and grow, and also to discover the genetic basis of diseases such as cancer.</p>
<p class="paragraph">Thale cress—or <i>Arabidopsis thaliana</i> to give its formal name—is the model organism of choice for many plant biologists. This tiny weed has been widely studied because it can complete its lifecycle, from seed to seed, in about 6 weeks, and because its relatively small genome simplifies the search for genes that control specific traits. However, as with other much-studied model systems, understanding the changes that underpin the development of some of the more complex tissues in <i>Arabidopsis</i> has been severely hampered by the shear number of cells involved.</p>
<p class="paragraph">After it has emerged from the seed, the plant’s first stem will develop from a few dozen cells in width to several thousand cells with highly specialized tissues arranged in a complex pattern of concentric circles. Although this stem thickening process represents a major developmental change in many plants—from <i>Arabidopsis</i> to oak trees—it has been under-researched. This is partly because it involves so many different cells, and also because it can only be observed in thin sections cut out of the plant’s stem.</p>
<p class="paragraph">Now Sankar, Nieminen, Ragni et al. have developed a novel approach, termed ‘automated quantitative histology’, to overcome these problems. This strategy involves ‘teaching’ a computer to automatically recognize different plant cells and to measure their important features in high-resolution images of tissue sections. The resulting ‘map’ of the developing stem—which required over 800 hr of computing time to complete—reveals the changes to cells and tissues as they develop that allow the transport of water, sugars and nutrients between the above- and below-ground organs. Sankar, Nieminen, Ragni et al. suggest that their novel approach could, in the future, also be applied to study the development of other tissues and organisms, including animals.</p>




      <span class="doi doi--article-section"><a href="https://doi.org/10.7554/eLife.01567.002" class="doi__link">https://doi.org/10.7554/eLife.01567.002</a></span>
  </div>

</section>


                
                    <section
    class="article-section "
   id="s1"
  data-behaviour="ArticleSection"
  
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Introduction</h2>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Model organisms have proven essential for dissecting the molecular-genetic control of biological processes in both animals and plants (<a href="#bib16">Meyerowitz, 2002</a>; <a href="#bib2">Brenner, 2009</a>). Typically, they have been chosen according to a number of criteria, including a small, diploid genome, a short generation time, and easy lab culture. Another frequent feature is their small size, which allows cultivation of numerous individuals to enable large-scale genetic analyses as well as easy observation of developmental processes by microscopy. Fulfilling all these criteria, <i>Arabidopsis thaliana</i> (Arabidopsis), a small, annual dicotyledon of the <i>Brassicaceae</i> family, is the model of choice for developmental biology of higher plants (<a href="#bib15">Meyerowitz, 1989</a>). Various central processes of the plant life cycle, for example embryogenesis, root meristem organization or flower development can be examined at high spatio-temporal resolution in Arabidopsis. Moreover, in many instances live imaging at (sub-) cellular level is possible through microscopy techniques, including confocal microscopy, which is aided by the transparency of whole organs, such as the root, or at least the outermost tissue layers. However, such investigation is limited by organ depth, which can increase dramatically with organ size. For example, while the meristematic and differentiation regions of the root tip comprise a mere 5–6 dozen cells in the radial dimension and can be imaged all across using state-of-the-art microscopes, cell number rapidly increases proximal, towards the mature root (<a href="#bib6">Dolan et al., 1993</a>). At the same time, the organization of the root tissue layers rearranges from a partially radial, partially bilateral symmetry towards full radial symmetry, concomitant with the formation of cylindrical secondary meristems and the replacement of the outer cell layers by a new protective outside tissue. Thus, eventually the mature root acquires the same overall organization as the mature aboveground stems, that is a few cell layers of protective tissue produced by an underlying cork cambium that surround the vascular tissues. The latter are produced by another cylindrical secondary meristem, the vascular cambium, which produces xylem tissues towards the inside and phloem tissues towards the outside (<a href="#bib17">Nieminen et al., 2004</a>; <a href="#bib12">Groover and Robischon, 2006</a>). The activity of the cambial stem cells drives the radial expansion of roots and stems, a process termed ‘secondary growth’.</p>
<p class="paragraph">Formation of xylem tissues through secondary growth is the main process of durable biomass accumulation in plants and most prominent in tree trunks (<a href="#bib12">Groover and Robischon, 2006</a>; <a href="#bib24">Spicer and Groover, 2010</a>). In Arabidopsis, substantial secondary growth is not only observed at later stages of root development, but also in the hypocotyl, the embryonic stem (<a href="#bib3">Chaffey et al., 2002</a>; <a href="#bib23">Sibout et al., 2008</a>) (<a href="#fig1">Figure 1A</a>). Consistent with the hypocotyl’s role as critical junction between the root and shoot systems that limits the reciprocal transfer of edaphic resources and photosynthetic metabolites, its secondary growth occurs throughout most of the Arabidopsis life cycle and in some ways resembles the radial expansion of tree trunks. The hypocotyl initiates secondary growth shortly after seedling establishment, once its cell elongation growth along the main body axis has seized (<a href="#bib23">Sibout et al., 2008</a>; <a href="#bib21">Ragni et al., 2011</a>). Thus, unlike in post-embryonic stems, secondary growth in the hypocotyl is not obscured by parallel elongation growth, making it an ideal model system for this process.</p>
    <div
        id="fig1"
        class="asset-viewer-inline asset-viewer-inline-- "
        data-variant=""
        data-behaviour="AssetNavigation AssetViewer ToggleableCaption"
        data-selector=".caption-text__body"
        data-asset-viewer-group="fig1"
        data-asset-viewer-uri="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/,1500/0/default.jpg"
        data-asset-viewer-width="874"
        data-asset-viewer-height="1500"
    >
    
      <div class="asset-viewer-inline__header_panel">
          <div class="asset-viewer-inline__header_text">
            <span class="asset-viewer-inline__header_text__prominent">Figure 1</span>
          </div>
    
    
            <div class="asset-viewer-inline__figure_access">
              <a href="https://elifesciences.org/download/aHR0cHM6Ly9paWlmLmVsaWZlc2NpZW5jZXMub3JnL2xheDowMTU2NyUyRmVsaWZlLTAxNTY3LWZpZzEtdjEudGlmL2Z1bGwvZnVsbC8wL2RlZmF1bHQuanBn/elife-01567-fig1-v1.jpg?_hash=BYW8LCGqGgBM2Wgjmt%2FM%2FqTX%2BDSJJilGmDMXwBD24dY%3D" class="asset-viewer-inline__download_all_link" download="Download"><span class="visuallyhidden">Download asset</span></a>
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/,1500/0/default.jpg" class="asset-viewer-inline__open_link" target="_blank" rel="noopener noreferrer"><span class="visuallyhidden">Open asset</span></a>
            </div>
    
      </div>
    
          <figure class="captioned-asset">
          
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/,1500/0/default.jpg" class="captioned-asset__link" target="_blank" rel="noopener noreferrer">
              <picture class="captioned-asset__picture">
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/1234,/0/default.webp 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/617,/0/default.webp 1x"
                      type="image/webp"
                      >
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/1234,/0/default.jpg 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/617,/0/default.jpg 1x"
                      type="image/jpeg"
                      >
                  <img src="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig1-v1.tif/full/617,/0/default.jpg"
                       
                       alt=""
                       class="captioned-asset__image"
                  >
              </picture>
              </a>
          
          
          
          
              <figcaption class="captioned-asset__caption">
          
                  <h6 class="caption-text__heading">Cellular level analysis of Arabidopsis hypocotyl secondary growth.</h6>
                
                
                <div class="caption-text__body"><p class="paragraph">(<b>A</b>) Light microscopy of cross sections obtained from Arabidopsis hypocotyls (organ position illustrated for a 9-day-old seedling, lower left) at 9 dag (upper left) and 35 dag (right). Size bars are 100 μm. Blue GUS staining due to the presence of an <i>APL::GUS</i> reporter gene in this Col-0 background line marks phloem bundles. (<b>B</b>) Overview of the developmental series (time points and distinct samples per genotype) analyzed in this study. (<b>C</b>) Example of a high-resolution hypocotyl section image assembled from 11 × 11 tiles. (<b>D</b>) The same image after pre-processing and binarization, and (<b>E</b>) subsequent segmentation using a watershed algorithm. (<b>F</b>) Number of mis-segmented cells as determined by careful visual inspection in 12 sections, plotted against the total number of cells per section (log scale).</p>
</div>
          
                  <span class="doi doi--asset"><a href="https://doi.org/10.7554/eLife.01567.003" class="doi__link">https://doi.org/10.7554/eLife.01567.003</a></span>
          
              </figcaption>
          
          
          
          
          </figure>
    
    
    </div>
<p class="paragraph">Previous work has identified two principal phases of hypocotyl secondary growth, an early phase of proportional growth, when the cambium produces phloem and xylem tissues at roughly equal rates, and a later phase of xylem expansion, when the relative production of xylem dominates the radial expansion (<a href="#bib3">Chaffey et al., 2002</a>; <a href="#bib23">Sibout et al., 2008</a>). Early phase xylem consists mainly of the interconnected xylem vessels (terminally differentiated, dead cells with perforated, thick cell walls that are the actual conducts for water and solutes) and xylem parenchyma cells. Early phase phloem comprises the sieve elements (interconnected, enucleated but alive cells that perform the actual transport of the phloem sap), companion cells (which provide basic metabolism for sieve elements and are responsible for loading and un-loading of phloem sap cargo) and phloem parenchyma cells. In the xylem expansion phase, both xylem and phloem also start to differentiate fibers (cells with thick secondary cell walls that provide structural support), which can be formed from parenchymatic precursor cells.</p>
<p class="paragraph">It has been shown that the transition between the early phase and the xylem expansion phase is triggered by the onset of flowering (<a href="#bib23">Sibout et al., 2008</a>), through a mobile shoot-derived signal, the plant hormone gibberellin (<a href="#bib21">Ragni et al., 2011</a>). In these studies, the transition had been defined as a shift in the relative occupancy of overall xylem vs overall phloem tissue in hypocotyl cross sections. However, as only the overall areas of combined xylem and phloem tissues were considered, it remains unclear what the transition represents at the cellular level. Various scenarios could be envisioned, for instance the relative expansion of xylem might be a consequence of increased post-cambial proliferation during xylem differentiation, or of increased cambial stem cell activity toward the xylem side, or the inverse with respect to phloem. To distinguish between these possibilities proved to be very difficult due to the absence of information about the cellular dynamics during the secondary growth process. Moreover, such investigation is severely hampered by the fact that this process is not amenable to live imaging and can only be monitored invasively, through histological cross sections, thereby killing the individual sample under investigation. Thus, a quantitative understanding of the temporal progression of secondary growth can only be acquired by a high-throughput approach that monitors enough cross-sections from distinct hypocotyls of the same age to provide statistically solid data. In conjunction with the large number and morphological diversity of the cells that constitute this tissue, a quantitative understanding of the cell proliferation, differentiation, and patterning events by conventional means, that is simple visual inspection of cross sections, is out of reach. Therefore, we established an automated histology approach to create a cellular resolution atlas that reveals the vascular morphodynamics during hypocotyl secondary growth. Our data reveal substantially different secondary growth dynamics in two genotypes as well as emerging patterns of cell orientation over time and a constantly equidistant production of phloem poles by the cambium.</p>




  </div>

</section>


                
                    <section
    class="article-section "
   id="s2"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Results</h2>
  </header>

  <div class="article-section__body">
      <p class="paragraph">The goal of our study was to develop a universally applicable, ‘automated quantitative histology’ approach that could be applied to provide a comprehensive, quantitative analysis of the vascular morphodynamics during hypocotyl secondary growth in Arabidopsis. For analysis we chose two common laboratory accessions, Columbia-0 (Col-0) and Landsberg <i>erecta</i> (Ler), which have already been shown to display divergent secondary growth dynamics (<a href="#bib21">Ragni et al., 2011</a>).</p>
<section
    class="article-section "
   id="s2-1"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Raw data collection and rough analysis</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Based on the secondary growth progression observed during pilot experiments, we chose to analyze five time points in detail, starting at 15 days after germination (dag), when a full cambium is established and the initial outer epidermal and cortex cell layers are already or about to be shed. This was followed by additional sampling at 20, 25, 30 and up to 35 dag, when the plants had seized formation of new flowers (<a href="#fig1">Figure 1B</a>). Plants were grown in soil in a 16 hr light–8 hr dark cycle at 22°C with 150 µE light intensity. To minimize variation due to environmental conditions and between experiments, all plants were grown in parallel in a randomized design. In our conditions, all plants of both genotypes flowered at 17 dag ±1 d. For each time point, 50 seedlings were initially planted with the goal to eventually harvest 40 hypocotyls, which were fixed and embedded for sectioning. Embedding was performed using plastic resin, which proved to be the only robust method to acquire 3 µm thin cross-sections while conserving the cellular structure. A first observation by light microscopy after toluidine blue staining confirmed the integrity of the samples and allowed a first rough analysis of secondary growth progression based on overall transverse area (excluding any remaining epidermal or cortex layers) and the proportion occupied by the xylem. Whereas the average hypocotyl stele diameter was ca. 0.3 mm in Col-0 and ca. 0.15 mm in Ler at 15 dag, the radial expansion resulted in an average diameter of 1.6 mm in Col-0 and 1.1 mm in Ler at 35 dag. Concomitantly, relative xylem area increased from 12% to 29% in Col-0, and from 31% to 47% in Ler, confirming previous observations (<a href="#bib21">Ragni et al., 2011</a>).</p>




  </div>

</section>
<section
    class="article-section "
   id="s2-2"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Acquisition and segmentation of high-resolution images</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">To obtain accurate quantitative parameters of secondary growth progression, we implemented a segmentation procedure to extract the cellular features from the cross sections. To allow reliable identification of small cells, such as cambial cells, with standard segmentation software, we obtained images of the cross sections with a light microscope at 40 X magnification. Our strategy was to produce ultra-high resolution images of 1024 × 1024 pixels, which would allow a very fine discrimination of individual cell boundaries, the critical requirement for the subsequent image segmentation process. Because the resolution was too high to fit any single cross section into a single image, we used the tiling function of the microscope to fuse 1024 × 1024 pixel subpanels into single images for each cross section. Individual cross section images subjected to segmentation were thus assembled from a minimum of 9 (3 × 3) up to 144 (12 × 12) panels (<a href="#fig1">Figure 1C</a>). This procedure permitted information extraction from the whole section without inference or data loss. To this end, we developed a custom, fully automated image processing and segmentation pipeline. This pipeline pre-processes the images (gamma correction, contrast and brightness adjustment) and discards noise pixels after binarization (<a href="#fig1">Figure 1D</a>) before segmentation using a watershed algorithm (<a href="#fig1">Figure 1E</a>). The pipeline is fully automated and robust and typically performed at more than 99% accuracy (i.e., less than 1% of mis-segmented cells) across the scale of images (<a href="#fig1">Figure 1F</a>). However, because CPU time scaled exponentially with image size, taking ca. 8 min. for a 15 dag sample but ca. 1000 min for a 35 dag sample, computation eventually became limiting for our endeavor. Thus, we restricted our analysis to ca. 20 selected cross sections per genotype and time point (i.e., 208 cross sections in total, requiring ca. 800 hr of total CPU time) (<a href="#fig1">Figure 1B</a>), which gave statistically robust quantitative data.</p>




  </div>

</section>
<section
    class="article-section "
   id="s2-3"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Computation of cellular descriptors</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Overall median cell number at 15 dag was 883 for Col-0 and 260 for Ler. At 35 dag, it had increased to 18’124 and 11’026, respectively, indicating higher overall secondary growth in Col-0, but higher relative secondary growth in Ler (i.e., a ca. 42-fold vs a ca. 21-fold increase in cell number). Together with the overall increase in total transverse area (from ca. 70’000 µm<sup>2</sup> at 15 dag to ca. 2 million µm<sup>2</sup> at 35 dag and ca. 11’000 µm<sup>2</sup> to ca. 1 million µm<sup>2</sup> for Col-0 and Ler, respectively), this suggests significantly different secondary growth dynamics in the two genotypes. However, these overall averages can be misleading because of the already observed differences in relative tissue abundance. Thus, we advanced towards our goal of a full cellular resolution analysis by computing 16 cellular descriptors that represent the geometric characteristics of cell shape and relative cell position (<a href="/articles/01567/figures#SD1-data">Supplementary file 1A</a>). The initial set of descriptors was extracted from the segmented images using the EBImage R package (<a href="#bib20">Pau et al., 2010</a>). This toolbox computes morphological features by calculating the 2nd-order covariance matrix of the image moments, which is equivalent to fitting an ellipsoid to an object. From these data, we computed additional features, including the position of the cells given by their polar coordinates and the cell incline angle (see below), thereby taking full advantage of the cylindrical morphology of the hypocotyl cross sections.</p>




  </div>

</section>
<section
    class="article-section "
   id="s2-4"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Supervised learning for automated cell type recognition</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Although the descriptors provided an overview of the cell sizes, shapes and positions within the sections, they did not provide a straightforward indication of the tissue that individual cells belong to. To overcome this limitation, we sought to develop automated cell type recognition that uses the descriptors as an input for cell type classification. To this end, we performed a supervised classification using the support vector machine algorithm (SVM) (<a href="#bib5">Cortes and Vapnik, 1995</a>). Briefly, the SVM classifier principle is to find the optimal decision boundary between classes by maximizing the margin hyperplanes (the geometrical representation of the decision boundaries in multi-dimension) between the support vectors. The training set was a subset of our data that comprised a total of 3’144 manually labeled cells, dispatched into two sections per time point and genotype (<a href="/articles/01567/figures#SD1-data">Supplementary file 1B</a>). This set was split into a learning set comprising two-thirds of the data, and a test set constituted from the remaining cells. The former subset was used to build the classifier whereas the latter was employed for validation. The performance was assessed using the V-fold cross validation method, which consists of five randomly permutated reiterations of training and test sets to maximize the test set prediction error rate. Feature selection is a well-known pivotal issue in machine learning, and indeed the best combination of descriptors was critical in automated cell type classification and varied with the time point and genotype analyzed, mainly because cell type-specific position can vary with the age of the section. Thus, we developed a greedy algorithm for feature selection based on the 16 initial descriptors. This allowed us to select descriptors according to their importance in classifier performance (<a href="/articles/01567/figures#fig2s1">Figure 2—figure supplement 1</a>), such that we could build one optimized classifier with respect to a given time point. In general, we selected the combination with the least number of descriptors, the lowest variation and the highest cross-validation performance with respect to the training/test set permutations. Finally, another key criterion in classifier selection was to minimize performance trade-off across different cell types, that is classifiers that scored high in correct recognition of all the different cell types (the selected classifiers are described in <a href="/articles/01567/figures#SD1-data">Supplementary file 1C</a>). Across all sections and time points, a common set of five distinct cell type categories (<a href="/articles/01567/figures#SD1-data">Supplementary file 1D</a>) could be classified and quantified, that is (i) xylem vessels and parenchymatic cells, (ii) xylem fibers, (iii) cambial cells, (iv) phloem bundle cells (companion cells and sieve elements) and (v) parenchymatic phloem cells (including any of the rare phloem fibers) (<a href="/articles/01567/figures#SD1-data">Supplementary file 1E</a>). Although more categories (e.g., xylem vessels and parenchyma cells separately) could be reliably distinguished at individual time points using other classifiers, we restricted our analyses to these five for the sake of a coherent temporal description of secondary growth progression. For these categories, our purely morphology- and position-based approach identified cells with an average accuracy of 88% and a median accuracy of 95% across the n = 50 cell type category X time point X genotype matrix.</p>




  </div>

</section>
<section
    class="article-section "
   id="s2-5"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Automated quality control and refinement of cell type recognition</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Whereas the automated recognition with these classifiers was thus sufficiently accurate for most cell type categories to extract quantitative data about secondary growth progression from the typically thousands of cells per section, the recognition of the xylem vessel and parenchyma cells behaved as an outlier, with lower accuracy especially at later stages. We also noticed that xylem cell types were frequently assigned to cells outside of the xylem area’s average radius. This was particularly prevalent at the later stages of development and could be pinpointed to a frequent confusion between xylem vessels and phloem parenchyma cells, which increasingly resemble each other in their outlines as secondary growth proceeds. However, discarding the problematic sections based on stringent criteria would have meant the exclusion of 33% and 40% of sections for Col-0 and Ler, respectively. To tackle these problems, we developed an automated pipeline for quality control. This procedure was based on manually created mask images that specified both the xylem area and the whole section area of the 208 samples (<a href="/articles/01567/figures#SD2-data">Supplementary files 2 and 3</a>). Segmentation of the mask images allowed us to filter out noisy objects outside the sections’ average radius distance, mostly mis-segmented objects that either represented dirt contaminations or shed epidermal or cortex cells. The tool also automatically corrected the mis-assigned xylem cell identities by taking advantage of the mask-defined xylem area of the quality control filter. This correction refined the cell type recognition results and permitted all sections to pass the filtering step. An overview of the entire computational pipeline is shown in <a href="#fig2">Figure 2A</a>.</p>
    <div
        id="fig2"
        class="asset-viewer-inline asset-viewer-inline-- "
        data-variant=""
        data-behaviour="AssetNavigation AssetViewer ToggleableCaption"
        data-selector=".caption-text__body"
        data-asset-viewer-group="fig2"
        data-asset-viewer-uri="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/,1500/0/default.jpg"
        data-asset-viewer-width="1431"
        data-asset-viewer-height="1500"
    >
    
      <div class="asset-viewer-inline__header_panel">
          <div class="asset-viewer-inline__header_text">
            <span class="asset-viewer-inline__header_text__prominent">Figure 2</span> with 1 supplement <a href="/articles/01567/figures#fig2" class="asset-viewer-inline__header_link">see all</a>
          </div>
    
    
            <div class="asset-viewer-inline__figure_access">
              <a href="https://elifesciences.org/download/aHR0cHM6Ly9paWlmLmVsaWZlc2NpZW5jZXMub3JnL2xheDowMTU2NyUyRmVsaWZlLTAxNTY3LWZpZzItdjEudGlmL2Z1bGwvZnVsbC8wL2RlZmF1bHQuanBn/elife-01567-fig2-v1.jpg?_hash=ci61CCjHakULCTgr%2BPbYPSVAu%2Fi0dbMxzuXQnRW03UU%3D" class="asset-viewer-inline__download_all_link" download="Download"><span class="visuallyhidden">Download asset</span></a>
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/,1500/0/default.jpg" class="asset-viewer-inline__open_link" target="_blank" rel="noopener noreferrer"><span class="visuallyhidden">Open asset</span></a>
            </div>
    
      </div>
    
          <figure class="captioned-asset">
          
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/,1500/0/default.jpg" class="captioned-asset__link" target="_blank" rel="noopener noreferrer">
              <picture class="captioned-asset__picture">
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/1234,/0/default.webp 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/617,/0/default.webp 1x"
                      type="image/webp"
                      >
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/1234,/0/default.jpg 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/617,/0/default.jpg 1x"
                      type="image/jpeg"
                      >
                  <img src="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig2-v1.tif/full/617,/0/default.jpg"
                       
                       alt=""
                       class="captioned-asset__image"
                  >
              </picture>
              </a>
          
          
          
          
              <figcaption class="captioned-asset__caption">
          
                  <h6 class="caption-text__heading">The ‘Quantitative Histology’ approach.</h6>
                
                
                <div class="caption-text__body"><p class="paragraph">(<b>A</b>) Overview of the computational pipeline from image acquisition to analysis. (<b>B</b>) ‘Phenoprints’ for the different genotypes and developmental stages.</p>
</div>
          
                  <span class="doi doi--asset"><a href="https://doi.org/10.7554/eLife.01567.004" class="doi__link">https://doi.org/10.7554/eLife.01567.004</a></span>
          
              </figcaption>
          
          
          
          
          </figure>
    
    
    </div>




  </div>

</section>
<section
    class="article-section "
   id="s2-6"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Overall similar but temporally shifted vascular patterning in the two genotypes</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">For a first overview of secondary growth progression, we used the thus extracted cellular data to define phenotypic profiles (phenoprints) for each time point and genotype, comprised of the global (e.g., cross-section size or total cell count) and cell type-specific (e.g., relative proportion of a particular cell type category or feature distribution) statistics (<a href="#fig2">Figure 2B</a>) (the feature description data for all cells of all sections is provided in data files 1 and 2, the corresponding normalized data used for machine learning and the determined cell type identities are provided in the data files 3 and 4, all available in the Dryad data repository under doi: <a href="http://dx.doi.org/10.5061/dryad.b835k">10.5061/dryad.b835k</a> (<a href="#bib22">Sankar et al., 2014</a>)). The phenoprints consisted of a set of eight multi-parametric descriptors, which was informative for the normalized values (<a href="/articles/01567/figures#SD4-data">Supplementary file 4</a>) that were used to perform a principal component analysis (<a href="#fig3">Figure 3A</a>). The computed correlation matrix was projected into a two-dimensional coordinate system, with the first two principal components explaining 76% of the variation. The first component opposed the larger phenoprint stages (30–35 dag in both genotypes) with the smallest (Ler 15d), with proportionally less cambium in the older stages. The second component associated variables of large phloem proportion and inexistent or low fiber content (Col-0 15 dag, Ler 25 dag, Col-0 20 dag, Col-0 25 dag). The analysis also revealed larger angle spans for Ler as compared to Col-0 above all between 15 dag and 25 dag, suggesting substantial morphological changes during the early stages. At later time points, the two genotypes increasingly clustered together, indicating an initially slower development in Ler that however eventually caught up with Col-0. Overall, the phenoprint clustering suggests a conserved sequence of development from one distinct morphological pattern to another, albeit with a different temporal progression in Col-0 vs Ler.</p>
    <div
        id="fig3"
        class="asset-viewer-inline asset-viewer-inline-- "
        data-variant=""
        data-behaviour="AssetNavigation AssetViewer ToggleableCaption"
        data-selector=".caption-text__body"
        data-asset-viewer-group="fig3"
        data-asset-viewer-uri="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/,1500/0/default.jpg"
        data-asset-viewer-width="764"
        data-asset-viewer-height="1500"
    >
    
      <div class="asset-viewer-inline__header_panel">
          <div class="asset-viewer-inline__header_text">
            <span class="asset-viewer-inline__header_text__prominent">Figure 3</span>
          </div>
    
    
            <div class="asset-viewer-inline__figure_access">
              <a href="https://elifesciences.org/download/aHR0cHM6Ly9paWlmLmVsaWZlc2NpZW5jZXMub3JnL2xheDowMTU2NyUyRmVsaWZlLTAxNTY3LWZpZzMtdjEudGlmL2Z1bGwvZnVsbC8wL2RlZmF1bHQuanBn/elife-01567-fig3-v1.jpg?_hash=1%2FGQxvaYUuwz7loyMSfdikFjfvabUDLz31TH2815sIE%3D" class="asset-viewer-inline__download_all_link" download="Download"><span class="visuallyhidden">Download asset</span></a>
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/,1500/0/default.jpg" class="asset-viewer-inline__open_link" target="_blank" rel="noopener noreferrer"><span class="visuallyhidden">Open asset</span></a>
            </div>
    
      </div>
    
          <figure class="captioned-asset">
          
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/,1500/0/default.jpg" class="captioned-asset__link" target="_blank" rel="noopener noreferrer">
              <picture class="captioned-asset__picture">
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/1234,/0/default.webp 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/617,/0/default.webp 1x"
                      type="image/webp"
                      >
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/1234,/0/default.jpg 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/617,/0/default.jpg 1x"
                      type="image/jpeg"
                      >
                  <img src="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig3-v1.tif/full/617,/0/default.jpg"
                       
                       alt=""
                       class="captioned-asset__image"
                  >
              </picture>
              </a>
          
          
          
          
              <figcaption class="captioned-asset__caption">
          
                  <h6 class="caption-text__heading">Progression of tissue proliferation.</h6>
                
                
                <div class="caption-text__body"><p class="paragraph">(<b>A</b>) Principal component analysis (PCA) of the phenoprints shown in <a href="#fig2">Figure 2B</a>, performed with normalized values (<a href="/articles/01567/figures#SD4-data">Supplementary file 4</a>). The inlay screeplot displays the proportion of total variation explained by each principal component. (<b>B–E</b>) Comparative plots of parameter progression in the two genotypes. In (<b>D</b>), xylem represents combined vessel, parenchyma, and fiber cells, phloem represents combined phloem parenchyma and bundle cells. Error bars indicate standard error.</p>
</div>
          
                  <span class="doi doi--asset"><a href="https://doi.org/10.7554/eLife.01567.006" class="doi__link">https://doi.org/10.7554/eLife.01567.006</a></span>
          
              </figcaption>
          
          
          
          
          </figure>
    
    
    </div>




  </div>

</section>
<section
    class="article-section "
   id="s2-7"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Reduced phloem cell proliferation is the cause of higher xylem area occupancy in Ler</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Previous studies (<a href="#bib21">Ragni et al., 2011</a>) have shown that Ler has a higher ratio of xylem area to phloem area than most other accessions, including Col-0. Our quantification also confirmed that overall radial expansion of Ler was reduced as compared to Col-0 (<a href="#fig3">Figure 3B</a>). However, xylem area expansion rate was nearly equal in both genotypes, which combined with lower overall radial expansion necessarily resulted in higher xylem occupancy in Ler (<a href="#fig3">Figure 3C</a>). In the temporal trend, two distinct phases of xylem occupancy could be distinguished. Initially, it decreased or remained stable between 15 and 25 dag, followed by an increase between 25 and 35 dag. Whereas these tendencies were similar in both genotypes up to 30 dag, Ler differed in that its xylem area increased steadily, eventually occupying almost 50% of the total transverse area at 35 dag. Quantification of cell proliferation confirmed that the number of xylem cells and the xylem cell proliferation rate were close in both genotypes (<a href="#fig3">Figure 3D</a>), however the total number of cells in Ler was ca. twofold lower than in Col-0 (<a href="#fig3">Figure 3E</a>). Moreover, the phloem proliferation rate was more than twofold lower in Ler, with stagnation in phloem cell number between 30 and 35 dag (<a href="#fig3">Figure 3D</a>) explaining the high xylem tissue occupancy at 35 dag. The increase of cambium cell number in Col-0 as compared to Ler at later stages of development (<a href="#fig3">Figure 3E</a>) likely contributed to this difference. In summary, our results suggest that a plateau in cambial growth combined with stagnating phloem proliferation is responsible for overall reduced radial growth but relatively increased xylem expansion in Ler.</p>




  </div>

</section>
<section
    class="article-section "
   id="s2-8"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Visualization of vascular morphodynamics through combined plots of cell size and incline angle</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Of the descriptors extracted by our computational approach, the incline angle proved to be most useful in detecting and illustrating the substantial features of vascular organization during secondary growth progression. The incline angle represents the deviation of the major axis of a cell with respect to the radius emanating from the manually defined center point of the cross section (<a href="/articles/01567/figures#fig4s1">Figure 4—figure supplement 1</a>). We calculated the incline angle <i>θ</i> (in radians) as follows:</p>
<div class="math-block" id="equ1">

    

    <span class="math-block__math"><math><mrow><mi>θ</mi><mo>=</mo><mo> </mo><mrow><mo>|</mo><mrow><mi mathvariant="normal">arccos</mi><mrow><mrow><mo>(</mo><mrow><mfrac><mrow><mi>x</mi><mo>·</mo><mi>r</mi></mrow><mrow><mrow><mo>‖</mo><mi>x</mi><mo>‖</mo></mrow><mo>·</mo><mrow><mo>‖</mo><mi>r</mi><mo>‖</mo></mrow></mrow></mfrac></mrow><mo>)</mo></mrow></mrow><mo>−</mo><mfrac bevelled="true"><mi>π</mi><mn>2</mn></mfrac></mrow><mo>|</mo></mrow></mrow></math></span>

</div>
<p class="paragraph">where x and r are vectors, corresponding to the major axis of the cell and the radius running from the cell center, respectively. A value of zero represents perfectly orthoradial (i.e., tangential or periclinal) orientation of the major axis, and a value of π/2 represents perfectly radial (i.e., anticlinal) orientation. Plotting the incline in combination with cell size created informative simplified visualizations of our cross sections (<a href="#fig4">Figure 4A–B</a>). In these, concentric areas of cell orientation are evident, with a central area of mainly large and radially oriented (high incline) cells, representing the xylem cell categories. This area is surrounded by the cambium, depicted as a ring of small and orthoradially oriented (low incline) cells and, reaching the periphery, a zone comprising a bulk of mainly larger, orthoradially oriented cells representing the phloem area. Following the plots across the time points allowed us to reveal the vascular morphodynamics as a function of incline.</p>
    <div
        id="fig4"
        class="asset-viewer-inline asset-viewer-inline-- "
        data-variant=""
        data-behaviour="AssetNavigation AssetViewer ToggleableCaption"
        data-selector=".caption-text__body"
        data-asset-viewer-group="fig4"
        data-asset-viewer-uri="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/1500,/0/default.jpg"
        data-asset-viewer-width="1500"
        data-asset-viewer-height="1336"
    >
    
      <div class="asset-viewer-inline__header_panel">
          <div class="asset-viewer-inline__header_text">
            <span class="asset-viewer-inline__header_text__prominent">Figure 4</span> with 1 supplement <a href="/articles/01567/figures#fig4" class="asset-viewer-inline__header_link">see all</a>
          </div>
    
    
            <div class="asset-viewer-inline__figure_access">
              <a href="https://elifesciences.org/download/aHR0cHM6Ly9paWlmLmVsaWZlc2NpZW5jZXMub3JnL2xheDowMTU2NyUyRmVsaWZlLTAxNTY3LWZpZzQtdjEudGlmL2Z1bGwvZnVsbC8wL2RlZmF1bHQuanBn/elife-01567-fig4-v1.jpg?_hash=ms3%2B7kmX7u4cCo46lWmUw0XTyj3QbwVdXQDOnnevRwo%3D" class="asset-viewer-inline__download_all_link" download="Download"><span class="visuallyhidden">Download asset</span></a>
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/1500,/0/default.jpg" class="asset-viewer-inline__open_link" target="_blank" rel="noopener noreferrer"><span class="visuallyhidden">Open asset</span></a>
            </div>
    
      </div>
    
          <figure class="captioned-asset">
          
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/1500,/0/default.jpg" class="captioned-asset__link" target="_blank" rel="noopener noreferrer">
              <picture class="captioned-asset__picture">
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/1234,/0/default.webp 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/617,/0/default.webp 1x"
                      type="image/webp"
                      >
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/1234,/0/default.jpg 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/617,/0/default.jpg 1x"
                      type="image/jpeg"
                      >
                  <img src="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig4-v1.tif/full/617,/0/default.jpg"
                       
                       alt=""
                       class="captioned-asset__image"
                  >
              </picture>
              </a>
          
          
          
          
              <figcaption class="captioned-asset__caption">
          
                  <h6 class="caption-text__heading">Bimodal distribution of incline angle according to position.</h6>
                
                
                <div class="caption-text__body"><p class="paragraph">(<b>A</b> and <b>B</b>) Spatial distribution of cell incline angle illustrates the vascular organization in Ler (<b>B</b>) as compared to Col-0 (<b>A</b>) at later stages of development, for example 30 dag. The size of the disc increases with the area of the cell. Blue color indicates radial cell orientation, red orthoradial. (<b>C</b> and <b>D</b>) Violin plots of incline angle distribution, illustrating increasingly bimodal distribution coincident with refined vascular organization and different dynamics of the process in the two genotypes.</p>
</div>
          
                  <span class="doi doi--asset"><a href="https://doi.org/10.7554/eLife.01567.007" class="doi__link">https://doi.org/10.7554/eLife.01567.007</a></span>
          
              </figcaption>
          
          
          
          
          </figure>
    
    
    </div>




  </div>

</section>
<section
    class="article-section "
   id="s2-9"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Local variation and rearrangement of incline angles support distinct phases of vascular patterning</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Interestingly, the spatio-temporal dynamics of the overall incline (i.e., covering the whole section cell content at a given time point) captured the distinct phases of secondary growth progression described above. This could be visualized in violin plots (<a href="#fig4">Figure 4C–D</a>), where the incline angle was uniformly distributed at 15 dag in Col-0 (Hartigans’ dip test p&gt;10<sup>−3</sup>), meaning that no distinguishable vascular organization of cell orientation was yet built up. Starting at 20 dag, a first peak towards lower values of incline emerged and persisted until 35 dag. At 30 dag, a second peak towards higher values of incline arose, giving shape to a discernable bimodal distribution (Hartigans’ dip test p&lt;2.2 × 10<sup>−6</sup>) (<a href="#fig4">Figure 4C</a>). In Ler, the pattern was different in that a broad, slightly skewed distribution with a median value towards the lowest values of incline was observed at 15 dag, followed by a broad, slightly bimodal distribution at 20 dag (Hartigans’ dip test p&lt;10<sup>−4</sup>) (<a href="#fig4">Figure 4D</a>). At the later time points, sharp bimodal-shaped density curves supported the coexistence of two populations of cells, a mostly radially and a mostly orthoradially oriented one (Hartigans’ dip test p&lt;2.2 × 10<sup>−6</sup>), similar to Col-0.</p>




  </div>

</section>
<section
    class="article-section "
   id="s2-10"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Spatio-temporal patterning of inclines</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Plotting the incline of individual cells according to their radial position (i.e., distance from a cross section’s center) and over time points, we could follow the rearrangement in more detail. Normalization allowed us to pool the cells from all sections from a given time point and perform relative comparisons between them. Fitting these cloud distributions with locally weighted linear regression (i.e., lowess) revealed the essential data trends (<a href="#fig5">Figure 5</a>). In Col-0, the spatial distribution of the cell incline displayed unexpected temporal dynamics. At 15 dag, a wavy line described the point cloud, meaning that a radial vs orthoradial tissue boundary was not yet distinguishable (<a href="#fig5">Figure 5A</a>). However, around 20 and 25 dag, vascular organization emerged as a plateau of largely radial orientation close to the center that corresponded to xylem cells, followed by a steep decrease to lower incline values in the cambium and phloem tissues (<a href="#fig5">Figure 5C,E</a>). Once this pattern was established, the plateau of xylem enlarged while the span of the orthoradial cell layers narrowed, concomitant with the occurrence of xylem fibers and expansion of the xylem area (<a href="#fig5">Figure 5G,I</a>). We also observed a decrease in the variation spread of incline in cambial cells over time. This reflected the progressive enlargement and organization of the cambium, which appeared to be completed as late as 30 dag, confirming continuous refinement of vascular patterning during secondary growth. A largely similar pattern of events was observed in Ler (<a href="#fig5">Figure 5B,D,F,H,J</a>), however, the final organization appeared more bimodal than in Col-0, which might reflect the above described decline of relative phloem area size.</p>
    <div
        id="fig5"
        class="asset-viewer-inline asset-viewer-inline-- "
        data-variant=""
        data-behaviour="AssetNavigation AssetViewer ToggleableCaption"
        data-selector=".caption-text__body"
        data-asset-viewer-group="fig5"
        data-asset-viewer-uri="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/,1500/0/default.jpg"
        data-asset-viewer-width="757"
        data-asset-viewer-height="1500"
    >
    
      <div class="asset-viewer-inline__header_panel">
          <div class="asset-viewer-inline__header_text">
            <span class="asset-viewer-inline__header_text__prominent">Figure 5</span> with 1 supplement <a href="/articles/01567/figures#fig5" class="asset-viewer-inline__header_link">see all</a>
          </div>
    
    
            <div class="asset-viewer-inline__figure_access">
              <a href="https://elifesciences.org/download/aHR0cHM6Ly9paWlmLmVsaWZlc2NpZW5jZXMub3JnL2xheDowMTU2NyUyRmVsaWZlLTAxNTY3LWZpZzUtdjEudGlmL2Z1bGwvZnVsbC8wL2RlZmF1bHQuanBn/elife-01567-fig5-v1.jpg?_hash=JDDL3JvrS1ephuOVeltpwox%2FtsGF4p0p6t%2Bzhj4OJ5Q%3D" class="asset-viewer-inline__download_all_link" download="Download"><span class="visuallyhidden">Download asset</span></a>
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/,1500/0/default.jpg" class="asset-viewer-inline__open_link" target="_blank" rel="noopener noreferrer"><span class="visuallyhidden">Open asset</span></a>
            </div>
    
      </div>
    
          <figure class="captioned-asset">
          
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/,1500/0/default.jpg" class="captioned-asset__link" target="_blank" rel="noopener noreferrer">
              <picture class="captioned-asset__picture">
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/1234,/0/default.webp 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/617,/0/default.webp 1x"
                      type="image/webp"
                      >
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/1234,/0/default.jpg 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/617,/0/default.jpg 1x"
                      type="image/jpeg"
                      >
                  <img src="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig5-v1.tif/full/617,/0/default.jpg"
                       
                       alt=""
                       class="captioned-asset__image"
                  >
              </picture>
              </a>
          
          
          
          
              <figcaption class="captioned-asset__caption">
          
                  <h6 class="caption-text__heading">Distinct local organization of incline angle during hypocotyl secondary growth progression.</h6>
                
                
                <div class="caption-text__body"><p class="paragraph">(<b>A</b>–<b>J</b>) Density plots of cell incline angle vs radial position for the two genotypes at the indicated developmental stages, representing all cells across all sections for a given time point. The red lines represent the fit of these cloud distributions with locally weighted linear regression (i.e., lowess), revealing the essential data trends. All sections were normalized from 0.0 (the manually defined center) to 1.0 (the average radius in a set of sections as determined by the average distance of the outermost cells from the center for individual sections). Box plots indicate the quartiles of the radian distribution for each cell-type class and are placed at the average position of the cell type with respect to the y axis. Outliers are shown as circles.</p>
</div>
          
                  <span class="doi doi--asset"><a href="https://doi.org/10.7554/eLife.01567.009" class="doi__link">https://doi.org/10.7554/eLife.01567.009</a></span>
          
              </figcaption>
          
          
          
          
          </figure>
    
    
    </div>




  </div>

</section>
<section
    class="article-section "
   id="s2-11"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Cell proliferation and division plane switching is largely restricted to the cambium</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">The distribution of inclines also had possible implications for the orientation of cell divisions, in the sense that mostly radial orientation could be an indicator for the prevalence of anticlinal division planes, whereas mostly orthoradial orientations could be an indicator for the prevalence of periclinal ones. Visual inspection of cross sections suggested that this is not the case however, also revealing a remarkable rarity of post-cambial cell divisions. In the xylem area, practically no post-cambial divisions were observed (<a href="/articles/01567/figures#fig5s1">Figure 5—figure supplement 1</a>) and radial cell files were generally continuous with the adjacent cambial files. Following such cell files also suggested that cellular growth led to a switch in xylem cell incline angle orientation. Whereas xylem cells that emerged from the cambium still retained the orthoradial orientation, cellular growth eventually resulted in a switch towards a radial orientation. Such switching was not observed in the phloem, consistent with the prevalence of orthoradial inclines. Similar to the xylem however, phloem cells were typically in continuity with the corresponding cambial cell files, and practically no cell divisions, neither anticlinal nor periclinal, were observed. Importantly however, this was only observed for files of phloem parenchyma cells. The exceptions to this were cell files that ended up in vascular bundles. In these, numerous post-cambial divisions could be observed, both in the anticlinal and periclinal orientations. Finally, as expected the vast majority of cell divisions was observed in the cambium. Mostly, they occurred in a perfect periclinal orientation, but we also observed numerous interspersed anticlinal divisions that are necessary to keep up with overall radial expansion. In summary, the radial expansion of hypocotyls appeared to be mostly driven by cambial activity and very little by post-cambial cell divisions.</p>




  </div>

</section>
<section
    class="article-section "
   id="s2-12"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Phloem pole formation displays a precise periodicity</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Since there appeared to be no cessation of cell division in the cell files connecting the cambium and the vascular bundles, the data suggested that the patterning of phloem pole position might already be laid down in the cambium. Although such patterning was not evident from visual inspection of phloem pole distribution, a density map representation of phloem bundle cells suggested a spatial pattern of phloem poles positioning around the central xylem (<a href="#fig6">Figure 6A</a>). These density maps typically had limited resolution power around the cambial area, since newly born poles contain fewer bundle cells but are close in space, leading to a high and broad intensity region. For a more precise mapping of phloem pole positions, we thus analyzed 20, 25, and 30 dag sections obtained from transgenic Col-0 plants that expressed a beta-glucuronidase (GUS) reporter gene under the control of the phloem bundle-specific <i>ALTERED PHLOEM DEVELOPMENT (APL)</i> gene promoter (<a href="#bib1">Bonke et al., 2003</a>) (<a href="#fig1">Figure 1A</a>). Along a concentric ring-shaped region of interest across the emerging phloem poles, the latter appeared as dark foci of GUS staining with higher pixel intensity. In image analyses, these were detectable as intensity spikes (after noise reduction through the application of Gaussian blur, mainly to dampen background originating from the opacity of cell walls) (<a href="#fig6">Figure 6B</a>). Statistical analysis of the position of emerging phloem poles around the cambium revealed their spacing with a constant arc interspace distance. That is, the distance between emerging phloem poles remains constant over time as the cambial circumference enlarges. This was revealed by determination of the corresponding probability density function for the distance between the spikes by an automated Bayesian model (<a href="#bib11">Granqvist et al., 2012</a>), which indicates a constant arc interspace distance (<a href="#fig6">Figure 6C</a>) with a span of ca. 140 μm, suggesting that vascular bundle formation is a patterned rather than a stochastic process.</p>
    <div
        id="fig6"
        class="asset-viewer-inline asset-viewer-inline-- "
        data-variant=""
        data-behaviour="AssetNavigation AssetViewer ToggleableCaption"
        data-selector=".caption-text__body"
        data-asset-viewer-group="fig6"
        data-asset-viewer-uri="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/,1500/0/default.jpg"
        data-asset-viewer-width="647"
        data-asset-viewer-height="1500"
    >
    
      <div class="asset-viewer-inline__header_panel">
          <div class="asset-viewer-inline__header_text">
            <span class="asset-viewer-inline__header_text__prominent">Figure 6</span>
          </div>
    
    
            <div class="asset-viewer-inline__figure_access">
              <a href="https://elifesciences.org/download/aHR0cHM6Ly9paWlmLmVsaWZlc2NpZW5jZXMub3JnL2xheDowMTU2NyUyRmVsaWZlLTAxNTY3LWZpZzYtdjEudGlmL2Z1bGwvZnVsbC8wL2RlZmF1bHQuanBn/elife-01567-fig6-v1.jpg?_hash=maOR3%2BnlylfejepZRNCjVXHty1aOqPInUJJCkDDQQxQ%3D" class="asset-viewer-inline__download_all_link" download="Download"><span class="visuallyhidden">Download asset</span></a>
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/,1500/0/default.jpg" class="asset-viewer-inline__open_link" target="_blank" rel="noopener noreferrer"><span class="visuallyhidden">Open asset</span></a>
            </div>
    
      </div>
    
          <figure class="captioned-asset">
          
              <a href="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/,1500/0/default.jpg" class="captioned-asset__link" target="_blank" rel="noopener noreferrer">
              <picture class="captioned-asset__picture">
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/1234,/0/default.webp 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/617,/0/default.webp 1x"
                      type="image/webp"
                      >
                  <source srcset="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/1234,/0/default.jpg 2x, https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/617,/0/default.jpg 1x"
                      type="image/jpeg"
                      >
                  <img src="https://iiif.elifesciences.org/lax:01567%2Felife-01567-fig6-v1.tif/full/617,/0/default.jpg"
                       
                       alt=""
                       class="captioned-asset__image"
                  >
              </picture>
              </a>
          
          
          
          
              <figcaption class="captioned-asset__caption">
          
                  <h6 class="caption-text__heading">Mapping of phloem pole patterning.</h6>
                
                
                <div class="caption-text__body"><p class="paragraph">(<b>A</b>) Example of Gaussian kernel density estimate of the location of predicted phloem bundles cells in a 30 dag Col-0 section. High density represents phloem poles. (<b>B</b>) Example of an analysis of emerging phloem pole position in a 30 dag Col-0 section. The plot represents a pixel intensity map after noise reduction along a circular region of interest across the emerging phloem poles. Intensity peaks are due to GUS staining conferred to phloem bundles by an <i>APL::GUS</i> reporter construct. (<b>C</b>) Probability density function of the data shown in (<b>B</b>) obtained from an automated Bayesian model. The dominant single peak indicates a constant arc distance of ca. 62 pixel between the phloem poles.</p>
</div>
          
                  <span class="doi doi--asset"><a href="https://doi.org/10.7554/eLife.01567.011" class="doi__link">https://doi.org/10.7554/eLife.01567.011</a></span>
          
              </figcaption>
          
          
          
          
          </figure>
    
    
    </div>




  </div>

</section>




  </div>

</section>


                
                    <section
    class="article-section "
   id="s3"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Discussion</h2>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Secondary growth is a major developmental process in dicotyledons, including herbaceaous plants such as Arabidopsis (<a href="#bib3">Chaffey et al., 2002</a>; <a href="#bib23">Sibout et al., 2008</a>; <a href="#bib7">Elo et al., 2009</a>); however, it is comparatively an under-researched trait. In part, this can be attributed to the difficulty of investigating secondary growth in situ in a non-invasive manner, in part to the relatively big scale of the process. Both complications also contribute to the fact that a comprehensive description of secondary growth dynamics at the cellular level is still missing. In this study, we aimed to provide a robust quantitative description of secondary growth that could serve as a reference frame for future investigations. As a secondary growth system, we chose the Arabidopsis hypocotyl, which has been shown previously to pose various advantages as opposed to Arabidopsis stems, most notably the uncoupling of elongation growth and secondary growth (<a href="#bib23">Sibout et al., 2008</a>). While a high-throughput approach was necessary to obtain statistically solid data, high-resolution imaging was required for reliable cellular level analyses. A novel type of global approach, that is, quantitative histology combined with machine learning, was the only realistic option to achieve both goals.</p>
<section
    class="article-section "
   id="s3-1"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Quantitative histology, an automated and machine learning-based approach</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">The principal problems that we faced were the large range of cell sizes as well as the large number of objects within the hypocotyl radius. This required ultra high-resolution imaging of our cross sections as well as an automated segmentation procedure that would not require any seeding. The solution was the assembly of cross sections from tiled, partial high-resolution images and their segmentation through an automated pipeline that relied on a watershed algorithm. This pipeline achieved very good accuracy in object detection, but was still CPU intensive. In part, this could be off set by binarization of the images using an adaptive Gaussian filter, which greatly accelerated the segmentation procedure. We could compensate an associated decrease in segmentation quality (because watershed segmentation is more accurate on gray scale images) by effectuating morphological operations on the binarized images, thereby keeping segmentation accuracy high while automating the task. Extending our approach beyond simple cell counting to cell type recognition intrinsically hinged on supervised classification. To this end, we used the Support Vector Machine (SVM) method, because it had already proven its efficiency in a broad range of life science applications (<a href="#bib18">Noble, 2006</a>). Average prediction accuracy based on this method was generally high, however for some cell type categories it was more variable at times. This was due to the nature of the classifiers, which were chosen to optimize for overall accuracy including all cell type categories. Implementation of our quality control tool alleviated this effect, however it is noteworthy that even more accurate classifiers can be identified for analyses that focus on a given cell type or a given time point, extending the range of potential applications of our pipeline.</p>




  </div>

</section>
<section
    class="article-section "
   id="s3-2"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Morphology-based classification of plant cells</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">The use of shape characteristics for cell classification was pioneered by Olson et al., who classified mammalian culture cells into three groups using hierarchical cluster analysis and nearest neighbor analysis (<a href="#bib19">Olson et al., 1980</a>). Recent improvements in this area largely benefit from SVM algorithm development, which can take multiple features into account. For instance, a recent study identified factors involved in the transition between cell shapes using automated phenotyping of human cell cultures that took advantage of fluorescent staining for DNA, tubulin and actin on top of cell morphology (<a href="#bib10">Fuchs et al., 2010</a>). Conceptually similar, another study exploited cell shape in combination with fluorescent characteristics upon nuclear and cytoskeleton staining in Drosophila (<a href="#bib27">Yin et al., 2013</a>). However, classification based solely on cell morphology has also been applied to human cells (<a href="#bib25">Theriault et al., 2012</a>). Whereas all of these studies investigated isolated cells in culture, we had to apply morphology-based classification to cells that were embedded in their tissue and in a developmental context. While this complicated the analysis, it also offered the opportunity to assign spatial coordinates to the cells, which could be integrated on top of characteristics of cell geometry to build our classifiers. Average true prediction accuracy in the cited studies was in the range of 83–90%, as compared to 88% in our study. Notably however, our cell type assignment precision was greatly increased by our post-machine learning quality control pipeline, which enabled us to fix the principal classes with lower accuracy, due to frequent SVM confusion between xylem vessels and phloem parenchyma cells. Thereby, we successfully classified up to five cell type categories in a time course experiment where the number of cells ranged from a few hundred to several thousand. The factors that limited our approach were to some degree related to the properties of plant cells, notably that they are encapsulated by rigid cell walls that resist the internal turgor pressure. Their cellular geometry is therefore not only shaped by the material properties of the walls, but also by the permanent force of turgor pressure, manifesting in the reduced variation of cell shape in plants as compared to animals (<a href="#bib25">Theriault et al., 2012</a>). To some degree, this uniformity in cell shape hampered the identification of certain cell states by our machine learning approach, for instance the direct identification of dividing cells. Similarly, certain cell types were ticklish to distinguish by their morphology only. For instance, we were not able to separate phloem companion cells from sieve elements or xylem parenchyma cells from xylem vessels across all time points, which therefore had to be grouped into combined categories. Adding tissue-related features, such as cell connectivity (i.e., the number of neighboring cells), and improving the segmentation algorithm such that cell wall thickness could be incorporated into the analyses might overcome these obstacles and greatly increase performance. Future efforts should go into this direction and could also boost the universal application of our approach. The latter should be possible for any tissue or organ from which cell outlines can be segmented after imaging and for which a reference point can be defined, for example (partial) sections from tree trunks or confocal images of root meristems.</p>




  </div>

</section>
<section
    class="article-section "
   id="s3-3"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Vascular morphodynamics—a combination of molecular patterning and mechanical constraints?</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">For the subsequent cellular level analysis, the incline angle descriptor of a cell proved to be particularly valuable. Whereas no temporal changes were discernible for the cell area and the cell eccentricity features, the cell incline distribution varied over time, in a seemingly non-random fashion. Indeed, combination with spatial components (i.e., radial cell position in cross sections) revealed spatio-temporal rearrangement of inclines across a sequence of intertwined morphodynamic events. Our data indicate a gradual increase and arrangement of cambial cells, which together with orthoradial cellular organization of the surrounding tissues appeared to be a prerequisite for proper xylem development and relative xylem expansion around 20–25 dag. One possible explanation for this phenomenon could be tissue mechanics. The growing xylem area might exert a compression force on surrounding cambial and parenchymal cells, forcing them into tangential anisotropic cell elongation. How such mechanical stress is perceived and conveyed into cellular behavior is largely enigmatic and an emerging hot topic in plant biology, where first studies on shoot apical meristem formation have implicated katanins in the dynamic reorientation of microtubules perpendicular to stress direction (<a href="#bib26">Uyttewaal et al., 2012</a>).</p>
<p class="paragraph">Beyond possible mechanical constraints, molecular genetic patterning is clearly pivotal in vascular morphodynamics. For instance, polarity of the cambium to produce xylem to the inside and phloem to the outside is an inherent feature of secondary growth. A receptor-like kinase—peptide ligand pair is involved in this process and interacts with hormone signaling pathways (<a href="#bib14">Hirakawa et al., 2008</a>, <a href="#bib13">2010</a>; <a href="#bib9">Etchells et al., 2012</a>). Notably, the phenotypic penetrance of the respective mutants is background-dependent, with stronger effects in Ler than in Col-0 (<a href="#bib8">Etchells et al., 2013</a>). It would be interesting to investigate whether this could result from an interaction with the earlier cessation of phloem production we observed in Ler.</p>




  </div>

</section>
<section
    class="article-section "
   id="s3-4"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Differential secondary growth dynamics in Col-0 vs Ler</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">The early cessation of phloem production in Ler as compared to Col-0 does, however, not reflect an earlier termination of overall growth in Ler. Rather it appears that phloem production in Ler ceases before xylem production and contributes to the divergent growth dynamics in the two genotypes. The severely reduced overall cell production in Ler as compared to Col-0 can be mainly attributed to reduced phloem and cambium cell number, and is responsible for the higher relative proportion of xylem area that had been reported earlier (<a href="#bib21">Ragni et al., 2011</a>). Interestingly, the nearly 50% reduction in overall cell number does not mean that growth is uniformly slower in Ler. Rather, initial secondary growth appears to be particularly slow in Ler as indicated by more than threefold difference in cell number at 15 dag. This is followed by an acceleration of cell production that surpasses Col-0 in relative terms between 15 dag and 25 dag, before dropping to Col-0 levels between 25 dag and 35 dag. This pattern is also evident from the principal component analysis, in which both Col-0 and Ler reach overall similar end points. Thus, our analysis along a series of time points has revealed highly divergent secondary growth dynamics in the genotypes that would not have been evident from a comparison of end points.</p>




  </div>

</section>
<section
    class="article-section "
   id="s3-5"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Morphometric evidence for a phloem patterning mechanism</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">Beyond the cellular dimensions, our quantitative histology approach also allowed us to conduct follow up analyses to reveal developmental patterns that were not evident from simple visual inspection. For instance, we found a constant arc interspace distance for phloem pole formation along the developmental time series with a concomitant decrease in the interspace angle due to the overall secondary growth. A reaction-diffusion model with a growing boundary (i.e., representing the expanding xylem area) would be consistent with these results. Local production of the above-mentioned mobile ligand and activation of its receptor at a distance are potential candidates for such a mechanism. Alternatively, patterning cues from apical sources might direct phloem pole formation, for instance to coordinate it with phyllotaxy. Application of our quantitative histology approach to complementary stem sections could present one way to explore these possibilities.</p>




  </div>

</section>




  </div>

</section>


                
                    <section
    class="article-section "
   id="s4"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Materials and methods</h2>
  </header>

  <div class="article-section__body">
      <section
    class="article-section "
   id="s4-1"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Plant material, sectioning and image acquisition</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">The <i>Arabidopsis thaliana</i> Col-0, Ler or <i>APL::GUS</i> (<a href="#bib1">Bonke et al., 2003</a>) lines were grown in soil, in a 16 hr light–8 hr dark cycle mimicking long day conditions under white light of ca. 150 μE intensity. After harvest, hypocotyls were immediately fixed and embedded in Technovit plastic resin before toluidine blue staining as described (<a href="#bib23">Sibout et al., 2008</a>; <a href="#bib21">Ragni et al., 2011</a>). Sections of 3-μm thickness were then obtained using a Leica RM2255 microtome and were subsequently imaged on a Zeiss LSM 710 confocal microscope in transmitted light mode at 40x magnification using the automated tiling function. Hypocotyls from <i>APL::GUS</i> plants were subjected to GUS staining before fixation, embedding and sectioning as described (<a href="#bib23">Sibout et al., 2008</a>; <a href="#bib21">Ragni et al., 2011</a>) and imaged using a Leica DM 5500 microscope.</p>




  </div>

</section>
<section
    class="article-section "
   id="s4-2"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Quantitative histology</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">To extract information content of the sections at cellular resolution, we developed an automated image analysis pipeline. The pipeline was written in python with calls to R scripts and ImageJ macros. In brief, images were first pre-processed automatically (i.e., gamma correction, contrast, and brightness adjustment) before their binarization. A series of morphological operations (two times an erosion operation followed by a dilatation operation) were applied with the aim to discard noisy pixels and regularize the cell boundaries. These steps were achieved using to the EBImage R package (<a href="#bib20">Pau et al., 2010</a>). A variant watershed algorithm with automatic seeding (<a href="http://bigwww.epfl.ch/sage/soft/watershed">http://bigwww.epfl.ch/sage/soft/watershed</a>) was used to identify the cell boundaries. Each cell was then characterized by a vector composed of 16 components that comprised 10 geometrical and 6 positional features (<a href="/articles/01567/figures#SD1-data">Supplementary file 1A</a>) and was classified into one of the 5 cell-type classes (<a href="/articles/01567/figures#SD1-data">Supplementary file 1B</a>). One classifier was built per genotype and per time point (<a href="/articles/01567/figures#SD1-data">Supplementary file 1C</a>) using the <i>C</i>-classification with a radial basis function (RBF) kernel of the support vector machine (<a href="#bib5">Cortes and Vapnik, 1995</a>) provided by the e1071 package, the R interface for the libsvm library (<a href="#bib4">Chang and Lin, 2001</a>). The training set for the machine learning comprised 3144 manually labeled cells across 20 sections that covered all time points and genotypes. The optimal parameters, the selected features and the classifier accuracies are given in <a href="/articles/01567/figures#SD1-data">Supplementary file 1D</a>.</p>




  </div>

</section>
<section
    class="article-section "
   id="s4-3"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Phenoprints and comparison</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">To compare secondary growth progression in the two genotypes, we described each developmental stage in a ‘phenoprint’ that represents a vector combined of 8 numerical values (<a href="#fig2">Figure 2B</a>). For principal component analysis (PCA), each observable was scaled with respect to the maximum value to obtain a unit range across variables (<a href="/articles/01567/figures#SD4-data">Supplementary file 4</a>). We performed a PCA analysis by computing the eigenvalues and eigenvectors for the correlation matrix. The resulting two first principal components were displayed with a bi-plot representation. The rotation angle between the vector variables represents the correlation between two phenoprints (&gt;90° meaning no correlation). This method allowed direct quantitative comparison of the phenotypic variability of our samples.</p>




  </div>

</section>
<section
    class="article-section "
   id="s4-4"
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Phloem pole pattern analysis</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">To automatically map phloem pole positions in sections obtained from <i>APL::GUS</i> plants, a circular region of interest (ROI) across the newly generated phloem bundles that was concentric with the section center was defined and GUS staining intensity was measured along the ROI using ImageJ software. For each image, the period between phloem poles was detected using an automated Bayesian model (<a href="#bib11">Granqvist et al., 2012</a>), corresponding to the most likely occurring arc interspace distance between two phloem poles.</p>




  </div>

</section>




  </div>

</section>


                
                    <button class="speech-bubble speech-bubble--has-placeholder"
        data-behaviour="SpeechBubble HypothesisOpener"
  
aria-live="polite">
  <span class="speech-bubble__inner"><span aria-hidden="true"><span data-visible-annotation-count>&#8220;</span></span><span class="visuallyhidden"> Open annotations. The current annotation count on this page is <span data-hypothesis-annotation-count>being calculated</span>.</span></span>
</button>


                
                    <section
    class="article-section "
   id="references"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">References</h2>
  </header>

  <div class="article-section__body">
      
<ol class="reference-list">
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">1</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib1" id="bib1">
        
        
            <a href="https://doi.org/10.1038/nature02100" class="reference__title">APL regulates vascular tissue identity in Arabidopsis</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Bonke%22" class="reference__authors_link">M Bonke</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:S+Thitamadee%22" class="reference__authors_link">S Thitamadee</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:AP+Mahonen%22" class="reference__authors_link">AP Mahonen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:MT+Hauser%22" class="reference__authors_link">MT Hauser</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Helariutta%22" class="reference__authors_link">Y Helariutta</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2003)</span>
        
            <div class="reference__origin"><i>Nature</i> <b>426</b>:181–186.</div>
        
            <span class="doi"><a href="https://doi.org/10.1038/nature02100" class="doi__link">https://doi.org/10.1038/nature02100</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=APL+regulates+vascular+tissue+identity+in+Arabidopsis&amp;author=M+Bonke&amp;author=S+Thitamadee&amp;author%5B2%5D=AP+Mahonen&amp;author%5B3%5D=MT+Hauser&amp;author%5B4%5D=Y+Helariutta&amp;publication_year=2003&amp;journal=Nature&amp;volume=426&amp;pages=pp.+181%E2%80%93186" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">2</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib2" id="bib2">
        
        
            <a href="https://doi.org/10.1534/genetics.109.104976" class="reference__title">In the beginning was the worm</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:S+Brenner%22" class="reference__authors_link">S Brenner</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2009)</span>
        
            <div class="reference__origin"><i>Genetics</i> <b>182</b>:413–415.</div>
        
            <span class="doi"><a href="https://doi.org/10.1534/genetics.109.104976" class="doi__link">https://doi.org/10.1534/genetics.109.104976</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=In+the+beginning+was+the+worm&amp;author=S+Brenner&amp;publication_year=2009&amp;journal=Genetics&amp;volume=182&amp;pages=pp.+413%E2%80%93415" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">3</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib3" id="bib3">
        
        
            <a href="https://doi.org/10.1034/j.1399-3054.2002.1140413.x" class="reference__title">Secondary xylem development in Arabidopsis: a model for wood formation</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:N+Chaffey%22" class="reference__authors_link">N Chaffey</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:E+Cholewa%22" class="reference__authors_link">E Cholewa</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:S+Regan%22" class="reference__authors_link">S Regan</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:B+Sundberg%22" class="reference__authors_link">B Sundberg</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2002)</span>
        
            <div class="reference__origin"><i>Physiologia Plantarum</i> <b>114</b>:594–600.</div>
        
            <span class="doi"><a href="https://doi.org/10.1034/j.1399-3054.2002.1140413.x" class="doi__link">https://doi.org/10.1034/j.1399-3054.2002.1140413.x</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Secondary+xylem+development+in+Arabidopsis%3A+a+model+for+wood+formation&amp;author=N+Chaffey&amp;author=E+Cholewa&amp;author%5B2%5D=S+Regan&amp;author%5B3%5D=B+Sundberg&amp;publication_year=2002&amp;journal=Physiologia+Plantarum&amp;volume=114&amp;pages=pp.+594%E2%80%93600" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">4</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib4" id="bib4">
        
        
            <a href="https://doi.org/10.1162/089976601750399335" class="reference__title">Training nu-support vector classifiers: theory and algorithms</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CC+Chang%22" class="reference__authors_link">CC Chang</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CJ+Lin%22" class="reference__authors_link">CJ Lin</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2001)</span>
        
            <div class="reference__origin"><i>Neural computation</i> <b>13</b>:2119–2147.</div>
        
            <span class="doi"><a href="https://doi.org/10.1162/089976601750399335" class="doi__link">https://doi.org/10.1162/089976601750399335</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Training+nu-support+vector+classifiers%3A+theory+and+algorithms&amp;author=CC+Chang&amp;author=CJ+Lin&amp;publication_year=2001&amp;journal=Neural+computation&amp;volume=13&amp;pages=pp.+2119%E2%80%932147" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">5</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib5" id="bib5">
        
        
        
        
              <div class="reference__title">Support-vector Networks</div>
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:C+Cortes%22" class="reference__authors_link">C Cortes</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:V+Vapnik%22" class="reference__authors_link">V Vapnik</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(1995)</span>
        
            <div class="reference__origin"><i>Machine Learning</i> <b>20</b>:273–297.</div>
        
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Support-vector+Networks&amp;author=C+Cortes&amp;author=V+Vapnik&amp;publication_year=1995&amp;journal=Machine+Learning&amp;volume=20&amp;pages=pp.+273%E2%80%93297" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">6</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib6" id="bib6">
        
        
        
        
              <div class="reference__title">Cellular organisation of the <i>Arabidopsis thaliana</i> root</div>
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:L+Dolan%22" class="reference__authors_link">L Dolan</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:K+Janmaat%22" class="reference__authors_link">K Janmaat</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:V+Willemsen%22" class="reference__authors_link">V Willemsen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:P+Linstead%22" class="reference__authors_link">P Linstead</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:S+Poethig%22" class="reference__authors_link">S Poethig</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:K+Roberts%22" class="reference__authors_link">K Roberts</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:B+Scheres%22" class="reference__authors_link">B Scheres</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(1993)</span>
        
            <div class="reference__origin"><i>Development</i> <b>119</b>:71–84.</div>
        
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Cellular+organisation+of+the+Arabidopsis+thaliana+root&amp;author=L+Dolan&amp;author=K+Janmaat&amp;author%5B2%5D=V+Willemsen&amp;author%5B3%5D=P+Linstead&amp;author%5B4%5D=S+Poethig&amp;author%5B5%5D=K+Roberts&amp;author%5B6%5D=B+Scheres&amp;publication_year=1993&amp;journal=Development&amp;volume=119&amp;pages=pp.+71%E2%80%9384" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">7</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib7" id="bib7">
        
        
            <a href="https://doi.org/10.1016/j.semcdb.2009.09.009" class="reference__title">Stem cell function during plant vascular development</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Elo%22" class="reference__authors_link">A Elo</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:J+Immanen%22" class="reference__authors_link">J Immanen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:K+Nieminen%22" class="reference__authors_link">K Nieminen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Helariutta%22" class="reference__authors_link">Y Helariutta</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2009)</span>
        
            <div class="reference__origin"><i>Seminars in Cell & Developmental Biology</i> <b>20</b>:1097–1106.</div>
        
            <span class="doi"><a href="https://doi.org/10.1016/j.semcdb.2009.09.009" class="doi__link">https://doi.org/10.1016/j.semcdb.2009.09.009</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Stem+cell+function+during+plant+vascular+development&amp;author=A+Elo&amp;author=J+Immanen&amp;author%5B2%5D=K+Nieminen&amp;author%5B3%5D=Y+Helariutta&amp;publication_year=2009&amp;journal=Seminars+in+Cell+%26+Developmental+Biology&amp;volume=20&amp;pages=pp.+1097%E2%80%931106" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">8</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib8" id="bib8">
        
        
            <a href="https://doi.org/10.1242/dev.091314" class="reference__title">WOX4 and WOX14 act downstream of the PXY receptor kinase to regulate plant vascular proliferation independently of any role in vascular organisation</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:JP+Etchells%22" class="reference__authors_link">JP Etchells</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CM+Provost%22" class="reference__authors_link">CM Provost</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:L+Mishra%22" class="reference__authors_link">L Mishra</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:SR+Turner%22" class="reference__authors_link">SR Turner</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2013)</span>
        
            <div class="reference__origin"><i>Development</i> <b>140</b>:2224–2234.</div>
        
            <span class="doi"><a href="https://doi.org/10.1242/dev.091314" class="doi__link">https://doi.org/10.1242/dev.091314</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=WOX4+and+WOX14+act+downstream+of+the+PXY+receptor+kinase+to+regulate+plant+vascular+proliferation+independently+of+any+role+in+vascular+organisation&amp;author=JP+Etchells&amp;author=CM+Provost&amp;author%5B2%5D=L+Mishra&amp;author%5B3%5D=SR+Turner&amp;publication_year=2013&amp;journal=Development&amp;volume=140&amp;pages=pp.+2224%E2%80%932234" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">9</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib9" id="bib9">
        
        
            <a href="https://doi.org/10.1371/journal.pgen.1002997" class="reference__title">Plant vascular cell division is maintained by an interaction between PXY and ethylene signalling</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:JP+Etchells%22" class="reference__authors_link">JP Etchells</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CM+Provost%22" class="reference__authors_link">CM Provost</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:SR+Turner%22" class="reference__authors_link">SR Turner</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2012)</span>
        
            <div class="reference__origin"><i>PLOS Genetics</i> <b>8</b>:e1002997.</div>
        
            <span class="doi"><a href="https://doi.org/10.1371/journal.pgen.1002997" class="doi__link">https://doi.org/10.1371/journal.pgen.1002997</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Plant+vascular+cell+division+is+maintained+by+an+interaction+between+PXY+and+ethylene+signalling&amp;author=JP+Etchells&amp;author=CM+Provost&amp;author%5B2%5D=SR+Turner&amp;publication_year=2012&amp;journal=PLOS+Genetics&amp;volume=8&amp;pages=e1002997" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">10</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib10" id="bib10">
        
        
            <a href="https://doi.org/10.1038/msb.2010.25" class="reference__title">Clustering phenotype populations by genome-wide RNAi and multiparametric imaging</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:F+Fuchs%22" class="reference__authors_link">F Fuchs</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:G+Pau%22" class="reference__authors_link">G Pau</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:D+Kranz%22" class="reference__authors_link">D Kranz</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:O+Sklyar%22" class="reference__authors_link">O Sklyar</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:C+Budjan%22" class="reference__authors_link">C Budjan</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:S+Steinbrink%22" class="reference__authors_link">S Steinbrink</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:T+Horn%22" class="reference__authors_link">T Horn</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Pedal%22" class="reference__authors_link">A Pedal</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:W+Huber%22" class="reference__authors_link">W Huber</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Boutros%22" class="reference__authors_link">M Boutros</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2010)</span>
        
            <div class="reference__origin"><i>Molecular Systems Biology</i> <b>6</b>:370.</div>
        
            <span class="doi"><a href="https://doi.org/10.1038/msb.2010.25" class="doi__link">https://doi.org/10.1038/msb.2010.25</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Clustering+phenotype+populations+by+genome-wide+RNAi+and+multiparametric+imaging&amp;author=F+Fuchs&amp;author=G+Pau&amp;author%5B2%5D=D+Kranz&amp;author%5B3%5D=O+Sklyar&amp;author%5B4%5D=C+Budjan&amp;author%5B5%5D=S+Steinbrink&amp;author%5B6%5D=T+Horn&amp;author%5B7%5D=A+Pedal&amp;author%5B8%5D=W+Huber&amp;author%5B9%5D=M+Boutros&amp;publication_year=2010&amp;journal=Molecular+Systems+Biology&amp;volume=6&amp;pages=370" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">11</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib11" id="bib11">
        
        
            <a href="https://doi.org/10.1016/j.biosystems.2012.07.004" class="reference__title">BaSAR-A tool in R for frequency detection</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:E+Granqvist%22" class="reference__authors_link">E Granqvist</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Hartley%22" class="reference__authors_link">M Hartley</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:RJ+Morris%22" class="reference__authors_link">RJ Morris</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2012)</span>
        
            <div class="reference__origin"><i>Bio Systems</i> <b>110</b>:60–63.</div>
        
            <span class="doi"><a href="https://doi.org/10.1016/j.biosystems.2012.07.004" class="doi__link">https://doi.org/10.1016/j.biosystems.2012.07.004</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=BaSAR-A+tool+in+R+for+frequency+detection&amp;author=E+Granqvist&amp;author=M+Hartley&amp;author%5B2%5D=RJ+Morris&amp;publication_year=2012&amp;journal=Bio+Systems&amp;volume=110&amp;pages=pp.+60%E2%80%9363" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">12</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib12" id="bib12">
        
        
            <a href="https://doi.org/10.1016/j.pbi.2005.11.013" class="reference__title">Developmental mechanisms regulating secondary growth in woody plants</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Groover%22" class="reference__authors_link">A Groover</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Robischon%22" class="reference__authors_link">M Robischon</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2006)</span>
        
            <div class="reference__origin"><i>Current Opinion in Plant Biology</i> <b>9</b>:55–58.</div>
        
            <span class="doi"><a href="https://doi.org/10.1016/j.pbi.2005.11.013" class="doi__link">https://doi.org/10.1016/j.pbi.2005.11.013</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Developmental+mechanisms+regulating+secondary+growth+in+woody+plants&amp;author=A+Groover&amp;author=M+Robischon&amp;publication_year=2006&amp;journal=Current+Opinion+in+Plant+Biology&amp;volume=9&amp;pages=pp.+55%E2%80%9358" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">13</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib13" id="bib13">
        
        
            <a href="https://doi.org/10.1105/tpc.110.076083" class="reference__title">TDIF peptide signaling regulates vascular stem cell proliferation via the WOX4 homeobox gene in Arabidopsis</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Hirakawa%22" class="reference__authors_link">Y Hirakawa</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Kondo%22" class="reference__authors_link">Y Kondo</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:H+Fukuda%22" class="reference__authors_link">H Fukuda</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2010)</span>
        
            <div class="reference__origin"><i>Plant Cell</i> <b>22</b>:2618–2629.</div>
        
            <span class="doi"><a href="https://doi.org/10.1105/tpc.110.076083" class="doi__link">https://doi.org/10.1105/tpc.110.076083</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=TDIF+peptide+signaling+regulates+vascular+stem+cell+proliferation+via+the+WOX4+homeobox+gene+in+Arabidopsis&amp;author=Y+Hirakawa&amp;author=Y+Kondo&amp;author%5B2%5D=H+Fukuda&amp;publication_year=2010&amp;journal=Plant+Cell&amp;volume=22&amp;pages=pp.+2618%E2%80%932629" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">14</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib14" id="bib14">
        
        
            <a href="https://doi.org/10.1073/pnas.0808444105" class="reference__title">Non-cell-autonomous control of vascular stem cell fate by a CLE peptide/receptor system</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Hirakawa%22" class="reference__authors_link">Y Hirakawa</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:H+Shinohara%22" class="reference__authors_link">H Shinohara</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Kondo%22" class="reference__authors_link">Y Kondo</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Inoue%22" class="reference__authors_link">A Inoue</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:I+Nakanomyo%22" class="reference__authors_link">I Nakanomyo</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Ogawa%22" class="reference__authors_link">M Ogawa</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:S+Sawa%22" class="reference__authors_link">S Sawa</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:K+Ohashi-Ito%22" class="reference__authors_link">K Ohashi-Ito</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Matsubayashi%22" class="reference__authors_link">Y Matsubayashi</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:H+Fukuda%22" class="reference__authors_link">H Fukuda</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2008)</span>
        
            <div class="reference__origin"><i>Proceedings of the National Academy of Sciences of the United States of America</i> <b>105</b>:15208–15213.</div>
        
            <span class="doi"><a href="https://doi.org/10.1073/pnas.0808444105" class="doi__link">https://doi.org/10.1073/pnas.0808444105</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Non-cell-autonomous+control+of+vascular+stem+cell+fate+by+a+CLE+peptide%2Freceptor+system&amp;author=Y+Hirakawa&amp;author=H+Shinohara&amp;author%5B2%5D=Y+Kondo&amp;author%5B3%5D=A+Inoue&amp;author%5B4%5D=I+Nakanomyo&amp;author%5B5%5D=M+Ogawa&amp;author%5B6%5D=S+Sawa&amp;author%5B7%5D=K+Ohashi-Ito&amp;author%5B8%5D=Y+Matsubayashi&amp;author%5B9%5D=H+Fukuda&amp;publication_year=2008&amp;journal=Proceedings+of+the+National+Academy+of+Sciences+of+the+United+States+of+America&amp;volume=105&amp;pages=pp.+15208%E2%80%9315213" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">15</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib15" id="bib15">
        
        
            <a href="https://doi.org/10.1016/0092-8674(89)90900-8" class="reference__title">Arabidopsis, a useful weed</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:EM+Meyerowitz%22" class="reference__authors_link">EM Meyerowitz</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(1989)</span>
        
            <div class="reference__origin"><i>Cell</i> <b>56</b>:263–269.</div>
        
            <span class="doi"><a href="https://doi.org/10.1016/0092-8674(89)90900-8" class="doi__link">https://doi.org/10.1016/0092-8674(89)90900-8</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Arabidopsis%2C+a+useful+weed&amp;author=EM+Meyerowitz&amp;publication_year=1989&amp;journal=Cell&amp;volume=56&amp;pages=pp.+263%E2%80%93269" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">16</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib16" id="bib16">
        
        
            <a href="https://doi.org/10.1126/science.1066609" class="reference__title">Plants compared to animals: the broadest comparative study of development</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:EM+Meyerowitz%22" class="reference__authors_link">EM Meyerowitz</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2002)</span>
        
            <div class="reference__origin"><i>Science</i> <b>295</b>:1482–1485.</div>
        
            <span class="doi"><a href="https://doi.org/10.1126/science.1066609" class="doi__link">https://doi.org/10.1126/science.1066609</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Plants+compared+to+animals%3A+the+broadest+comparative+study+of+development&amp;author=EM+Meyerowitz&amp;publication_year=2002&amp;journal=Science&amp;volume=295&amp;pages=pp.+1482%E2%80%931485" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">17</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib17" id="bib17">
        
        
            <a href="https://doi.org/10.1104/pp.104.040212" class="reference__title">A weed for wood? Arabidopsis as a genetic model for xylem development</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:KM+Nieminen%22" class="reference__authors_link">KM Nieminen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:L+Kauppinen%22" class="reference__authors_link">L Kauppinen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Y+Helariutta%22" class="reference__authors_link">Y Helariutta</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2004)</span>
        
            <div class="reference__origin"><i>Plant Physiol</i> <b>135</b>:653–659.</div>
        
            <span class="doi"><a href="https://doi.org/10.1104/pp.104.040212" class="doi__link">https://doi.org/10.1104/pp.104.040212</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=A+weed+for+wood%3F+Arabidopsis+as+a+genetic+model+for+xylem+development&amp;author=KM+Nieminen&amp;author=L+Kauppinen&amp;author%5B2%5D=Y+Helariutta&amp;publication_year=2004&amp;journal=Plant+Physiol&amp;volume=135&amp;pages=pp.+653%E2%80%93659" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">18</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib18" id="bib18">
        
        
            <a href="https://doi.org/10.1038/nbt1206-1565" class="reference__title">What is a support vector machine?</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:WS+Noble%22" class="reference__authors_link">WS Noble</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2006)</span>
        
            <div class="reference__origin"><i>Nature Biotechnology</i> <b>24</b>:1565–1567.</div>
        
            <span class="doi"><a href="https://doi.org/10.1038/nbt1206-1565" class="doi__link">https://doi.org/10.1038/nbt1206-1565</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=What+is+a+support+vector+machine%3F&amp;author=WS+Noble&amp;publication_year=2006&amp;journal=Nature+Biotechnology&amp;volume=24&amp;pages=pp.+1565%E2%80%931567" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">19</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib19" id="bib19">
        
        
            <a href="https://doi.org/10.1073/pnas.77.3.1516" class="reference__title">Classification of cultured mammalian cells by shape analysis and pattern recognition</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:AC+Olson%22" class="reference__authors_link">AC Olson</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:NM+Larson%22" class="reference__authors_link">NM Larson</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CA+Heckman%22" class="reference__authors_link">CA Heckman</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(1980)</span>
        
            <div class="reference__origin"><i>Proceedings of the National Academy of Sciences of the United States of America</i> <b>77</b>:1516–1520.</div>
        
            <span class="doi"><a href="https://doi.org/10.1073/pnas.77.3.1516" class="doi__link">https://doi.org/10.1073/pnas.77.3.1516</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Classification+of+cultured+mammalian+cells+by+shape+analysis+and+pattern+recognition&amp;author=AC+Olson&amp;author=NM+Larson&amp;author%5B2%5D=CA+Heckman&amp;publication_year=1980&amp;journal=Proceedings+of+the+National+Academy+of+Sciences+of+the+United+States+of+America&amp;volume=77&amp;pages=pp.+1516%E2%80%931520" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">20</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib20" id="bib20">
        
        
            <a href="https://doi.org/10.1093/bioinformatics/btq046" class="reference__title">EBImage–an R package for image processing with applications to cellular phenotypes</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:G+Pau%22" class="reference__authors_link">G Pau</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:F+Fuchs%22" class="reference__authors_link">F Fuchs</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:O+Sklyar%22" class="reference__authors_link">O Sklyar</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Boutros%22" class="reference__authors_link">M Boutros</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:W+Huber%22" class="reference__authors_link">W Huber</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2010)</span>
        
            <div class="reference__origin"><i>Bioinformatics</i> <b>26</b>:979–981.</div>
        
            <span class="doi"><a href="https://doi.org/10.1093/bioinformatics/btq046" class="doi__link">https://doi.org/10.1093/bioinformatics/btq046</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=EBImage%E2%80%93an+R+package+for+image+processing+with+applications+to+cellular+phenotypes&amp;author=G+Pau&amp;author=F+Fuchs&amp;author%5B2%5D=O+Sklyar&amp;author%5B3%5D=M+Boutros&amp;author%5B4%5D=W+Huber&amp;publication_year=2010&amp;journal=Bioinformatics&amp;volume=26&amp;pages=pp.+979%E2%80%93981" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">21</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib21" id="bib21">
        
        
            <a href="https://doi.org/10.1105/tpc.111.084020" class="reference__title">Mobile gibberellin directly stimulates Arabidopsis hypocotyl xylem expansion</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:L+Ragni%22" class="reference__authors_link">L Ragni</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:K+Nieminen%22" class="reference__authors_link">K Nieminen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:D+Pacheco-Villalobos%22" class="reference__authors_link">D Pacheco-Villalobos</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:R+Sibout%22" class="reference__authors_link">R Sibout</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:C+Schwechheimer%22" class="reference__authors_link">C Schwechheimer</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CS+Hardtke%22" class="reference__authors_link">CS Hardtke</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2011)</span>
        
            <div class="reference__origin"><i>Plant Cell</i> <b>23</b>:1322–1336.</div>
        
            <span class="doi"><a href="https://doi.org/10.1105/tpc.111.084020" class="doi__link">https://doi.org/10.1105/tpc.111.084020</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Mobile+gibberellin+directly+stimulates+Arabidopsis+hypocotyl+xylem+expansion&amp;author=L+Ragni&amp;author=K+Nieminen&amp;author%5B2%5D=D+Pacheco-Villalobos&amp;author%5B3%5D=R+Sibout&amp;author%5B4%5D=C+Schwechheimer&amp;author%5B5%5D=CS+Hardtke&amp;publication_year=2011&amp;journal=Plant+Cell&amp;volume=23&amp;pages=pp.+1322%E2%80%931336" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">22</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib22" id="bib22">
        
        
        
        
              <div class="reference__title">Data from: Automated quantitative histology reveals vascular morphodynamics during Arabidopsis hypocotyl secondary growth</div>
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Sankar%22" class="reference__authors_link">M Sankar</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:K+Nieminen%22" class="reference__authors_link">K Nieminen</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:L+Ragni%22" class="reference__authors_link">L Ragni</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:I+Xenarios%22" class="reference__authors_link">I Xenarios</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CS+Hardtke%22" class="reference__authors_link">CS Hardtke</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2014)</span>
        
            <div class="reference__origin">Dryad Digital Repository, 10.5061/dryad.b835k.</div>
        
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Data+from%3A+Automated+quantitative+histology+reveals+vascular+morphodynamics+during+Arabidopsis+hypocotyl+secondary+growth&amp;author=M+Sankar&amp;author=K+Nieminen&amp;author%5B2%5D=L+Ragni&amp;author%5B3%5D=I+Xenarios&amp;author%5B4%5D=CS+Hardtke&amp;publication_year=2014" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">23</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib23" id="bib23">
        
        
            <a href="https://doi.org/10.1016/j.cub.2008.02.070" class="reference__title">Flowering as a condition for xylem expansion in Arabidopsis hypocotyl and root</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:R+Sibout%22" class="reference__authors_link">R Sibout</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:S+Plantegenet%22" class="reference__authors_link">S Plantegenet</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CS+Hardtke%22" class="reference__authors_link">CS Hardtke</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2008)</span>
        
            <div class="reference__origin"><i>Current Biology</i> <b>18</b>:458–463.</div>
        
            <span class="doi"><a href="https://doi.org/10.1016/j.cub.2008.02.070" class="doi__link">https://doi.org/10.1016/j.cub.2008.02.070</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Flowering+as+a+condition+for+xylem+expansion+in+Arabidopsis+hypocotyl+and+root&amp;author=R+Sibout&amp;author=S+Plantegenet&amp;author%5B2%5D=CS+Hardtke&amp;publication_year=2008&amp;journal=Current+Biology&amp;volume=18&amp;pages=pp.+458%E2%80%93463" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">24</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib24" id="bib24">
        
        
            <a href="https://doi.org/10.1111/j.1469-8137.2010.03236.x" class="reference__title">Evolution of development of vascular cambia and secondary growth</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:R+Spicer%22" class="reference__authors_link">R Spicer</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Groover%22" class="reference__authors_link">A Groover</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2010)</span>
        
            <div class="reference__origin"><i>The New Phytologist</i> <b>186</b>:577–592.</div>
        
            <span class="doi"><a href="https://doi.org/10.1111/j.1469-8137.2010.03236.x" class="doi__link">https://doi.org/10.1111/j.1469-8137.2010.03236.x</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Evolution+of+development+of+vascular+cambia+and+secondary+growth&amp;author=R+Spicer&amp;author=A+Groover&amp;publication_year=2010&amp;journal=The+New+Phytologist&amp;volume=186&amp;pages=pp.+577%E2%80%93592" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">25</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib25" id="bib25">
        
        
            <a href="https://doi.org/10.1007/s00138-011-0345-9" class="reference__title">Cell morphology classification and clutter mitigation in phase-contrast microscopy images using machine learning</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:DH+Theriault%22" class="reference__authors_link">DH Theriault</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:ML+Walker%22" class="reference__authors_link">ML Walker</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:JY+Wong%22" class="reference__authors_link">JY Wong</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Betke%22" class="reference__authors_link">M Betke</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2012)</span>
        
            <div class="reference__origin"><i>Machine Vision and Applications</i> <b>23</b>:659–673.</div>
        
            <span class="doi"><a href="https://doi.org/10.1007/s00138-011-0345-9" class="doi__link">https://doi.org/10.1007/s00138-011-0345-9</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Cell+morphology+classification+and+clutter+mitigation+in+phase-contrast+microscopy+images+using+machine+learning&amp;author=DH+Theriault&amp;author=ML+Walker&amp;author%5B2%5D=JY+Wong&amp;author%5B3%5D=M+Betke&amp;publication_year=2012&amp;journal=Machine+Vision+and+Applications&amp;volume=23&amp;pages=pp.+659%E2%80%93673" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">26</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib26" id="bib26">
        
        
            <a href="https://doi.org/10.1016/j.cell.2012.02.048" class="reference__title">Mechanical stress acts via katanin to amplify differences in growth rate between adjacent cells in Arabidopsis</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Uyttewaal%22" class="reference__authors_link">M Uyttewaal</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Burian%22" class="reference__authors_link">A Burian</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:K+Alim%22" class="reference__authors_link">K Alim</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:B+Landrein%22" class="reference__authors_link">B Landrein</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:D+Borowska-Wykret%22" class="reference__authors_link">D Borowska-Wykret</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Dedieu%22" class="reference__authors_link">A Dedieu</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Peaucelle%22" class="reference__authors_link">A Peaucelle</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Ludynia%22" class="reference__authors_link">M Ludynia</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:J+Traas%22" class="reference__authors_link">J Traas</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Boudaoud%22" class="reference__authors_link">A Boudaoud</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:D+Kwiatkowska%22" class="reference__authors_link">D Kwiatkowska</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:O+Hamant%22" class="reference__authors_link">O Hamant</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2012)</span>
        
            <div class="reference__origin"><i>Cell</i> <b>149</b>:439–451.</div>
        
            <span class="doi"><a href="https://doi.org/10.1016/j.cell.2012.02.048" class="doi__link">https://doi.org/10.1016/j.cell.2012.02.048</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=Mechanical+stress+acts+via+katanin+to+amplify+differences+in+growth+rate+between+adjacent+cells+in+Arabidopsis&amp;author=M+Uyttewaal&amp;author=A+Burian&amp;author%5B2%5D=K+Alim&amp;author%5B3%5D=B+Landrein&amp;author%5B4%5D=D+Borowska-Wykret&amp;author%5B5%5D=A+Dedieu&amp;author%5B6%5D=A+Peaucelle&amp;author%5B7%5D=M+Ludynia&amp;author%5B8%5D=J+Traas&amp;author%5B9%5D=A+Boudaoud&amp;author%5B10%5D=D+Kwiatkowska&amp;author%5B11%5D=O+Hamant&amp;publication_year=2012&amp;journal=Cell&amp;volume=149&amp;pages=pp.+439%E2%80%93451" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
    <li class="reference-list__item">
      <span class="reference-list__ordinal_number">27</span>
        <div class="reference" data-popup-label="See in references" data-popup-contents="bib27" id="bib27">
        
        
            <a href="https://doi.org/10.1038/ncb2764" class="reference__title">A screen for morphological complexity identifies regulators of switch-like transitions between discrete cell shapes</a>
        
        
        
        
            <ol class="reference__authors_list">
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:Z+Yin%22" class="reference__authors_link">Z Yin</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+Sadok%22" class="reference__authors_link">A Sadok</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:H+Sailem%22" class="reference__authors_link">H Sailem</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:A+McCarthy%22" class="reference__authors_link">A McCarthy</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:X+Xia%22" class="reference__authors_link">X Xia</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:F+Li%22" class="reference__authors_link">F Li</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:M+Arias+Garcia%22" class="reference__authors_link">M Arias Garcia</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:L+Evans%22" class="reference__authors_link">L Evans</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:AR+Barr%22" class="reference__authors_link">AR Barr</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:N+Perrimon%22" class="reference__authors_link">N Perrimon</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:CJ+Marshall%22" class="reference__authors_link">CJ Marshall</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:STC+Wong%22" class="reference__authors_link">STC Wong</a></li>
                <li class="reference__author">
                  <a href="https://scholar.google.com/scholar?q=%22author:C+Bakal%22" class="reference__authors_link">C Bakal</a></li>
            </ol>
            <span class="reference__authors_list_suffix">(2013)</span>
        
            <div class="reference__origin"><i>Nature Cell Biology</i> <b>15</b>:860–871.</div>
        
            <span class="doi"><a href="https://doi.org/10.1038/ncb2764" class="doi__link">https://doi.org/10.1038/ncb2764</a></span>
        
            <ul class="reference__abstracts">
            <li class="reference__abstract"><a href="https://scholar.google.com/scholar_lookup?title=A+screen+for+morphological+complexity+identifies+regulators+of+switch-like+transitions+between+discrete+cell+shapes&amp;author=Z+Yin&amp;author=A+Sadok&amp;author%5B2%5D=H+Sailem&amp;author%5B3%5D=A+McCarthy&amp;author%5B4%5D=X+Xia&amp;author%5B5%5D=F+Li&amp;author%5B6%5D=M+Arias+Garcia&amp;author%5B7%5D=L+Evans&amp;author%5B8%5D=AR+Barr&amp;author%5B9%5D=N+Perrimon&amp;author%5B10%5D=CJ+Marshall&amp;author%5B11%5D=STC+Wong&amp;author%5B12%5D=C+Bakal&amp;publication_year=2013&amp;journal=Nature+Cell+Biology&amp;volume=15&amp;pages=pp.+860%E2%80%93871" class="reference__abstract_link">Google Scholar</a></li>
        
            </ul>
        </div>
    </li>
</ol>




  </div>

</section>


                
                    <section
    class="article-section "
   id="SA1"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Decision letter</h2>
  </header>

  <div class="article-section__body">
      <div class="decision-letter-header">
    <ol class="listing-list">
        <li class="listing-list__item">
          <div class="profile-snippet">
            <div class="profile-snippet__container clearfix">
          
              <div class="profile-snippet__name">Jan Traas</div>
              <div class="profile-snippet__title">Reviewing Editor; Ecole normale supérieure de Lyon, France</div>
            </div>
          </div>
        </li>
    </ol>
  <div class="decision-letter-header__main_text"><p class="paragraph">eLife posts the editorial decision letter and author response on a selection of the published articles (subject to the approval of the authors). An edited version of the letter sent to the authors after peer review is shown, indicating the substantive concerns or comments; minor concerns are not usually shown. Reviewers have the opportunity to discuss the decision before the letter is sent (see <a href="http://elife.elifesciences.org/review-process">review process</a>). Similarly, the author response typically shows only responses to the major concerns raised by the reviewers.</p>
</div>
</div>
<p class="paragraph">Thank you for sending your work entitled “Automated quantitative histology reveals vascular morphodynamics during Arabidopsis hypocotyl secondary growth” for consideration at <i>eLife</i>. Your article has been favorably evaluated by a Senior editor, Detlef Weigel, and 3 reviewers, one of whom served as the guest Reviewing editor for this article.</p>
<p class="paragraph">All three reviewers agree that this study describes a robust tool that represents a broadly useful addition to existing methods.</p>
<p class="paragraph">Nevertheless a number of issues have been identified that need to be addressed before the article is acceptable for publication:</p>
<p class="paragraph">1) While the method is well adapted to the biological system analysed here, it would be important to have an idea of the applicability to other organs and/or species. Would, for example, the pipeline function as well in the case of cambium formation in poplar or root cell differentiation in maize? Since this article is mainly technically oriented and the data presented here only provide limited further biological insight, it will be important to underline and fully explain the methodological significance of the work described here. While this does not necessarily imply that extra experiments are required, it should be made clear what the wider applications are. This would largely compensate for the lack of clear conclusions on the biological system.</p>
<p class="paragraph">2) The cell type detection has an accuracy of 88%, which seems relatively low. The key criteria used by the classifier to distinguish between the cell types are not very clear. If for example the main observable used to make the distinction between the cell types turns out to be cell size, then having a 12% miss-classification could have quite some effect on the conclusions drawn in the paper.</p>
<p class="paragraph">3) Two remarks concern the PCA analysis:</p>
<p class="paragraph">- One of the reviewers performed a PCA on the data from Table 2 (using R software ade4 package) and could not reproduce the results presented in <a href="#fig3">Figure 3</a>. The authors should clarify what data they used for this PCA. If the PCA was indeed done on Table 2B, they should double check this part of their analysis. The reviewer suggested also to include intermediate steps of the PCA (correlation matrix, eigenvectors) as supplementary material.</p>
<p class="paragraph">- There is no discussion in the paper as to how the different observables contribute to the first principle component, which represents almost 94% of the variation. What is actually explaining almost all of this variation? Such a discussion would make it much more insightful what is actually changing over time and what makes Col-0 different from Ler.</p>
<p class="paragraph">4) In the part on “Visualization of vascular morphodynamics through combined plots of cell size and incline angle” there seems to be an issue with the incline angle: what happens when a cell is round? One would expect a highly randomized distribution of incline angles in that case. Please indicate how this problem was addressed.</p>
<p class="paragraph">5) Several points concern the more biological implications of the work described:</p>
<p class="paragraph">- The paper contains a long description regarding the differences between the two genetic backgrounds in terms of total cross-sectional area, size variations and so forth, but no context is given how this information can be useful for understanding <i>Arabidopsis</i> development.</p>
<p class="paragraph">- In principle it should be possible to derive the relative contribution of cell expansion and cell proliferation from the data (see for example the Supporting Online Material of Bosveld et al., Science 2012). This would show how without having the availability of explicit time series, the cell dynamics underlying secondary growth can still be derived through statistical measures. Although such an analysis might be beyond the scope of this paper, it would help the paper to go beyond methodology.</p>
<p class="paragraph">- In general, the papers suffers from giving many precise measurements without inserting them in a proper context, such that it becomes unclear why these specifics are insightful and important for understanding plant development.</p>
<p class="paragraph">You might try to be clearer about these biological implications in both the Results and the Discussion.</p>




      <span class="doi doi--article-section"><a href="https://doi.org/10.7554/eLife.01567.016" class="doi__link">https://doi.org/10.7554/eLife.01567.016</a></span>
  </div>

</section>


                
                    <section
    class="article-section "
   id="SA2"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Author response</h2>
  </header>

  <div class="article-section__body">
      <p class="paragraph"><i>1) While the method is well adapted to the biological system analysed here, it would be important to have an idea of the applicability to other organs and/or species. Would, for example, the pipeline function as well in the case of cambium formation in poplar or root cell differentiation in maize? Since this article is mainly technically oriented and the data presented here only provide limited further biological insight, it will be important to underline and fully explain the methodological significance of the work described here. While this does not necessarily imply that extra experiments are required, it should be made clear what the wider applications are. This would largely compensate for the lack of clear conclusions on the biological system</i>.</p>
<p class="paragraph">It is true that our study is above all a proof of principal for the applicability of our approach, but it should work in any context where cell outlines can be reliably segmented and a reference point in the tissue can be defined. We have now added a few sentences in the Discussion to clarify this point:</p>
<p class="paragraph">“The latter [approach] should be possible for any tissue or organ from which cell outlines can be segmented after imaging and for which a reference point can be defined, e.g., (partial) sections from tree trunks or confocal images of root meristems.”</p>
<p class="paragraph">We have also looked into running our pipeline on alternative templates; however we could not obtain a sufficient number of consistently imaged high quality samples of a given tissue to perform such an analysis. Part of the problem is that already a reasonable amount of images are needed for the training set, before an automated run can even be launched.</p>
<p class="paragraph"><i>2) The cell type detection has an accuracy of 88%, which seems relatively low. The key criteria used by the classifier to distinguish between the cell types are not very clear. If for example the main observable used to make the distinction between the cell types turns out to be cell size, then having a 12% miss-classification could have quite some effect on the conclusions drawn in the paper</i>.</p>
<p class="paragraph">First, let us comment on the prediction accuracy. It is true that 88% might seem relatively low; however it compares favorably with other studies, which are typically in the same range or below, despite an at times reduced complexity. We have now added some more sentences to highlight this issue in the discussion (the newly cited studies have been added to the references):</p>
<p class="paragraph">“Conceptually similar, another study exploited cell shape in combination with fluorescent characteristics upon nuclear and cytoskeleton staining in <i>Drosophila</i> (<a href="#bib27">Yin et al., 2013</a>). However, classification based solely on cell morphology has also been applied to human cells (<a href="#bib25">Theriault et al., 2012</a>). Whereas all of these studies investigated isolated cells in culture, we had to apply morphology-based classification to cells that were embedded in their tissue and in a developmental context. While this complicated the analysis, it also offered the opportunity to assign spatial coordinates to the cells, which could be integrated on top of characteristics of cell geometry to build our classifiers. Average true prediction accuracy in the cited studies was in the range of 83–90%, as compared to 88% in our study. Notably however, our cell type assignment precision was greatly increased by our post- machine learning quality control pipeline, which enabled us to fix the principal classes with lower accuracy, due to frequent SVM confusion between xylem vessels and phloem parenchyma cells.”</p>
<p class="paragraph">Please also pay attention to the last sentence above. That is, it is important to note that the quality control pipeline that we have implemented to correct mis-assignments (see Results section <i>Automated quality control and refinement of cell type recognition</i>) has greatly improved our final cell type classification reliability, which is thus more accurate than the initial performance of the machine learning. We hope that the modification of the Discussion clarifies this now.</p>
<p class="paragraph">Second, regarding the main observables, the reviewers highlight the main disadvantage of SVM regarding other machine learning techniques: whereas SVM can perform non-linear classification and “easily” handle multi-class problems, it does not permit to see which criteria have the most influence in the decision boundary. This is contrary to other methods such as decision tree or regression, which have a better interpretability (and perform well on binary problems but do not allow non-linear separation). For better documentation, we have now included an illustration of classifier selection by the V-fold cross validation method (Supplementary file 3), and we have added a new table (Supplementary file 4) that recapitulates the different qualifiers and the features they combine. This table shows that optimal classifiers varied between time points and genotypes, with no prevalent observable, such as cell size, dominating throughout.</p>
<p class="paragraph"><i>3) Two remarks concern the PCA analysis</i>:</p>
<p class="paragraph"><i>- One of the reviewers performed a PCA on the data from Table 2 (using R software ade4 package) and could not reproduce the results presented in</i> <a href="#fig3"><i>Figure 3</i></a><i>. The authors should clarify what data they used for this PCA. If the PCA was indeed done on Table 2B, they should double check this part of their analysis. The reviewer suggested also to include intermediate steps of the PCA (correlation matrix, eigenvectors) as supplementary material</i>.</p>
<p class="paragraph"><i>- There is no discussion in the paper as to how the different observables contribute to the first principle component, which represents almost 94% of the variation. What is actually explaining almost all of this variation? Such a discussion would make it much more insightful what is actually changing over time and what makes Col-0 different from Ler</i>.</p>
<p class="paragraph">We thank the reviewers for bringing this to our attention. First, let us apologize for a mistake in some of the values for Ler in the phenoprint table (<a href="#fig2">Figure 2B</a>). This was due to confusion by the corresponding author during figure assembly (average vs median values) and has been corrected now (the new values are close to the old ones). Moreover, the phenoprint table was indicative. The actual PCA input differed by the fact that we used the average radius of the section instead of the section surface area, which causes the difference in the PCA results obtained by the reviewer, independently of the software package used. To avoid any further confusion, we reconsidered the PCA by taking as input the exact same values displayed in <a href="#fig2">Figure 2B</a> (bimodal p value is used without the -log10 transformation). Since PCA is sensitive to scale, we corrected each descriptor value by its maximum value to obtain normalized unit range for all data. This input table is provided now as Supplementary file 13 as indicated in the text:</p>
<p class="paragraph">“The phenoprints consisted of a set of eight multi-parametric descriptors, which was informative for the normalized values (Supplementary file 13) that were used to perform a principal component analysis (<a href="#fig3">Figure 3A</a>).”</p>
<p class="paragraph">Accordingly, we have revised <a href="#fig3">Figure 3A</a> and as requested now also display the observables and eigenvalues. This effectively refines our interpretation of temporal changes in Col-0 and Ler. The text in the manuscript has been modified accordingly and now points out what explains most of the variation:</p>
<p class="paragraph">“The computed correlation matrix was projected into a two-dimensional coordinate system, with the first two principal components explaining 76 % of the variation. The first component opposed the larger phenoprint stages (30 to 35 dag in both genotypes) with the smallest (Ler 15d), with proportionally less cambium in the older stages. The second component associated variables of large phloem proportion and inexistent or low fiber content (Col-0 15 dag, Ler 25 dag, Col-0 20 dag, Col-0 25 dag). The analysis also revealed larger angle spans for Ler as compared to Col-0 above all between 15 dag and 25 dag, suggesting substantial morphological changes during the early stages. At later time points, the two genotypes increasingly clustered together, indicating an initially slower development in Ler that however eventually caught up with Col-0.”</p>
<p class="paragraph">The main conclusion forom the PCA remains the same:</p>
<p class="paragraph">“Overall, the phenoprint clustering suggests a conserved sequence of development from one distinct morphological pattern to another, albeit with a different temporal progression in Col-0 versus Ler.”</p>
<p class="paragraph"><i>4) In the part on “Visualization of vascular morphodynamics through combined plots of cell size and incline angle” there seems to be an issue with the incline angle: what happens when a cell is round? One would expect a highly randomized distribution of incline angles in that case. Please indicate how this problem was addressed</i>.</p>
<p class="paragraph">This is a good point and was indeed one of our initial concerns. It might in part be responsible for more random incline angles at early stages. However, in practice, it turned out that round cells were very rare, as indicated by our eccentricity parameter (minor axis divided by major axis length), which was (mostly much more) smaller than 0.95 in typically more than 99% of cells for a given section.</p>
<p class="paragraph"><i>5) Several points concern the more biological implications of the work described</i>:</p>
<p class="paragraph"><i>- The paper contains a long description regarding the differences between the two genetic backgrounds in terms of total cross-sectional area, size variations and so forth, but no context is given how this information can be useful for understanding</i> Arabidopsis <i>development</i>.</p>
<p class="paragraph"><i>- In principle it should be possible to derive the relative contribution of cell expansion and cell proliferation from the data (see for example the Supporting Online Material of Bosveld et al., Science 2012). This would show how without having the availability of explicit time series, the cell dynamics underlying secondary growth can still be derived through statistical measures. Although such an analysis might be beyond the scope of this paper, it would help the paper to go beyond methodology</i>.</p>
<p class="paragraph"><i>- In general, the papers suffers from giving many precise measurements without inserting them in a proper context, such that it becomes unclear why these specifics are insightful and important for understanding plant development</i>.</p>
<p class="paragraph"><i>You might try to be clearer about these biological implications in both the Results and the Discussion</i>.</p>
<p class="paragraph">First, let us comment on the derivation of cell dynamics underlying secondary growth through statistical measures. Using high-resolution live imaging, Bosveld et al. performed a fine and precise quantitative analysis of cellular features and were able to assess the contribution of the cells’ shape changes and rearrangements to tissue morphogenesis. To do so, they used an original method based on a formalism applied in foam dynamics and they used a Fast Fourier Transform method to register (i.e., align) time-lapse movies of several individuals, thus obtaining robust statistics. In our case, the coarse timing prevents such an elegant analysis; rather we need a computational model of tissue dynamics to infer the contribution of cell expansion and cell proliferation on vascular tissue morphogenesis. We are actively working on this, but have not yet succeeded in creating a model, which will still take considerable time and which we believe is out of the scope of this study.</p>
<p class="paragraph">Regarding the biological implications of our results, it is true that we have been rather concise on this point. We have now elaborated on our findings, such as the equidistant phloem pole patterning or the masking of growth dynamics by the sole analysis of end points, and we have added a paragraph to the Discussion that highlights the main findings with regards to divergent secondary growth dynamics between Col-0 and Ler:</p>
<p class="paragraph">“Differential secondary growth dynamics in Col-0 versus Ler. The early cessation of phloem production in Ler as compared to Col-0 does, however, not reflect an earlier termination of overall growth in Ler. Rather it appears that phloem production in Ler ceases before xylem production and contributes to the divergent growth dynamics in the two genotypes. The severely reduced overall cell production in Ler as compared to Col-0 can be mainly attributed to reduced phloem and cambium cell number, and is responsible for the higher relative proportion of xylem area that had been reported earlier (<a href="#bib21">Ragni et al., 2011</a>). Interestingly, the nearly 50 % reduction in overall cell number does not mean that growth is uniformly slower in Ler. Rather, initial secondary growth appears to be particularly slow in Ler as indicated by the more than three-fold difference in cell number at 15 dag. This is followed by an acceleration of cell production that surpasses Col-0 in relative terms between 15 dag and 25 dag, before dropping to Col-0 levels between 25 dag and 35 dag. This pattern is also evident from the principal component analysis, in which both Col-0 and Ler reach overall similar end points. Thus, our analysis along a series of time points has revealed highly divergent secondary growth dynamics in the genotypes that would not have been evident from a comparison of end points.”</p>




      <span class="doi doi--article-section"><a href="https://doi.org/10.7554/eLife.01567.017" class="doi__link">https://doi.org/10.7554/eLife.01567.017</a></span>
  </div>

</section>


                
                    <section
    class="article-section "
   id="info"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Article and author information</h2>
  </header>

  <div class="article-section__body">
      <h3 class="authors-details__heading">Author details</h3>
<ol class="authors-details__authors">
    <li class="authors-details__author"><div class="author-details" data-popup-contents="x731672cc" id="x731672cc">

  <h4 class="author-details__name">Martial Sankar</h4>

    <section class="author-details__section">
        <span class="author-details__text">Department of Plant Molecular Biology, University of Lausanne, Lausanne, Switzerland</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contribution</h5>
        <span class="author-details__text">MS, Conception and design, Acquisition of data, Analysis and interpretation of data, Drafting or revising the article</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contributed equally with</h5>
        <span class="author-details__text">Kaisa Nieminen and Laura Ragni</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Competing interests</h5>
        <span class="author-details__text">No competing interests declared.</span>
    </section>



</div>

</li>
    <li class="authors-details__author"><div class="author-details" data-popup-contents="x97d42bf2" id="x97d42bf2">

  <h4 class="author-details__name">Kaisa Nieminen</h4>

    <section class="author-details__section">
        <span class="author-details__text">Department of Plant Molecular Biology, University of Lausanne, Lausanne, Switzerland</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contribution</h5>
        <span class="author-details__text">KN, Conception and design, Acquisition of data, Analysis and interpretation of data, Drafting or revising the article</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contributed equally with</h5>
        <span class="author-details__text">Martial Sankar and Laura Ragni</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Competing interests</h5>
        <span class="author-details__text">No competing interests declared.</span>
    </section>



</div>

</li>
    <li class="authors-details__author"><div class="author-details" data-popup-contents="xe1d5c328" id="xe1d5c328">

  <h4 class="author-details__name">Laura Ragni</h4>

    <section class="author-details__section">
        <span class="author-details__text">Department of Plant Molecular Biology, University of Lausanne, Lausanne, Switzerland</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contribution</h5>
        <span class="author-details__text">LR, Conception and design, Acquisition of data, Analysis and interpretation of data, Drafting or revising the article</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contributed equally with</h5>
        <span class="author-details__text">Martial Sankar and Kaisa Nieminen</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Competing interests</h5>
        <span class="author-details__text">No competing interests declared.</span>
    </section>



</div>

</li>
    <li class="authors-details__author"><div class="author-details" data-popup-contents="xb1bd680c" id="xb1bd680c">

  <h4 class="author-details__name">Ioannis Xenarios</h4>

    <section class="author-details__section">
        <span class="author-details__text">Vital-IT, Swiss Institute of Bioinformatics, Lausanne, Switzerland</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contribution</h5>
        <span class="author-details__text">IX, Conception and design</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Competing interests</h5>
        <span class="author-details__text">No competing interests declared.</span>
    </section>



</div>

</li>
    <li class="authors-details__author"><div class="author-details" data-popup-contents="x731c1333" id="x731c1333">

  <h4 class="author-details__name">Christian S Hardtke</h4>

    <section class="author-details__section">
        <span class="author-details__text">Department of Plant Molecular Biology, University of Lausanne, Lausanne, Switzerland</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Contribution</h5>
        <span class="author-details__text">CSH, Conception and design, Analysis and interpretation of data, Drafting or revising the article</span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">For correspondence</h5>
        <span class="author-details__text"><a href="mailto:christian.hardtke@unil.ch">christian.hardtke@unil.ch</a></span>
    </section>
    <section class="author-details__section">
        <h5 class="author-details__heading">Competing interests</h5>
        <span class="author-details__text">CSH: Reviewing Editor, <i>eLife</i>.</span>
    </section>



</div>

</li>
</ol>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Funding</h3>
  </header>

  <div class="article-section__body">
      <section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h4 class="article-section__header_text">SystemsX</h4>
  </header>

  <div class="article-section__body">
      

    <ul class="list list--bullet">
            <li>Ioannis Xenarios</li>
            <li>Christian S Hardtke</li>
    </ul>





  </div>

</section>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h4 class="article-section__header_text">EMBO longterm post-doctoral fellowships</h4>
  </header>

  <div class="article-section__body">
      

    <ul class="list list--bullet">
            <li>Kaisa Nieminen</li>
            <li>Laura Ragni</li>
    </ul>





  </div>

</section>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h4 class="article-section__header_text">Marie Heim-Voegtlin</h4>
  </header>

  <div class="article-section__body">
      

    <ul class="list list--bullet">
            <li>Laura Ragni</li>
    </ul>





  </div>

</section>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h4 class="article-section__header_text">University of Lausanne</h4>
  </header>

  <div class="article-section__body">
      

    <ul class="list list--bullet">
            <li>Martial Sankar</li>
            <li>Christian S Hardtke</li>
    </ul>





  </div>

</section>
<p class="paragraph">The funders had no role in study design, data collection and interpretation, or the decision to submit the work for publication.</p>




  </div>

</section>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Acknowledgements</h3>
  </header>

  <div class="article-section__body">
      <p class="paragraph">We would like to thank the Swiss Institute of Bioinformatics Vital-IT platform for support in computational infrastructure, Dr A Rodriguez-Villalon for the seedling photo, F Misceo for GUS-stained sections and Prof Ted Farmer for coining the term ‘Quantitative Histology’.</p>




  </div>

</section>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Reviewing Editor</h3>
  </header>

  <div class="article-section__body">
      
    <ol class="list">
            <li>Jan Traas, Ecole normale supérieure de Lyon, France</li>
    </ol>






  </div>

</section>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Publication history</h3>
  </header>

  <div class="article-section__body">
      
    <ol class="list list--bullet">
            <li>Received: September 20, 2013</li>
            <li>Accepted: December 24, 2013</li>
            <li>Version of Record published: <a href="/articles/01567">February 11, 2014 (version 1)</a></li>
    </ol>






  </div>

</section>
<section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h3 class="article-section__header_text">Copyright</h3>
  </header>

  <div class="article-section__body">
      <p>© 2014, Sankar et al.</p><p>This article is distributed under the terms of the <a href="http://creativecommons.org/licenses/by/3.0/">Creative Commons Attribution License</a>, which permits unrestricted use and redistribution provided that the original author and source are credited.</p>



  </div>

</section>




  </div>

</section>


                
                    <section
    class="article-section "
   id="metrics"
  data-behaviour="ArticleSection"
  data-initial-state="closed"
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Metrics</h2>
  </header>

  <div class="article-section__body">
      <ul class="statistic-collection clearfix">
    <li class="statistic-collection__item">
      <dl class="statistic">
        <dd class="statistic__value">
          2,304
        </dd>
        <dt class="statistic__label">
          Page views
        </dt>
      </dl>
    </li>
    <li class="statistic-collection__item">
      <dl class="statistic">
        <dd class="statistic__value">
          164
        </dd>
        <dt class="statistic__label">
          Downloads
        </dt>
      </dl>
    </li>
    <li class="statistic-collection__item">
      <dl class="statistic">
        <dd class="statistic__value">
          10
        </dd>
        <dt class="statistic__label">
          Citations
        </dt>
      </dl>
    </li>
</ul>
<div
    data-behaviour="Metrics"
    data-id="01567"
    data-type="article"
    data-container-id="page-views"
    data-metric="page-views"
    data-period="month"
    data-api-endpoint="https://api.elifesciences.org"
    data-chevron-left-svg="/assets/patterns/img/patterns/molecules/chevron-left-ic.5a64c74f.svg"
    data-chevron-left-srcset="/assets/patterns/img/patterns/molecules/chevron-left-ic_2x.682ec53d.png 48w, /assets/patterns/img/patterns/molecules/chevron-left-ic_1x.ad24fefb.png 24w"
    data-chevron-left-src="/assets/patterns/img/patterns/molecules/chevron-left-ic_1x.ad24fefb.png"
    data-chevron-right-svg="/assets/patterns/img/patterns/molecules/chevron-right-ic.b299caa7.svg"
    data-chevron-right-srcset="/assets/patterns/img/patterns/molecules/chevron-right-ic_2x.6294de85.png 48w, /assets/patterns/img/patterns/molecules/chevron-right-ic_1x.fad03e54.png 24w"
    data-chevron-right-src="/assets/patterns/img/patterns/molecules/chevron-right-ic_1x.fad03e54.png"
    aria-hidden="true"
>
</div>
<div
    data-behaviour="Metrics"
    data-id="01567"
    data-type="article"
    data-container-id="downloads"
    data-metric="downloads"
    data-period="month"
    data-api-endpoint="https://api.elifesciences.org"
    data-chevron-left-svg="/assets/patterns/img/patterns/molecules/chevron-left-ic.5a64c74f.svg"
    data-chevron-left-srcset="/assets/patterns/img/patterns/molecules/chevron-left-ic_2x.682ec53d.png 48w, /assets/patterns/img/patterns/molecules/chevron-left-ic_1x.ad24fefb.png 24w"
    data-chevron-left-src="/assets/patterns/img/patterns/molecules/chevron-left-ic_1x.ad24fefb.png"
    data-chevron-right-svg="/assets/patterns/img/patterns/molecules/chevron-right-ic.b299caa7.svg"
    data-chevron-right-srcset="/assets/patterns/img/patterns/molecules/chevron-right-ic_2x.6294de85.png 48w, /assets/patterns/img/patterns/molecules/chevron-right-ic_1x.fad03e54.png 24w"
    data-chevron-right-src="/assets/patterns/img/patterns/molecules/chevron-right-ic_1x.fad03e54.png"
    aria-hidden="true"
>
</div>
<p class="paragraph">Article citation count generated by polling the highest count across the following sources: <a href="https://doi.org/10.7554/eLife.01567">Crossref</a>, <a href="https://www.scopus.com/inward/citedby.uri?partnerID=HzOxMe3b&scp=84898731897&origin=inward">Scopus</a>, <a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3917233/">PubMed Central</a>.</p>




  </div>

</section>


                
                    <section
    class="article-section "
  
  
  
>

  <header class="article-section__header">
    <h2 class="article-section__header_text">Download links</h2>
  </header>

  <div class="article-section__body">
      <div data-behaviour="ArticleDownloadLinksList" id="downloads" aria-labelledby="downloads-label">
  <div class="visuallyhidden"><span id="downloads-label">A two-part list of links to download the article, or parts of the article, in various formats.</span></div>

    <h3 class="article-download-links-list__heading">Downloads<span class="visuallyhidden"> (link to download the article as PDF)</span></h3>
    <ul class="article-download-list">
       <li><a href="https://elifesciences.org/download/aHR0cHM6Ly9jZG4uZWxpZmVzY2llbmNlcy5vcmcvYXJ0aWNsZXMvMDE1NjcvZWxpZmUtMDE1NjctdjEucGRm/elife-01567-v1.pdf?_hash=F1SpsiDC6j08tBgpan%2FGPGimXlKIpU3%2BACGdFG3j1H8%3D" class="article-download-links-list__link"

         data-article-identifier="10.7554/eLife.01567"
         data-download-type="pdf-article"

       >Article PDF</a></li>
       <li><a href="https://elifesciences.org/download/aHR0cHM6Ly9jZG4uZWxpZmVzY2llbmNlcy5vcmcvYXJ0aWNsZXMvMDE1NjcvZWxpZmUtMDE1NjctZmlndXJlcy12MS5wZGY=/elife-01567-figures-v1.pdf?_hash=MhR7dkvEjQTiKcMaHBuRA9KkXAh2Qp8y0w%2Fch5%2Bh878%3D" class="article-download-links-list__link"

         data-article-identifier="10.7554/eLife.01567"
         data-download-type="pdf-figures"

       >Figures PDF</a></li>
    </ul>
    <h3 class="article-download-links-list__heading">Download citations<span class="visuallyhidden"> (links to download the citations from this article in formats compatible with various reference manager tools)</span></h3>
    <ul class="article-download-list">
       <li><a href="/articles/01567.bib" class="article-download-links-list__link"


       >BibTeX</a></li>
       <li><a href="/articles/01567.ris" class="article-download-links-list__link"


       >RIS</a></li>
    </ul>
    <h3 class="article-download-links-list__heading">Open citations<span class="visuallyhidden"> (links to open the citations from this article in various online reference manager services)</span></h3>
    <ul class="article-download-list">
       <li><a href="https://www.mendeley.com/import?doi=10.7554/eLife.01567" class="article-download-links-list__link"


       >Mendeley</a></li>
       <li><a href="https://www.readcube.com/articles/10.7554/eLife.01567" class="article-download-links-list__link"


       >ReadCube</a></li>
       <li><a href="papers2://url/https%3A%2F%2Felifesciences.org%2Farticles%2F01567?title=Automated+quantitative+histology+reveals+vascular+morphodynamics+during+Arabidopsis+hypocotyl+secondary+growth" class="article-download-links-list__link"


       >Papers</a></li>
       <li><a href="http://www.citeulike.org/posturl?url=https%3A%2F%2Felifesciences.org%2Farticles%2F01567&amp;title=Automated+quantitative+histology+reveals+vascular+morphodynamics+during+Arabidopsis+hypocotyl+secondary+growth&amp;doi=10.7554/eLife.01567" class="article-download-links-list__link"


       >CiteULike</a></li>
    </ul>

</div>




  </div>

</section>


                
                    
<section class="article-meta">

  <div class="article-meta__container">


    <section class="article-meta__group">
      <h4 class="article-meta__group_title">Categories and tags</h4>
      <ul class="article-meta__link_list">
          <li class="article-meta__link_list_item">
            <a href="/articles/research-article" class="article-meta__link">Research Article</a></li>
          <li class="article-meta__link_list_item">
            <a href="/subjects/plant-biology" class="article-meta__link">Plant Biology</a></li>
          <li class="article-meta__link_list_item">
            <a href="/search?for=secondary%20growth" class="article-meta__link">secondary growth</a></li>
          <li class="article-meta__link_list_item">
            <a href="/search?for=machine%20learning" class="article-meta__link">machine learning</a></li>
          <li class="article-meta__link_list_item">
            <a href="/search?for=image%20segmentation" class="article-meta__link">image segmentation</a></li>
          <li class="article-meta__link_list_item">
            <a href="/search?for=hypocotyl" class="article-meta__link">hypocotyl</a></li>
          <li class="article-meta__link_list_item">
            <a href="/search?for=phloem" class="article-meta__link">phloem</a></li>
          <li class="article-meta__link_list_item">
            <a href="/search?for=xylem" class="article-meta__link">xylem</a></li>
      </ul>
    </section>


    <section class="article-meta__group">
      <h4 class="article-meta__group_title">Research organism</h4>
      <ul class="article-meta__link_list">
          <li class="article-meta__link_list_item">
            <a href="/search?for=A.%20thaliana" class="article-meta__link"><i>A. thaliana</i></a></li>
      </ul>
    </section>


  </div>

</section>


                
                
            
        

        </div>

        
            <div class="grid__item one-whole

                large--four-twelfths x-large--three-twelfths
                 grid-secondary-column">

                <div class="grid-secondary-column__item grid-secondary-column__item--wide-only">

                    <div>


  <ol class="listing-list ">
    <li class="listing-list__item"><div class="teaser teaser--secondary teaser--related ">

    <ol class="teaser__context_label_list" aria-label="These research categories are for the following article">
        <li class="teaser__context_label_item">

            <span class="teaser__context_label">Of interest</span>
        </li>
    </ol>

  <header class="teaser__header">


    <h4 class="teaser__header_text">
        <a href="/articles/40039"   class="teaser__header_text_link">A <i>Phytophthora</i> effector recruits a host cytoplasmic transacetylase into nuclear speckles to enhance plant susceptibility</a>
    </h4>

    <div class="teaser__secondary_info">
      Haiyang Li et al.
    </div>

  </header>


  <footer class="teaser__footer">

      <div class="meta">
      
          <a class="meta__type" href="/articles/research-article" >Research Article</a>
      
      
          
          <span class="date"> Updated <time datetime="2018-11-21">Nov 21, 2018</time></span>
      </div>


  </footer>
</div>
</li><li class="listing-list__item"><a href="#listing" class="see-more-link">Further reading</a>
</li></ol>


</div>


                </div>

            </div>

        
    </div>

</div>

    
        <div class="wrapper listing-read-more">

  <div class="grid">

    <div class="content-container grid__item
              one-whole
              large--ten-twelfths
              push--large--one-twelfth
              x-large--eight-twelfths
              push--x-large--two-twelfths
              grid-column">

        <div class="listing-list-heading">
          <h3 class="list-heading">Further reading</h3>
        </div>

      <ol class="listing-list listing-list--read-more" id="listing">
          <li class="listing-list__item listing-list__item--related">
            <div class="listing-list__divider"></div>
              <header class="content-header content-header--read-more clearfix content-header--header">
              
                  <ol class="content-header__subject_list">
                      <li class="content-header__subject_list_item">
                        <span class="content-header__subject">Microbiology and Infectious Disease</span>
                      </li>
                      <li class="content-header__subject_list_item">
                        <span class="content-header__subject">Plant Biology</span>
                      </li>
                  </ol>
              
                <div class="content-header__body">
                  <h1 class="content-header__title content-header__title--long">
                    <a href="/articles/40039" class="content-header__title_link">A <i>Phytophthora</i> effector recruits a host cytoplasmic transacetylase into nuclear speckles to enhance plant susceptibility</a>
                  </h1>
                </div>
              
                  <div class="content-header__authors content-header__authors--line">Haiyang Li et al.</div>
              
                  <div class="content-header__meta">
                    <div class="meta">
                    
                        <a class="meta__type" href="/articles/research-article" >Research Article</a>
                    
                    
                        
                        <span class="date"> Updated <time datetime="2018-11-21">Nov 21, 2018</time></span>
                    </div>
                  </div>
              
              </header>
          </li>
          <li class="listing-list__item ">
            <div class="listing-list__divider"></div>
              <header class="content-header content-header--read-more clearfix content-header--header">
              
                  <ol class="content-header__subject_list">
                      <li class="content-header__subject_list_item">
                        <span class="content-header__subject">Biochemistry and Chemical Biology</span>
                      </li>
                      <li class="content-header__subject_list_item">
                        <span class="content-header__subject">Plant Biology</span>
                      </li>
                  </ol>
              
                <div class="content-header__body">
                  <h1 class="content-header__title content-header__title--long">
                    <a href="/articles/37960" class="content-header__title_link">Effects of microcompartmentation on flux distribution and metabolic pools in <i>Chlamydomonas reinhardtii</i> chloroplasts</a>
                  </h1>
                </div>
              
                  <div class="content-header__authors content-header__authors--line">Anika Küken et al.</div>
              
                  <div class="content-header__meta">
                    <div class="meta">
                    
                        <a class="meta__type" href="/articles/research-article" >Research Article</a>
                    
                    
                        
                        <span class="date"> Updated <time datetime="2018-11-14">Nov 14, 2018</time></span>
                    </div>
                  </div>
              
              </header>
          </li>
          <li class="listing-list__item ">
            <div class="listing-list__divider"></div>
              <header class="content-header content-header--read-more clearfix content-header--header">
              
                  <ol class="content-header__subject_list">
                      <li class="content-header__subject_list_item">
                        <span class="content-header__subject">Biochemistry and Chemical Biology</span>
                      </li>
                      <li class="content-header__subject_list_item">
                        <span class="content-header__subject">Plant Biology</span>
                      </li>
                  </ol>
              
                <div class="content-header__body">
                  <h1 class="content-header__title content-header__title--long">
                    <a href="/articles/42507" class="content-header__title_link">Carbon Fixation: Closing the circle</a>
                  </h1>
                </div>
              
                  <div class="content-header__authors content-header__authors--line">Marylou C Machingura, James V Moroney</div>
              
                  <div class="content-header__meta">
                    <div class="meta">
                    
                        <a class="meta__type" href="/articles/insight" >Insight</a>
                    
                    
                        
                        <span class="date"> <time datetime="2018-11-14">Nov 14, 2018</time></span>
                    </div>
                  </div>
              
              </header>
          </li>

      </ol>


    </div>

  </div>

</div>


    

    </div>


            </main>

                            <section class="email-cta">

  <div class="email-cta__container">

      <header class="email-cta__header">
        <h2 class="email-cta__header_text">Be the first to read new articles from eLife</h2>
      </header>

      <h3 class="email-cta__sub_header">Sign up for alerts</h3>

      <div class="form-field-info-link-wrapper form-field-info-link-wrapper--left">
        <a class="form-field-info-link" href="/privacy">Privacy notice</a>
      </div>
      

        <form class="compact-form" id="email_cta" action="https://elifesciences.org/articles/01567" method="POST" novalidate>
          <fieldset class="compact-form__container">
            <label>
              <span class="visuallyhidden">Email</span>
              <input type="email" name="email_cta[email]" value="" placeholder="you@email.com"
                
                 class="compact-form__input"
                
              >
            </label>
        
        
              <div class="form-item visuallyhidden" aria-hidden="true">
              
                  <label for="email_cta_email_address" class="form-item__label">Please leave this field empty</label>
                <input
                    type="text"
                    class="text-field text-field--text"
                   id="email_cta_email_address"
                   name="email_cta[email_address]"
                  
                    tabindex="-1"
                />
              
              </div>
            <button type="reset" name="reset" class="compact-form__reset"><span class="visuallyhidden">Reset form</span></button>
            <button type="submit" class="compact-form__submit"><span class="visuallyhidden">Sign up</span></button>
          </fieldset>
        </form>
  </div>

</section>

            
                              <div class="main-menu" id="mainMenu" data-behaviour="MainMenu" tabindex="0">
    <nav class="main-menu__container" role="navigation">
        <h3 class="list-heading">Menu</h3>
        <ul class="main-menu__list">
          <li class="main-menu__list_item">
            <a href="/subjects" class="main-menu__list_link">Research categories</a>
          </li>
          <li class="main-menu__list_item">
            <a href="https://submit.elifesciences.org/html/elife_author_instructions.html" class="main-menu__list_link">Author guide</a>
          </li>
          <li class="main-menu__list_item">
            <a href="https://submit.elifesciences.org/html/elife_reviewer_instructions.html" class="main-menu__list_link">Reviewer guide</a>
          </li>
          <li class="main-menu__list_item">
            <a href="/about" class="main-menu__list_link">About</a>
          </li>
          <li class="main-menu__list_item">
            <a href="/inside-elife" class="main-menu__list_link">Inside eLife</a>
          </li>
          <li class="main-menu__list_item">
            <a href="/community" class="main-menu__list_link">Community</a>
          </li>
          <li class="main-menu__list_item">
            <a href="/labs" class="main-menu__list_link">Innovation</a>
          </li>
        </ul>
      <a href="#siteHeader" class="to-top-link">Back to top</a>
    </nav>
  </div>

<ol class="investor-logos" role="contentinfo" aria-label="eLife is funded by these organisations">
    <li class="investor-logos__item">

      <div class="investor-logos__container">
        <picture class="investor-logos__picture">
            <source srcset="/assets/images/investors/hhmi.9d0951a2.svg"
                    type="image/svg+xml"
              >
            <source srcset="/assets/images/investors/hhmi@2x.e63a8d68.webp 2x, /assets/images/investors/hhmi@1x.c1e8d1b9.webp 1x"
                    type="image/webp"
              >
            <source srcset="/assets/images/investors/hhmi@2x.58718155.png 2x, /assets/images/investors/hhmi@1x.ad4627a8.png 1x"
                    type="image/png"
              >
            <img src="/assets/images/investors/hhmi@1x.ad4627a8.png"
                 
                 alt="Howard Hughes Medical Institute"
                 class="investor-logos__img"
            >
        </picture>
      </div>

    </li>
    <li class="investor-logos__item">

      <div class="investor-logos__container">
        <picture class="investor-logos__picture">
            <source srcset="/assets/images/investors/wellcome.813f8634.svg"
                    type="image/svg+xml"
              >
            <source srcset="/assets/images/investors/wellcome@2x.993dd002.webp 2x, /assets/images/investors/wellcome@1x.1fd7fa84.webp 1x"
                    type="image/webp"
              >
            <source srcset="/assets/images/investors/wellcome@2x.75f8d6f9.png 2x, /assets/images/investors/wellcome@1x.ff6d9292.png 1x"
                    type="image/png"
              >
            <img src="/assets/images/investors/wellcome@1x.ff6d9292.png"
                 
                 alt="Wellcome Trust"
                 class="investor-logos__img"
            >
        </picture>
      </div>

    </li>
    <li class="investor-logos__item">

      <div class="investor-logos__container">
        <picture class="investor-logos__picture">
            <source srcset="/assets/images/investors/max.090f7458.svg"
                    type="image/svg+xml"
              >
            <source srcset="/assets/images/investors/max@2x.3215c512.webp 2x, /assets/images/investors/max@1x.8fabbf5a.webp 1x"
                    type="image/webp"
              >
            <source srcset="/assets/images/investors/max@2x.d233b5b1.png 2x, /assets/images/investors/max@1x.5daaf9a0.png 1x"
                    type="image/png"
              >
            <img src="/assets/images/investors/max@1x.5daaf9a0.png"
                 
                 alt="Max-Planck-Gesellschaft"
                 class="investor-logos__img"
            >
        </picture>
      </div>

    </li>
    <li class="investor-logos__item">

      <div class="investor-logos__container">
        <picture class="investor-logos__picture">
            <source srcset="/assets/images/investors/kaw.c1bb2e4b.svg"
                    type="image/svg+xml"
              >
            <source srcset="/assets/images/investors/kaw@2x.0afbcf57.webp 2x, /assets/images/investors/kaw@1x.04f3c517.webp 1x"
                    type="image/webp"
              >
            <source srcset="/assets/images/investors/kaw@2x.cc1a5adc.png 2x, /assets/images/investors/kaw@1x.318b49a9.png 1x"
                    type="image/png"
              >
            <img src="/assets/images/investors/kaw@1x.318b49a9.png"
                 
                 alt="Knut and Alice Wallenberg Foundation"
                 class="investor-logos__img"
            >
        </picture>
      </div>

    </li>
</ol>

<footer class="site-footer">

  <div class="site-footer__container">

    <div class="grid-cell">

      <nav class="footer-navigation">
        <ul class="footer-navigation__list">
          <li class="footer-navigation__list_item">
            <a href="/about" class="footer-navigation__list_link">About</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/jobs" class="footer-navigation__list_link">Jobs</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/who-we-work-with" class="footer-navigation__list_link">Who we work with</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/alerts" class="footer-navigation__list_link">Alerts</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/contact" class="footer-navigation__list_link">Contact</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/terms" class="footer-navigation__list_link">Terms and conditions</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/privacy" class="footer-navigation__list_link">Privacy notice</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/inside-elife" class="footer-navigation__list_link">Inside eLife</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/archive/2018" class="footer-navigation__list_link">Monthly archive</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/labs" class="footer-navigation__list_link">Innovation</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/for-the-press" class="footer-navigation__list_link">For the press</a>
          </li>
          <li class="footer-navigation__list_item">
            <a href="/resources" class="footer-navigation__list_link">Resources</a>
          </li>
        </ul>
      </nav>

      <div class="social-links" aria-label="Social media links for eLife Sciences">
        <ul class="social-links__list">
          <li class="social-links__list_item">
            <a href="https://www.facebook.com/elifesciences" class="social-links__list_link" aria-label="Facebook">
              <svg width="20" height="20">
                <path fill-rule="evenodd" d="M18 0H2C.9 0 0 .9 0 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm-1 2v3h-2c-.6 0-1 .4-1 1v2h3v3h-3v7h-3v-7H9V8h2V5.5C11 3.6 12.6 2 14.5 2H17z"/>
              </svg>
            </a>
          </li>
          <li class="social-links__list_item">
            <a href="https://www.youtube.com/channel/UCNEHLtAc_JPI84xW8V4XWyw" class="social-links__list_link" aria-label="YouTube">
              <svg width="20" height="20">
                <path fill-rule="evenodd" d="M2 0h16a2 2 0 0 1 2 2v16a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2zm5.202 13.688v-7.99l7.628 4.01-7.628 3.98z"/>
              </svg>
            </a>
          </li>
          <li class="social-links__list_item">
            <a href="https://www.linkedin.com/company/elife-sciences-publications-ltd" class="social-links__list_link" aria-label="LinkedIn">
              <svg width="20" height="20">
                <path fill-rule="evenodd" d="M18 0H2C.9 0 0 .9 0 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zM6 17H3V8h3v9zM4.5 6.3c-1 0-1.8-.8-1.8-1.8s.8-1.8 1.8-1.8 1.8.8 1.8 1.8-.8 1.8-1.8 1.8zM17 17h-3v-5.3c0-.8-.7-1.5-1.5-1.5s-1.5.7-1.5 1.5V17H8V8h3v1.2c.5-.8 1.6-1.4 2.5-1.4 1.9 0 3.5 1.6 3.5 3.5V17z"/>
              </svg>
            </a>
          </li>
          <li class="social-links__list_item">
            <a href="https://twitter.com/elife" class="social-links__list_link" aria-label="Twitter">
              <svg width="20" height="20">
                <path fill-rule="evenodd" d="M18 0H2C.9 0 0 .9 0 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm-2.3 7.3c-.1 4.6-3 7.8-7.4 8-1.8.1-3.1-.5-4.3-1.2 1.3.2 3-.3 3.9-1.1-1.3-.1-2.1-.8-2.5-1.9.4.1.8 0 1.1 0-1.2-.4-2-1.1-2.1-2.7.3.2.7.3 1.1.3-.9-.5-1.5-2.4-.8-3.6C6 6.5 7.6 7.7 10.2 7.9c-.7-2.8 3.1-4.3 4.6-2.4.7-.1 1.2-.4 1.7-.6-.2.7-.6 1.1-1.1 1.5.5-.1 1-.2 1.4-.4-.1.5-.6.9-1.1 1.3z"/>
              </svg>
            </a>
          </li>
          <li class="social-links__list_item">
            <a href="https://medium.com/@eLife" class="social-links__list_link" aria-label="Medium">
              <svg width="20" height="20">
                <path fill-rule="evenodd" d="M18 0H2C.9 0 0 .9 0 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zm-1.39 6.5h-.498c-.186 0-.4.243-.4.414v6.214c0 .172.214.43.4.43h.5V15h-4.476v-1.443h.898V7.03h-.043L10.784 15h-1.71l-2.18-7.97H6.85v6.527h.94V15H4v-1.443h.484c.2 0 .414-.257.414-.43V6.915c0-.17-.214-.414-.414-.414H4V5h4.73l1.554 5.8h.043L11.894 5h4.717v1.5z"/>
              </svg>
            </a>
          </li>
          <li class="social-links__list_item">
            <a href="https://www.flickr.com/photos/128643624@N07/" class="social-links__list_link" aria-label="Flickr">
              <svg width="20" height="20">
                <path fill-rule="evenodd" d="M18 0H2C.9 0 0 .9 0 2v16c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V2c0-1.1-.9-2-2-2zM6 13a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm8 0a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"/>
              </svg>
            </a>
          </li>
        </ul>
      </div>
      
      <div class="github-link-wrapper">
        <a href="https://github.com/elifesciences" class="github-link">
          <svg width="20" height="20">
            <g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
              <g id="github-logo-svg" fill="#000000">
                <path d="M9.99907916,1.72084569e-15 C4.47773105,1.72084569e-15 2.22044605e-16,4.5904205 2.22044605e-16,10.2533868 C2.22044605e-16,14.7833822 2.86503576,18.6260419 6.83876117,19.9818304 C7.33908346,20.0762447 7.5214095,19.7596422 7.5214095,19.4877292 C7.5214095,19.2441405 7.512815,18.5996059 7.50790386,17.7442129 C4.72635747,18.3635703 4.13947635,16.3695415 4.13947635,16.3695415 C3.68458209,15.1849574 3.02894503,14.8696139 3.02894503,14.8696139 C2.12099819,14.2338913 3.09770097,14.2464799 3.09770097,14.2464799 C4.10141502,14.3188641 4.62936247,15.30329 4.62936247,15.30329 C5.52134811,16.869937 6.97013414,16.417378 7.53982627,16.1549064 C7.63068234,15.4927479 7.88913104,15.0408184 8.17459099,14.784641 C5.95414224,14.525946 3.6195095,13.6460053 3.6195095,9.7171139 C3.6195095,8.59799041 4.00933116,7.68217225 4.64900703,6.96588286 C4.54587311,6.7065584 4.20270727,5.66359573 4.74722981,4.25241751 C4.74722981,4.25241751 5.5864207,3.97672792 7.4968538,5.30356275 C8.29430001,5.07570971 9.15006599,4.96241262 10.0003069,4.95800662 C10.849934,4.96241262 11.7050861,5.07570971 12.5037601,5.30356275 C14.4129654,3.97672792 15.2509285,4.25241751 15.2509285,4.25241751 C15.7966788,5.66359573 15.453513,6.7065584 15.350993,6.96588286 C15.9918966,7.68217225 16.3786488,8.59799041 16.3786488,9.7171139 C16.3786488,13.6560761 14.0403327,14.5227989 11.8131312,14.7764585 C12.1716443,15.0930609 12.4914822,15.7187126 12.4914822,16.6748142 C12.4914822,18.045709 12.4792044,19.1516145 12.4792044,19.4877292 C12.4792044,19.7621599 12.6596888,20.0812801 13.1667639,19.981201 C17.1374198,18.6222653 20,14.7821233 20,10.2533868 C20,4.5904205 15.5222689,1.72084569e-15 9.99907916,1.72084569e-15" id="Fill-51"></path>
              </g>
            </g>
          </svg>
          <div class="github-link--text">Find us on GitHub</div>
        </a>
      </div>

    </div>

    <div class="grid-cell">

      <div class="site-smallprint">
        <small>eLife is a non-profit organisation inspired by research funders and led by scientists. Our mission is to help scientists accelerate discovery by operating a platform for research communication that encourages and recognises the most responsible behaviours in science.</small>
        <small>eLife Sciences Publications, Ltd is a limited liability non-profit non-stock corporation incorporated in the State of Delaware, USA, with company number 5030732, and is registered in the UK with company number FC030576 and branch number BR015634 at the address:</small>

        <address>
          eLife Sciences Publications, Ltd<br>
          Westbrook Centre, Milton Road<br>
          Cambridge CB4 1YG<br>
          UK
        </address>
      </div>

    </div>

    <div class="grid-cell">
      <div class="site-smallprint site-smallprint__copyright">
        <small>© <time>2018</time> eLife Sciences Publications Ltd. Subject to a <a href="https://creativecommons.org/licenses/by/4.0/" rel="license" class="site-smallprint__copyright_link">Creative Commons Attribution license</a>, except where otherwise noted. ISSN:&nbsp;2050-084X</small>
      </div>
    </div>

  </div>

</footer>

            
        </div>

    </div>
        <script>
            window.elifeConfig = window.elifeConfig || {};

            window.elifeConfig.scriptPaths = [
                '/assets/patterns/js/main.a60f455f.js'
            ];

                        window.elifeConfig.hypothesis = {
              usernameUrl: 'https://elifesciences.org/profiles/',
              services: [{
                apiUrl: 'https://hypothes.is/api/',
                authority: 'elifesciences.org',
                grantToken: null,
                icon: 'https://elifesciences.org/assets/favicons/favicon.ee498e7d.svg',
                onLoginRequest: function () {
                  window.location.assign('/log-in');
                },
                onSignupRequest: function () {
                  window.location.assign('/log-in');
                }              }]
            };
            
            window.elifeConfig.domain = 'elifesciences.org';

            (function (window) {
  'use strict';

  try {
    var scriptPaths,
        $body;
    if (
      !!window.localStorage &&
      !!(window.document.createElement('div')).dataset &&
      typeof window.document.querySelector === 'function' &&
      typeof window.addEventListener === 'function'
    ) {
      scriptPaths = window.elifeConfig.scriptPaths;
      if (Array.isArray(scriptPaths) && scriptPaths.length) {
        $body = window.document.querySelector('body');
        scriptPaths.forEach(function (scriptPath) {
          var $script = window.document.createElement('script');
          $script.src = scriptPath;
          $body.appendChild($script);
        });
      }
    }

  } catch (e) {
    if (typeof window.newrelic === 'object') {
      window.newrelic.noticeError(e);
    } else {
      window.console.error('JavaScript loading failed with the error: "' + e +
      '". Additionally, RUM logging failed.');
    }
  }

}(window));

        </script>

    <link href="/assets/patterns/css/all.0c439898.css" rel="stylesheet">


<script type="text/javascript">window.NREUM||(NREUM={});NREUM.info={"beacon":"bam.nr-data.net","licenseKey":"c53c018d69","applicationID":"29775807","transactionName":"NQQGNUZZWEACVhdZWQxOJQJAUVldTFQRRF8BDQE=","queueTime":0,"applicationTime":275,"atts":"GUMFQw5DS04=","errorBeacon":"bam.nr-data.net","agent":""}</script></body>

</html>

    http_version: 
  recorded_at: Thu, 29 Nov 2018 12:25:12 GMT
recorded_with: VCR 3.0.3
