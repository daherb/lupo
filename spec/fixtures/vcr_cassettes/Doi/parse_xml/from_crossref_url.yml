---
http_interactions:
- request:
    method: get
    uri: https://doi.org/ra/10.7554
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.1.1; +https://github.com/datacite/maremma)
      Accept:
      - text/html,application/json,application/xml;q=0.9, text/plain;q=0.8,image/png,*/*;q=0.5
  response:
    status:
      code: 200
      message: ''
    headers:
      Date:
      - Sat, 29 Dec 2018 11:38:45 GMT
      Content-Type:
      - application/json;charset=UTF-8
      Content-Length:
      - '54'
      Connection:
      - keep-alive
      Set-Cookie:
      - __cfduid=d6cb38ba457fb2a9c3c3885ce5421007c1546083525; expires=Sun, 29-Dec-19
        11:38:45 GMT; path=/; domain=.doi.org; HttpOnly
      Expect-Ct:
      - max-age=604800, report-uri="https://report-uri.cloudflare.com/cdn-cgi/beacon/expect-ct"
      Server:
      - cloudflare
      Cf-Ray:
      - 490bfb71c9df2762-FRA
    body:
      encoding: ASCII-8BIT
      string: |-
        [
          {
            "DOI": "10.7554",
            "RA": "Crossref"
          }
        ]
    http_version: 
  recorded_at: Sat, 29 Dec 2018 11:38:45 GMT
- request:
    method: get
    uri: http://www.crossref.org/openurl/?format=unixref&id=doi:10.7554/elife.01567&noredirect=true&pid=tech@datacite.org
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Mozilla/5.0 (compatible; Maremma/4.1.1; +https://github.com/datacite/maremma)
      Accept:
      - text/xml
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Apache-Coyote/1.1
      Crossref-Deployment-Name:
      - cr6-1
      Content-Type:
      - text/xml;charset=UTF-8
      Content-Language:
      - en-US
      Date:
      - Sat, 29 Dec 2018 11:38:45 GMT
      Connection:
      - close
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version: 
  recorded_at: Sat, 29 Dec 2018 11:38:45 GMT
recorded_with: VCR 3.0.3
