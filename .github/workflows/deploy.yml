name: Deploy
on:
  push:
    branches:
      - "master"
jobs:
  test:
    runs-on: ubuntu-latest
    services:
      memcached:
        image: memcached:1.4.31
        ports:
          - 11211/udp
      mysql:
        image: mysql:5.7
        env:
          MYSQL_DATABASE: datacite
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: "yes"
        ports:
          - 3306
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.1.1
        env:
          discovery.type: single-node
          ES_JAVA_OPTS: -Xms512m -Xmx512m
          ELASTIC_PASSWORD: changeme
          xpack.security.enabled: "false"
          http.cors.enabled: "true"
          http.cors.allow-origin: "*"
        ports:
          - 9200
    env:
      MEMCACHE_SERVERS: "127.0.0.1:11211"
      MYSQL_HOST: "127.0.0.1"
      MYSQL_DATABASE: datacite
      MYSQL_USER: root
      ES_HOST: "localhost:9200"
      ELASTIC_PASSWORD: "changeme"
      SECRET_KEY_BASE: ${{ secrets.SECRET_KEY_BASE }}
      SESSION_ENCRYPTED_COOKIE_SALT: ${{ secrets.SESSION_ENCRYPTED_COOKIE_SALT }}
      JWT_PRIVATE_KEY: ${{ secrets.JWT_PRIVATE_KEY }}
      JWT_PUBLIC_KEY: ${{ secrets.JWT_PUBLIC_KEY }}
      MDS_USERNAME: ${{ secrets.MDS_USERNAME }}
      MDS_PASSWORD: ${{ secrets.MDS_PASSWORD }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Ruby 2.6
        uses: actions/setup-ruby@v1
        with:
          ruby-version: '2.6.x'
      - uses: actions/cache@v2
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-gems-
      - name: Install
        env:
          MYSQL_PORT: ${{ job.services.mysql.ports[3306] }} 
        run: |
          cp .env.build .env
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
          sudo /etc/init.d/mysql start
          bundle exec rails db:setup RAILS_ENV=test      
      - name: Lint and Test
        env:
          MYSQL_PORT: ${{ job.services.mysql.ports[3306] }}
          ES_HOST: localhost:${{ job.services.elasticsearch.ports[9200] }}
          ELASTIC_PASSWORD: "changeme"
          MEMCACHE_SERVERS: "127.0.0.1:11211"
        run: |
          bundle exec rubocop
          bundle exec rspec
          echo $?
      - name: Publish code coverage
        uses: paambaati/codeclimate-action@v2.7.4
        env:
          CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}

  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push 
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ github.repository }}:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
  
  deploy:
    needs: [test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate tfvars file
        run: |
          wget https://github.com/jwilder/dockerize/releases/download/v0.6.0/dockerize-linux-amd64-v0.6.0.tar.gz
          tar -xzvf dockerize-linux-amd64-v0.6.0.tar.gz
          rm dockerize-linux-amd64-v0.6.0.tar.gz
          export GIT_SHA=$(git rev-parse --short HEAD)
          export GIT_TAG=$(git describe --tags $(git rev-list --tags --max-count=1))
          ./dockerize -template vendor/docker/_lupo.auto.tfvars.tmpl
          echo "::set-output name=tfvars::$(STDOUT)"
        id: set_tfvars
      - name: Checkout terraform repo
        uses: actions/checkout@v2
        with:
          # public repo with terraform configuration
          repository: 'datacite/mastino'
      - name: Commit changes to terraform config repository
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          echo ${{ steps.set_tfvars.outputs.tfvars }} >> stage/services/client-api/_lupo.auto.tfvars
          git add stage/services/client-api/_lupo.auto.tfvars
          git commit -m "Adding lupo git variables for latest commit"
      - name: Push changes
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: 'refs/heads/master'
          tags: false